{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.css","path":"css/aircloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.css.map","path":"css/aircloud.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.less","path":"css/aircloud.less","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1646795710532},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1646795709077},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1646795709441},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1646795710459},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1646795710752},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1646795710543},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1646795710519},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1646795710756},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1646795710758},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1646795710769},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1646795710773},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1646795710766},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1646795710777},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1646795710779},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1646795710764},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1646795710784},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1646795710781},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1646795710786},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1646795710794},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1646795709983},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1646795710200},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1646795710074},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1646795710233},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1646795710238},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1646795710213},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1646795710438},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1646795710271},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1646795709837},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1646795709857},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1646795709892},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1646795709995},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1646795710099},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1646795710122},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1646795710158},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1646795710140},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1646795710174},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1646795710219},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1646795710250},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1646795709958},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1646795710034},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1646795710244},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1646795710264},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1646795710276},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1646795710324},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1646795710333},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1646795710344},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1646795710572},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1646795710605},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1646795710598},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1646795709776},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1646795710494},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1646795710502},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1646795710610},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1646795710612},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1646795710682},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1646795710508},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1646795710023},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1646795710084},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1646795710112},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1646795710228},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1646795710261},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1646795710283},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1646795710569},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1646795709632},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1646795710477},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1646795710481},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1646795710485},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1646795709676},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1646795710617},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1646795710621},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1646795710626},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1646795710630},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1646795710660},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1646795710657},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1646795710646},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1646795710642},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1646795710663},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1646795710635},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1646795710666},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1646795710653},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1646795710566},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1646795710319},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1646795710738},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1646795710730},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1646795710717},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1646795710422},{"_id":"public/search.xml","hash":"2e0935eefaf84dd5ce8867236e8ef8e09f948f47","modified":1646796042052},{"_id":"public/2022/03/09/hello-world/index.html","hash":"005e525ca0f9574ccb57417d80f2e2fb52168b9d","modified":1646805193052},{"_id":"public/archives/index.html","hash":"59891ece8c18ba24ebfcbcda98d9d8a8056b6db0","modified":1646992821147},{"_id":"public/archives/2022/index.html","hash":"59891ece8c18ba24ebfcbcda98d9d8a8056b6db0","modified":1646992821147},{"_id":"public/archives/2022/03/index.html","hash":"59891ece8c18ba24ebfcbcda98d9d8a8056b6db0","modified":1646992821147},{"_id":"public/index.html","hash":"863c2964c2745759e38ac6e6096fc2b040253a6d","modified":1646992821147},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1646796042052},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1646796042052},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1646796042052},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1646796042052},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1646796042052},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1646796042052},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1646796042052},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1646796042052},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1646796042052},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1646796042052},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1646796042052},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1646796042052},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1646796042052},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1646796042052},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1646796042052},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1646796042052},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1646796042052},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1646796042052},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1646796042052},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1646796042052},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1646796042052},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1646796042052},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1646796042052},{"_id":"themes/hexo-theme-aircloud/layout/catagory.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566886},{"_id":"themes/hexo-theme-aircloud/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566893},{"_id":"themes/hexo-theme-aircloud/source/_less/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566912},{"_id":"themes/hexo-theme-aircloud/source/_less/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566913},{"_id":"themes/hexo-theme-aircloud/source/_less/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566923},{"_id":"themes/hexo-theme-aircloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566924},{"_id":"themes/hexo-theme-aircloud/source/_less/page.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566944},{"_id":"themes/hexo-theme-aircloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566945},{"_id":"themes/hexo-theme-aircloud/source/_less/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566952},{"_id":"themes/hexo-theme-aircloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646796566954},{"_id":"themes/hexo-theme-aircloud/.gitignore","hash":"e0ed028c2b034754ba17b141041c4b6fb2499177","modified":1646796566861},{"_id":"themes/hexo-theme-aircloud/_config.yml","hash":"0ad3a6ab2c9bb07fb1e030052622fdcde5c6f28a","modified":1646804491551},{"_id":"themes/hexo-theme-aircloud/LICENSE","hash":"278d4c4d923734a79286b3a5b524723c107c132a","modified":1646796566862},{"_id":"themes/hexo-theme-aircloud/readme.md","hash":"ed6d035a9c024f0787322d5c579fec405e3bdf40","modified":1646796566903},{"_id":"themes/hexo-theme-aircloud/readme-en.md","hash":"abb3560f471191278681891903353919f606c7b7","modified":1646796566901},{"_id":"themes/hexo-theme-aircloud/languages/ko.yml","hash":"53ab9cd27ca3fd5959743362b5aa62d868b0c795","modified":1646796566868},{"_id":"themes/hexo-theme-aircloud/languages/zh.yml","hash":"6c30c31f4ec188949caab414aa81296f3f49df53","modified":1646796566869},{"_id":"themes/hexo-theme-aircloud/languages/en.yml","hash":"8326653662ab628d33289c7fdaea3701274bb6fa","modified":1646796566867},{"_id":"themes/hexo-theme-aircloud/layout/404.ejs","hash":"51ac993ccbd409d7bfe0deee0de8015a89b5a15c","modified":1646796566872},{"_id":"themes/hexo-theme-aircloud/layout/archive.ejs","hash":"fe44df8eacf6e5e27df30b450033b18cae88f523","modified":1646796566885},{"_id":"themes/hexo-theme-aircloud/layout/about.ejs","hash":"24512de66f4e00cebe9be8e97bcfc2e4a4efdd12","modified":1646796566883},{"_id":"themes/hexo-theme-aircloud/layout/layout.ejs","hash":"d02b0dcd34e10b7e73bdd72bd964672a1f760b8f","modified":1646796566891},{"_id":"themes/hexo-theme-aircloud/layout/index.ejs","hash":"d576808a0a4179e4fa8a44615aab754fbca33f40","modified":1646796566887},{"_id":"themes/hexo-theme-aircloud/layout/post.ejs","hash":"5f3fcc6f6d86b8e43bf2d76cf809753e9b9f89aa","modified":1646796566895},{"_id":"themes/hexo-theme-aircloud/layout/tags.ejs","hash":"4de0555bf1f0e35fae7f797d43d7a8a0caf843ca","modified":1646796566897},{"_id":"themes/hexo-theme-aircloud/layout/_partial/donate.ejs","hash":"d97224a63f76045cbd0a53a3cabef3f0fd010ad3","modified":1646796566874},{"_id":"themes/hexo-theme-aircloud/layout/_partial/head.ejs","hash":"f2efb1f71199e44f1986d2f4723191fa728b332a","modified":1646796566877},{"_id":"themes/hexo-theme-aircloud/layout/_partial/footer.ejs","hash":"236e217c976680136272652332f29fa4dca37131","modified":1646796566875},{"_id":"themes/hexo-theme-aircloud/layout/_partial/toc.ejs","hash":"20106463b4885e93ef69122d69464174c45df71d","modified":1646796566881},{"_id":"themes/hexo-theme-aircloud/layout/_partial/nav.ejs","hash":"94cf4f06c500166ba2a2f70807660b612b9a1d6d","modified":1646796566879},{"_id":"themes/hexo-theme-aircloud/source/_less/archive.css","hash":"372da40133108078c91c3fc73b361aa81436248f","modified":1646796566916},{"_id":"themes/hexo-theme-aircloud/source/_less/archive.less","hash":"b27c479274d648918f29452aae8139bafe997804","modified":1646796566918},{"_id":"themes/hexo-theme-aircloud/source/_less/common.less","hash":"b09d13483dbc701fa34dedb6d2db8177e5fe7ad7","modified":1646796566922},{"_id":"themes/hexo-theme-aircloud/source/_less/common.css","hash":"0e80d6a42e463be27180f60c38d50615445c3177","modified":1646796566919},{"_id":"themes/hexo-theme-aircloud/source/_less/donate.css","hash":"d5c94d24c9ea63b1c2eb186a333f07a28a1f88a6","modified":1646796566926},{"_id":"themes/hexo-theme-aircloud/source/_less/gitment.css","hash":"01fdbed1c91ed4bd685886c298383809a0c5f1d7","modified":1646796566929},{"_id":"themes/hexo-theme-aircloud/source/_less/donate.less","hash":"efaf3572a73c26aff77331e18543b6b2336931c0","modified":1646796566927},{"_id":"themes/hexo-theme-aircloud/source/_less/gitment.less","hash":"f6f18d9e7451c501234a1d2166813edae63cd7d5","modified":1646796566930},{"_id":"themes/hexo-theme-aircloud/source/_less/hightlight.css","hash":"1eaef200f09685294c7382462b4774de2b4ba1f3","modified":1646796566933},{"_id":"themes/hexo-theme-aircloud/source/_less/hightlight.less","hash":"1eaef200f09685294c7382462b4774de2b4ba1f3","modified":1646796566934},{"_id":"themes/hexo-theme-aircloud/source/_less/index.css","hash":"8853826ff7e2f679f481f7de6cd742d9aaf76778","modified":1646796566936},{"_id":"themes/hexo-theme-aircloud/source/_less/layout.less","hash":"332a42d5ab45c73a25c90b182ede63a4dfdfbe30","modified":1646796566941},{"_id":"themes/hexo-theme-aircloud/source/_less/nav.css","hash":"66675a061db5067c088d314193a0f1ec8ef53276","modified":1646796566942},{"_id":"themes/hexo-theme-aircloud/source/_less/layout.css","hash":"f0d83db7d9a041c540cdeb093cedffdb982f90e4","modified":1646796566939},{"_id":"themes/hexo-theme-aircloud/source/_less/nav.less","hash":"5828d1f0436701c153e1f10d39ee2b2e251a6eae","modified":1646796566943},{"_id":"themes/hexo-theme-aircloud/source/_less/index.less","hash":"91f05eb476510fcbb2bed556092dfd889656ef0b","modified":1646796566937},{"_id":"themes/hexo-theme-aircloud/source/_less/post.css","hash":"ac889864719f7c261a6d1f48c7ffe4d177e662eb","modified":1646796566947},{"_id":"themes/hexo-theme-aircloud/source/_less/tag.css","hash":"bde136456c498eb671ea75c5315130d7dea1d9ba","modified":1646796566950},{"_id":"themes/hexo-theme-aircloud/source/_less/post.less","hash":"070f68106148a453e4c00b55d0644badfd9b4a64","modified":1646796566948},{"_id":"themes/hexo-theme-aircloud/source/_less/tag.less","hash":"e75576604e73ce22559ea0ff7816a52f72772219","modified":1646796566951},{"_id":"themes/hexo-theme-aircloud/source/_less/toc.less","hash":"8ab3e0bc1f7c9e466d7916e0bb2bfe7f2b4e1386","modified":1646796566957},{"_id":"themes/hexo-theme-aircloud/source/_less/toc.css","hash":"c17dd8c7c0326ff41eec9c25dbbcb19895f07367","modified":1646796566956},{"_id":"themes/hexo-theme-aircloud/source/_less/variables.css","hash":"c5d6ce4d904e7c108fbf4f2392eb2917bed636d8","modified":1646796566959},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.css","hash":"047eda914647ccee61c3858114750c932ab2cbda","modified":1646796566964},{"_id":"themes/hexo-theme-aircloud/source/_less/variables.less","hash":"e881ecdb19c4c5c6452abd5d0c6294c83fe6cb53","modified":1646796566960},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1646796566965},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.less","hash":"cf339e918c04f33837516cf4f54e27640cf48460","modified":1646796566967},{"_id":"themes/hexo-theme-aircloud/source/css/gitment.css","hash":"c6951e8c4d709f1917c2cf78b9777d9610cb6532","modified":1646796566969},{"_id":"themes/hexo-theme-aircloud/source/js/index.js","hash":"e44073fdb9d7dd334b39b65fc741172e62d42330","modified":1646796566980},{"_id":"themes/hexo-theme-aircloud/source/_less/_partial/footer.css","hash":"c14a3aac90c0d6fc0c4cdcd84b98e2ce3005d47f","modified":1646796566907},{"_id":"themes/hexo-theme-aircloud/source/_less/_partial/footer.css.map","hash":"9e8d4df5d08425de5a8b247d0dd8b805c6edc661","modified":1646796566909},{"_id":"themes/hexo-theme-aircloud/source/_less/_partial/footer.less","hash":"a4137692c2b8fd287ac014feb3e73aa0502f7c23","modified":1646796566911},{"_id":"themes/hexo-theme-aircloud/source/js/gitment.js","hash":"7d7a9c07794fb31fd6d4620e473d05e14e27285d","modified":1646796566977},{"_id":"public/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1646796617655},{"_id":"public/css/aircloud.less","hash":"cf339e918c04f33837516cf4f54e27640cf48460","modified":1646796617655},{"_id":"public/js/index.js","hash":"fcec9a2e4fd90a40957359d423f7f61caa712830","modified":1646796617655},{"_id":"public/css/aircloud.css","hash":"2fe1fc9d6fa13cc4660cb8ae3d80b8d51e04dbf6","modified":1646796617655},{"_id":"public/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1646796617655},{"_id":"public/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1646796617655},{"_id":"themes/hexo-theme-aircloud/source/about/index.md","hash":"8468e32276ba8cedb7342e12ff6d5d98725c079d","modified":1646806279864},{"_id":"themes/hexo-theme-aircloud/source/tags/index.md","hash":"d2390f25813e46af534b2b56f3f717538961b7dc","modified":1646806264356},{"_id":"public/tags/index.html","hash":"728444098067e8869a03e9d1d1a29a468c55b471","modified":1646992821147},{"_id":"public/about/index.html","hash":"35c8265474e791981c25b317abcf9445b30622c4","modified":1646806998176},{"_id":"themes/hexo-theme-aircloud/source/img/avatar.jpg","hash":"5304e3982426a771746874abc1e70bc93261e197","modified":1646804013857},{"_id":"public/img/avatar.jpg","hash":"5304e3982426a771746874abc1e70bc93261e197","modified":1646804045091},{"_id":"source/img/avatar.jpg","hash":"5304e3982426a771746874abc1e70bc93261e197","modified":1646804013857},{"_id":"public/search.json","hash":"0e5dad2cb5b410fa80702b80a725261e2a9f026d","modified":1646992821147},{"_id":"source/_posts/Hexo-Theme-AirCloud.md","hash":"6c36ca6c3ce9559ebed45d19b06c39eab06f76f6","modified":1646805957798},{"_id":"public/2022/03/09/Hexo-Theme-AirCloud/index.html","hash":"6135a93af57f5e4c5cae116225583214dc427511","modified":1646806630224},{"_id":"public/tags/Hexo/index.html","hash":"67758f1b1d70cd2dfdd2e5c549d7b843e0315196","modified":1646992821147},{"_id":"source/about/index.md","hash":"e3b787f49863ed2c08b42545c2eb2714ea6b4e9b","modified":1646806990130},{"_id":"source/tags/index.md","hash":"22dd3308e0a3db852e008fa8c8d526142e790dcb","modified":1646806958777},{"_id":"source/_posts/Install-WSL.md","hash":"b3960825643350dacce1f7ce33031302a89c36de","modified":1646807387803},{"_id":"public/2022/03/09/Install-WSL/index.html","hash":"822532e7b27c73fca0c64505c33ed80e06a3a6cb","modified":1646807396902},{"_id":"public/tags/WSL/index.html","hash":"67758f1b1d70cd2dfdd2e5c549d7b843e0315196","modified":1646992821147},{"_id":"source/_posts/Run-Time-Data-Areas.md","hash":"7ac966873bd441d5bdcd62699ba4359c6f910ccb","modified":1646895695270},{"_id":"public/2022/03/09/Run-Time-Data-Areas/index.html","hash":"5ae9630bf820a2affe3c9317282c88ed9937319c","modified":1646895707213},{"_id":"public/tags/Java/index.html","hash":"67758f1b1d70cd2dfdd2e5c549d7b843e0315196","modified":1646992821147},{"_id":"source/_posts/Mysql-Transaction-Isolation-Level.md","hash":"01471082197446150f518e4b953371280932e0f1","modified":1646880805865},{"_id":"public/2022/03/09/Mysql-Transaction-Isolation-Level/index.html","hash":"a626c88a236a0def0300c5eb0ad653b703ac3ea6","modified":1646880821153},{"_id":"public/tags/MySql/index.html","hash":"67758f1b1d70cd2dfdd2e5c549d7b843e0315196","modified":1646992821147},{"_id":"source/_posts/MyBatis-Plugin-Development.md","hash":"812035fc5c038833a136f0b5bd45426e2d736b12","modified":1646897321020},{"_id":"source/_posts/MySql-Transaction-Isolation-Level.md","hash":"7ecc66aaaa70f72cca7e4f4ae53890fc798e5d00","modified":1646897763975},{"_id":"public/2022/03/10/MyBatis-Plugin-Development/index.html","hash":"4df3492e7766ecc4b4f8e1c96cad0b42abc2e0f4","modified":1646897329819},{"_id":"public/2022/03/09/MySql-Transaction-Isolation-Level/index.html","hash":"ed6abffba0c02e248ce0bb00289ddf36d4ecb986","modified":1646897329819},{"_id":"public/tags/MyBatis/index.html","hash":"67758f1b1d70cd2dfdd2e5c549d7b843e0315196","modified":1646992821147},{"_id":"public/2022/03/10/MySql-Transaction-Isolation-Level/index.html","hash":"b8d2b6455c2152eb08f3d36f7e72c625c89f1481","modified":1646897778660},{"_id":"source/_posts/Observer.md","hash":"231a45a363d569186d26910e9887a4f83904fd60","modified":1646992809676},{"_id":"public/2022/03/11/Observer/index.html","hash":"9209f273444ff1c333b6e4ba89a9d3294164489d","modified":1646992821147},{"_id":"public/tags/Design/index.html","hash":"67758f1b1d70cd2dfdd2e5c549d7b843e0315196","modified":1646992821147}],"Category":[],"Data":[],"Page":[{"layout":"about","title":"About","date":"2022-03-09T06:21:57.000Z","comments":1,"_content":"","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2022-03-09 14:21:57\ncomments: true\n---","updated":"2022-03-09T06:23:10.130Z","path":"about/index.html","_id":"cl0j6d8ta00003wlnabu23kio","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\n---","date":"2022-03-09T06:22:38.777Z","updated":"2022-03-09T06:22:38.777Z","path":"tags/index.html","comments":1,"_id":"cl0j6d8ti00013wln8c8qh6nd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo-Theme-AirCloud","date":"2022-03-09T06:03:36.000Z","_content":"\n\n\n## Hexo-Theme-AirCloud: 一个简洁轻量的 hexo 博客主题\n\n## 功能简介\n\nHexo-Theme-AirCloud 是一个简洁轻量的 hexo 博客主题，旨在将中心放在博文本身，因此：\n\n- 默认没有大范围的主题色块、图片铺排等，也不要求每片博文配图，一方面这并不是我们记录知识的重点，另外一方面可能程序员群体并没有足够的素材，容易造成主题纠纷。\n- 建议通过不冗余的内容进行传达，比如默认没有博文摘要，因为不少开发者写博客的时候没有写博文摘要，如果从博客前一部分截取往往不能表达完整思想。\n\n另外，该主题主要实现的功能有:\n\n- 全局搜索功能，并对搜索内容进行高亮。\n- 博客评论功能，目前接入 [gitment](https://imsun.net/posts/gitment-introduction/)，之后考虑接入多种可选。\n- 文章详情页文章目录功能\n- 访问量统计（总体UV、PV，单页PV）\n- 语言切换能力，目前支持中文和英文\n\n## 起步\n\n> 我在”常见问题”中总结了该项目之前被提及的一些问题，如果你在使用过程中遇到了问题，可以在”常见问题”中寻找答案，如果没能解决，欢迎提[issue](https://github.com/aircloud/hexo-theme-aircloud/issues)，我会保证回复。\n\n注意，如果你不按照”功能适配”部分的内容进行操作，可能会导致相关提及的功能无法正常使用。\n\n- [基本使用](https://github.com/aircloud/hexo-theme-aircloud#基本使用)\n- 功能适配\n  - [搜索功能](https://github.com/aircloud/hexo-theme-aircloud#搜索功能)\n  - [`标签`页面 & `关于`页面](https://github.com/aircloud/hexo-theme-aircloud#标签页面--关于页面)\n  - [评论功能](https://github.com/aircloud/hexo-theme-aircloud#评论功能)\n  - [favicon 的配置](https://github.com/aircloud/hexo-theme-aircloud#标签页面--关于页面)\n  - [底部自定义](https://github.com/aircloud/hexo-theme-aircloud#底部自定义)\n- 高级自定义\n  - [首行缩进](https://github.com/aircloud/hexo-theme-aircloud#首行缩进)\n- 常见问题\n  - [如何取消赞赏功能？](https://github.com/aircloud/hexo-theme-aircloud#如何取消赞赏功能)\n- [一些注意事项](https://github.com/aircloud/hexo-theme-aircloud#一些注意事项)\n\n## 基本使用\n\n**建议：参考 [DEMO](https://github.com/aircloud/hexo-aircloud-blog) 进行配置，尤其是 _config.yml 部分，否则可能会造成功能缺失**\n\n同其他博客主题使用方式相同，直接 clone 或者下载本项目，复制粘贴到 themes 文件夹下即可。\n\n具体的 _config.yml 自定义配置，请参考[DEMO](https://github.com/aircloud/hexo-aircloud-blog)。\n\n## 功能适配\n\n### 搜索功能\n\n为了使用搜索功能，首先需要安装下列插件：\n\n```\nnpm i hexo-generator-search --save\n```\n\n然后在 _config.yml 中进行配置，可以参考如下配置：\n\n```\nsearch:\n  path: search.json\n  field: post\n```\n\n### `标签`页面 & `关于`页面\n\n如果是新项目，默认是没有`标签`页面和`关于`页面的，需要在`source`文件夹下建立`tags`文件夹和`about`文件夹。\n\n> 注：建议不要直接新建文件，而是采用 hexo 的 `hexo new page tags` 和 `hexo new page about` 的方式新建文件，这样可以被 hexo 索引到。\n\n其中`tags`文件夹中新建`index.md`并写入：\n\n```\n---\nlayout: \"tags\"\ntitle: \"Tags\"\n---\n```\n\n`about`文件夹下`index.md`为一篇支持 markdown 格式的文件，需要在开头添加：\n\n```\n---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ncomments: true\n---\n```\n\n### 评论功能\n\n目前，本博客支持以下评论功能：\n\n- [gitment](https://imsun.net/posts/gitment-introduction/)（gitment 经常会出现限频或者 404 等错误，其作者已关闭github认证转发服务）\n- [disqus](https://disqus.com/)\n- [LiveRe](https://www.livere.com/)\n\n#### gitment\n\n建议先在[gitment](https://imsun.net/posts/gitment-introduction/)进行了解，然后参考[DEMO](https://github.com/aircloud/hexo-aircloud-blog)进行配置，其中一些相关项目如下：\n\n```\ncomment:\n  type: gitment\n  id: your-id-created-by-https://github.com/settings/applications/new\n  secret: your-secret-created-by-https://github.com/settings/applications/new\n  owner: aircloud\n  repo: hexo-aircloud-blog\n```\n\n#### disqus\n\ndisqus 是一个使用比较广泛的评论系统，我们需要先在[官方网站](https://disqus.com/)注册一个账号。\n\n登录后，点击首页的 GET STARTED 按钮，之后选择 I want to install Disqus on my site 选项，填写相关内容，值得注意的是，`Website Name` 需要全网唯一，而且，一般情况，假设你的 `Website Name` 填写的是 example，那么下文 `script` 字段就可以写 `'https://example.disqus.com/embed.js'`。\n\n当然，你也可以在下一步 -> 选择 basic 免费套餐 -> 选择最后的 “I don’t see my platform listed, installed manually with universal code” -> 找到代码中的 `s.src = 'https://xxxx.disqus.com/embed.js'; `, 从而找到 script 地址。(无需插入 disqus 给出的脚本，只需按照这里的说明配置即可)\n\n之后，你需要在 `_config.yml` 中配置如下内容：\n\n```\ncomment:\n   type: disqus\n   script: 'https://example.disqus.com/embed.js'\n```\n\n当然，你也可以配置`url` 和 `identifier`， 但是这个就属于高级内容了，对于我们一般的 hexo 博客网站来说必要性不大，如果你需要配置这些内容，可能你已经是一个高级玩家了，可以在 `themes/aircloud/layout/layout.ejs` 的相关代码的基础上进行改动。\n\n> 注意: 目前，直接嵌入 disqus 的代码可能会加载失败，你也可以考虑将相关代码放在自己的博客下引入：在 public 文件夹下新建文件放入代码，跟随发布即可（放入 source 文件夹下可能会由于 hexo 的处理变得有错误），并同时更改 `_config.yml` 中的配置。\n\n#### LiveRe\n\nLiveRe 是一款来自韩国的支持中文且没有被墙LiveRe评论插件，重点是使用无需翻墙。\n\n该插件分为city和premium两个版本，其中city版是适合所有人使用的免费版本,有更高需求的可以考虑premium版本。\n\n注册之后，选择 安装 -> 选 city版本，按提示操作进入到管理页面，系统会给出一段嵌入代码，找到其中的data-id和data-uid。\n\n之后，你需要在`_config.yml`中配置如下内容\n\n```\ncomment:\n   type: livere\n   livere_id: 'city'\n   livere_uid: \n```\n\n`livere_id` 和 `livere_uid`就是注册后获得的 data-id和data-uid。\n\n### favicon 的配置\n\n项目的 favicon 默认在你的博客根目录的 `/source/img` 下面，在 `/source/img` 下面添加 favicon.ico 即可，不要添加在主题文件夹内。\n\n### 底部自定义\n\n大家如果访问提供的预览链接，会发现我们的博客底部是提供一些内容的：一些社交平台的个人主页链接、友情链接、PV、UV 与 本模版链接。\n\n一般情况下，大家无需改动底部的代码，直接在 `_config.yml` 中配置即可。\n\n配置社交平台主页的样例代码：\n\n```\n# SNS settings\n# 一些社交平台地址，支持以下几种：\nweibo_username:     3286578617\nzhihu_username:     ai-er-lan-xue-da\ngithub_username:    AirCloud\ntwitter_username:   iconie_alloy\nfacebook_username:  xiaotao.nie.5\nlinkedin_username:  小涛-聂-80964aba\n```\n\n如果不想包括某些社交平台，直接注释或删除相关代码即可（目前暂不支持在不改动模版代码的前提下新增社交平台）。\n\n配置友情链接的样例代码：\n\n```\n# Friends\n# 友情链接\nfriends: [\n    {\n        title: \"10000H\",\n        href: \"https://www.10000h.top\"\n    },{\n        title: \"Xiaotao's Page\",\n        href: \"https://niexiaotao.com\"\n    },{\n        title: \"It helps SEO\",\n        href: \"#\"\n    }\n]\n```\n\n最底部的 PV、UV 和模版地址，无需配置。\n\n## 高级自定义\n\n### 首行缩进\n\n目前可以配置是否在博客页面带有首行缩进两个汉字的效果，默认是有首行缩进的效果的，但是也可以通过下面的配置代码进行关闭：\n\n```\npost_style:\n    indent: 0\n```\n\n### 头像圆角\n\n```\navatar_style:\n  radius: true\n```\n\n## 常见问题\n\n### 如何取消赞赏功能？\n\n目前网站的赞赏功能做的比较鸡肋，缺乏一定的丰富度，如果你想取消这个功能，只需取消注释或者删除掉赞赏部分的相关配置即可：\n\n```\ndonate:\n  img: img/donate.jpg\n  content: 感谢鼓励\n```\n\n另外，如果你对赞赏部分有用户体验较好并且通用型比较好的设计，也可以提 issue，我会考虑实现。\n\n## 一些注意事项\n\n由于一些hexo的历史遗留问题等，为了避免给用户在使用过程中带来太多麻烦(比如需要改动主题代码甚至hexo源码)，建议用户使用过程中遵循一些规范：\n\n- 文章不要有跳级目录，比如一个`###`三级目录下是一个`#####`五级目录，然后又有一个`###`三级目录，这样有可能导致 hexo 解析出错，从而影响文章目录部分的展示。\n- 文章的段落(p)都有默认的两个字符的首行缩进，虽然能识别 markdown 段落中的换行，但是无法对换行后的内容进行缩进，所以这里需要注意样式问题(如果需要多行缩进，建议使用多个段落或者做成列表)。\n","source":"_posts/Hexo-Theme-AirCloud.md","raw":"---\ntitle: Hexo-Theme-AirCloud\ndate: 2022-03-09 14:03:36\ntags: Hexo\n---\n\n\n\n## Hexo-Theme-AirCloud: 一个简洁轻量的 hexo 博客主题\n\n## 功能简介\n\nHexo-Theme-AirCloud 是一个简洁轻量的 hexo 博客主题，旨在将中心放在博文本身，因此：\n\n- 默认没有大范围的主题色块、图片铺排等，也不要求每片博文配图，一方面这并不是我们记录知识的重点，另外一方面可能程序员群体并没有足够的素材，容易造成主题纠纷。\n- 建议通过不冗余的内容进行传达，比如默认没有博文摘要，因为不少开发者写博客的时候没有写博文摘要，如果从博客前一部分截取往往不能表达完整思想。\n\n另外，该主题主要实现的功能有:\n\n- 全局搜索功能，并对搜索内容进行高亮。\n- 博客评论功能，目前接入 [gitment](https://imsun.net/posts/gitment-introduction/)，之后考虑接入多种可选。\n- 文章详情页文章目录功能\n- 访问量统计（总体UV、PV，单页PV）\n- 语言切换能力，目前支持中文和英文\n\n## 起步\n\n> 我在”常见问题”中总结了该项目之前被提及的一些问题，如果你在使用过程中遇到了问题，可以在”常见问题”中寻找答案，如果没能解决，欢迎提[issue](https://github.com/aircloud/hexo-theme-aircloud/issues)，我会保证回复。\n\n注意，如果你不按照”功能适配”部分的内容进行操作，可能会导致相关提及的功能无法正常使用。\n\n- [基本使用](https://github.com/aircloud/hexo-theme-aircloud#基本使用)\n- 功能适配\n  - [搜索功能](https://github.com/aircloud/hexo-theme-aircloud#搜索功能)\n  - [`标签`页面 & `关于`页面](https://github.com/aircloud/hexo-theme-aircloud#标签页面--关于页面)\n  - [评论功能](https://github.com/aircloud/hexo-theme-aircloud#评论功能)\n  - [favicon 的配置](https://github.com/aircloud/hexo-theme-aircloud#标签页面--关于页面)\n  - [底部自定义](https://github.com/aircloud/hexo-theme-aircloud#底部自定义)\n- 高级自定义\n  - [首行缩进](https://github.com/aircloud/hexo-theme-aircloud#首行缩进)\n- 常见问题\n  - [如何取消赞赏功能？](https://github.com/aircloud/hexo-theme-aircloud#如何取消赞赏功能)\n- [一些注意事项](https://github.com/aircloud/hexo-theme-aircloud#一些注意事项)\n\n## 基本使用\n\n**建议：参考 [DEMO](https://github.com/aircloud/hexo-aircloud-blog) 进行配置，尤其是 _config.yml 部分，否则可能会造成功能缺失**\n\n同其他博客主题使用方式相同，直接 clone 或者下载本项目，复制粘贴到 themes 文件夹下即可。\n\n具体的 _config.yml 自定义配置，请参考[DEMO](https://github.com/aircloud/hexo-aircloud-blog)。\n\n## 功能适配\n\n### 搜索功能\n\n为了使用搜索功能，首先需要安装下列插件：\n\n```\nnpm i hexo-generator-search --save\n```\n\n然后在 _config.yml 中进行配置，可以参考如下配置：\n\n```\nsearch:\n  path: search.json\n  field: post\n```\n\n### `标签`页面 & `关于`页面\n\n如果是新项目，默认是没有`标签`页面和`关于`页面的，需要在`source`文件夹下建立`tags`文件夹和`about`文件夹。\n\n> 注：建议不要直接新建文件，而是采用 hexo 的 `hexo new page tags` 和 `hexo new page about` 的方式新建文件，这样可以被 hexo 索引到。\n\n其中`tags`文件夹中新建`index.md`并写入：\n\n```\n---\nlayout: \"tags\"\ntitle: \"Tags\"\n---\n```\n\n`about`文件夹下`index.md`为一篇支持 markdown 格式的文件，需要在开头添加：\n\n```\n---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ncomments: true\n---\n```\n\n### 评论功能\n\n目前，本博客支持以下评论功能：\n\n- [gitment](https://imsun.net/posts/gitment-introduction/)（gitment 经常会出现限频或者 404 等错误，其作者已关闭github认证转发服务）\n- [disqus](https://disqus.com/)\n- [LiveRe](https://www.livere.com/)\n\n#### gitment\n\n建议先在[gitment](https://imsun.net/posts/gitment-introduction/)进行了解，然后参考[DEMO](https://github.com/aircloud/hexo-aircloud-blog)进行配置，其中一些相关项目如下：\n\n```\ncomment:\n  type: gitment\n  id: your-id-created-by-https://github.com/settings/applications/new\n  secret: your-secret-created-by-https://github.com/settings/applications/new\n  owner: aircloud\n  repo: hexo-aircloud-blog\n```\n\n#### disqus\n\ndisqus 是一个使用比较广泛的评论系统，我们需要先在[官方网站](https://disqus.com/)注册一个账号。\n\n登录后，点击首页的 GET STARTED 按钮，之后选择 I want to install Disqus on my site 选项，填写相关内容，值得注意的是，`Website Name` 需要全网唯一，而且，一般情况，假设你的 `Website Name` 填写的是 example，那么下文 `script` 字段就可以写 `'https://example.disqus.com/embed.js'`。\n\n当然，你也可以在下一步 -> 选择 basic 免费套餐 -> 选择最后的 “I don’t see my platform listed, installed manually with universal code” -> 找到代码中的 `s.src = 'https://xxxx.disqus.com/embed.js'; `, 从而找到 script 地址。(无需插入 disqus 给出的脚本，只需按照这里的说明配置即可)\n\n之后，你需要在 `_config.yml` 中配置如下内容：\n\n```\ncomment:\n   type: disqus\n   script: 'https://example.disqus.com/embed.js'\n```\n\n当然，你也可以配置`url` 和 `identifier`， 但是这个就属于高级内容了，对于我们一般的 hexo 博客网站来说必要性不大，如果你需要配置这些内容，可能你已经是一个高级玩家了，可以在 `themes/aircloud/layout/layout.ejs` 的相关代码的基础上进行改动。\n\n> 注意: 目前，直接嵌入 disqus 的代码可能会加载失败，你也可以考虑将相关代码放在自己的博客下引入：在 public 文件夹下新建文件放入代码，跟随发布即可（放入 source 文件夹下可能会由于 hexo 的处理变得有错误），并同时更改 `_config.yml` 中的配置。\n\n#### LiveRe\n\nLiveRe 是一款来自韩国的支持中文且没有被墙LiveRe评论插件，重点是使用无需翻墙。\n\n该插件分为city和premium两个版本，其中city版是适合所有人使用的免费版本,有更高需求的可以考虑premium版本。\n\n注册之后，选择 安装 -> 选 city版本，按提示操作进入到管理页面，系统会给出一段嵌入代码，找到其中的data-id和data-uid。\n\n之后，你需要在`_config.yml`中配置如下内容\n\n```\ncomment:\n   type: livere\n   livere_id: 'city'\n   livere_uid: \n```\n\n`livere_id` 和 `livere_uid`就是注册后获得的 data-id和data-uid。\n\n### favicon 的配置\n\n项目的 favicon 默认在你的博客根目录的 `/source/img` 下面，在 `/source/img` 下面添加 favicon.ico 即可，不要添加在主题文件夹内。\n\n### 底部自定义\n\n大家如果访问提供的预览链接，会发现我们的博客底部是提供一些内容的：一些社交平台的个人主页链接、友情链接、PV、UV 与 本模版链接。\n\n一般情况下，大家无需改动底部的代码，直接在 `_config.yml` 中配置即可。\n\n配置社交平台主页的样例代码：\n\n```\n# SNS settings\n# 一些社交平台地址，支持以下几种：\nweibo_username:     3286578617\nzhihu_username:     ai-er-lan-xue-da\ngithub_username:    AirCloud\ntwitter_username:   iconie_alloy\nfacebook_username:  xiaotao.nie.5\nlinkedin_username:  小涛-聂-80964aba\n```\n\n如果不想包括某些社交平台，直接注释或删除相关代码即可（目前暂不支持在不改动模版代码的前提下新增社交平台）。\n\n配置友情链接的样例代码：\n\n```\n# Friends\n# 友情链接\nfriends: [\n    {\n        title: \"10000H\",\n        href: \"https://www.10000h.top\"\n    },{\n        title: \"Xiaotao's Page\",\n        href: \"https://niexiaotao.com\"\n    },{\n        title: \"It helps SEO\",\n        href: \"#\"\n    }\n]\n```\n\n最底部的 PV、UV 和模版地址，无需配置。\n\n## 高级自定义\n\n### 首行缩进\n\n目前可以配置是否在博客页面带有首行缩进两个汉字的效果，默认是有首行缩进的效果的，但是也可以通过下面的配置代码进行关闭：\n\n```\npost_style:\n    indent: 0\n```\n\n### 头像圆角\n\n```\navatar_style:\n  radius: true\n```\n\n## 常见问题\n\n### 如何取消赞赏功能？\n\n目前网站的赞赏功能做的比较鸡肋，缺乏一定的丰富度，如果你想取消这个功能，只需取消注释或者删除掉赞赏部分的相关配置即可：\n\n```\ndonate:\n  img: img/donate.jpg\n  content: 感谢鼓励\n```\n\n另外，如果你对赞赏部分有用户体验较好并且通用型比较好的设计，也可以提 issue，我会考虑实现。\n\n## 一些注意事项\n\n由于一些hexo的历史遗留问题等，为了避免给用户在使用过程中带来太多麻烦(比如需要改动主题代码甚至hexo源码)，建议用户使用过程中遵循一些规范：\n\n- 文章不要有跳级目录，比如一个`###`三级目录下是一个`#####`五级目录，然后又有一个`###`三级目录，这样有可能导致 hexo 解析出错，从而影响文章目录部分的展示。\n- 文章的段落(p)都有默认的两个字符的首行缩进，虽然能识别 markdown 段落中的换行，但是无法对换行后的内容进行缩进，所以这里需要注意样式问题(如果需要多行缩进，建议使用多个段落或者做成列表)。\n","slug":"Hexo-Theme-AirCloud","published":1,"updated":"2022-03-09T06:05:57.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0j64zx80000ygln8607btoa","content":"<h2 id=\"Hexo-Theme-AirCloud-一个简洁轻量的-hexo-博客主题\"><a href=\"#Hexo-Theme-AirCloud-一个简洁轻量的-hexo-博客主题\" class=\"headerlink\" title=\"Hexo-Theme-AirCloud: 一个简洁轻量的 hexo 博客主题\"></a>Hexo-Theme-AirCloud: 一个简洁轻量的 hexo 博客主题</h2><h2 id=\"功能简介\"><a href=\"#功能简介\" class=\"headerlink\" title=\"功能简介\"></a>功能简介</h2><p>Hexo-Theme-AirCloud 是一个简洁轻量的 hexo 博客主题，旨在将中心放在博文本身，因此：</p>\n<ul>\n<li>默认没有大范围的主题色块、图片铺排等，也不要求每片博文配图，一方面这并不是我们记录知识的重点，另外一方面可能程序员群体并没有足够的素材，容易造成主题纠纷。</li>\n<li>建议通过不冗余的内容进行传达，比如默认没有博文摘要，因为不少开发者写博客的时候没有写博文摘要，如果从博客前一部分截取往往不能表达完整思想。</li>\n</ul>\n<p>另外，该主题主要实现的功能有:</p>\n<ul>\n<li>全局搜索功能，并对搜索内容进行高亮。</li>\n<li>博客评论功能，目前接入 <a href=\"https://imsun.net/posts/gitment-introduction/\">gitment</a>，之后考虑接入多种可选。</li>\n<li>文章详情页文章目录功能</li>\n<li>访问量统计（总体UV、PV，单页PV）</li>\n<li>语言切换能力，目前支持中文和英文</li>\n</ul>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><blockquote>\n<p>我在”常见问题”中总结了该项目之前被提及的一些问题，如果你在使用过程中遇到了问题，可以在”常见问题”中寻找答案，如果没能解决，欢迎提<a href=\"https://github.com/aircloud/hexo-theme-aircloud/issues\">issue</a>，我会保证回复。</p>\n</blockquote>\n<p>注意，如果你不按照”功能适配”部分的内容进行操作，可能会导致相关提及的功能无法正常使用。</p>\n<ul>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\">基本使用</a></li>\n<li>功能适配<ul>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD\">搜索功能</a></li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%9D%A2--%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2\"><code>标签</code>页面 &amp; <code>关于</code>页面</a></li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD\">评论功能</a></li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%9D%A2--%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2\">favicon 的配置</a></li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E5%BA%95%E9%83%A8%E8%87%AA%E5%AE%9A%E4%B9%89\">底部自定义</a></li>\n</ul>\n</li>\n<li>高级自定义<ul>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E9%A6%96%E8%A1%8C%E7%BC%A9%E8%BF%9B\">首行缩进</a></li>\n</ul>\n</li>\n<li>常见问题<ul>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88%E8%B5%9E%E8%B5%8F%E5%8A%9F%E8%83%BD\">如何取消赞赏功能？</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">一些注意事项</a></li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p><strong>建议：参考 <a href=\"https://github.com/aircloud/hexo-aircloud-blog\">DEMO</a> 进行配置，尤其是 _config.yml 部分，否则可能会造成功能缺失</strong></p>\n<p>同其他博客主题使用方式相同，直接 clone 或者下载本项目，复制粘贴到 themes 文件夹下即可。</p>\n<p>具体的 _config.yml 自定义配置，请参考<a href=\"https://github.com/aircloud/hexo-aircloud-blog\">DEMO</a>。</p>\n<h2 id=\"功能适配\"><a href=\"#功能适配\" class=\"headerlink\" title=\"功能适配\"></a>功能适配</h2><h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h3><p>为了使用搜索功能，首先需要安装下列插件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在 _config.yml 中进行配置，可以参考如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"标签页面-amp-关于页面\"><a href=\"#标签页面-amp-关于页面\" class=\"headerlink\" title=\"标签页面 &amp; 关于页面\"></a><code>标签</code>页面 &amp; <code>关于</code>页面</h3><p>如果是新项目，默认是没有<code>标签</code>页面和<code>关于</code>页面的，需要在<code>source</code>文件夹下建立<code>tags</code>文件夹和<code>about</code>文件夹。</p>\n<blockquote>\n<p>注：建议不要直接新建文件，而是采用 hexo 的 <code>hexo new page tags</code> 和 <code>hexo new page about</code> 的方式新建文件，这样可以被 hexo 索引到。</p>\n</blockquote>\n<p>其中<code>tags</code>文件夹中新建<code>index.md</code>并写入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: &quot;tags&quot;</span><br><span class=\"line\">title: &quot;Tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><code>about</code>文件夹下<code>index.md</code>为一篇支持 markdown 格式的文件，需要在开头添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: &quot;about&quot;</span><br><span class=\"line\">title: &quot;About&quot;</span><br><span class=\"line\">date: 2016-04-21 04:48:33</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"评论功能\"><a href=\"#评论功能\" class=\"headerlink\" title=\"评论功能\"></a>评论功能</h3><p>目前，本博客支持以下评论功能：</p>\n<ul>\n<li><a href=\"https://imsun.net/posts/gitment-introduction/\">gitment</a>（gitment 经常会出现限频或者 404 等错误，其作者已关闭github认证转发服务）</li>\n<li><a href=\"https://disqus.com/\">disqus</a></li>\n<li><a href=\"https://www.livere.com/\">LiveRe</a></li>\n</ul>\n<h4 id=\"gitment\"><a href=\"#gitment\" class=\"headerlink\" title=\"gitment\"></a>gitment</h4><p>建议先在<a href=\"https://imsun.net/posts/gitment-introduction/\">gitment</a>进行了解，然后参考<a href=\"https://github.com/aircloud/hexo-aircloud-blog\">DEMO</a>进行配置，其中一些相关项目如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">  type: gitment</span><br><span class=\"line\">  id: your-id-created-by-https://github.com/settings/applications/new</span><br><span class=\"line\">  secret: your-secret-created-by-https://github.com/settings/applications/new</span><br><span class=\"line\">  owner: aircloud</span><br><span class=\"line\">  repo: hexo-aircloud-blog</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"disqus\"><a href=\"#disqus\" class=\"headerlink\" title=\"disqus\"></a>disqus</h4><p>disqus 是一个使用比较广泛的评论系统，我们需要先在<a href=\"https://disqus.com/\">官方网站</a>注册一个账号。</p>\n<p>登录后，点击首页的 GET STARTED 按钮，之后选择 I want to install Disqus on my site 选项，填写相关内容，值得注意的是，<code>Website Name</code> 需要全网唯一，而且，一般情况，假设你的 <code>Website Name</code> 填写的是 example，那么下文 <code>script</code> 字段就可以写 <code>&#39;https://example.disqus.com/embed.js&#39;</code>。</p>\n<p>当然，你也可以在下一步 -&gt; 选择 basic 免费套餐 -&gt; 选择最后的 “I don’t see my platform listed, installed manually with universal code” -&gt; 找到代码中的 <code>s.src = &#39;https://xxxx.disqus.com/embed.js&#39;; </code>, 从而找到 script 地址。(无需插入 disqus 给出的脚本，只需按照这里的说明配置即可)</p>\n<p>之后，你需要在 <code>_config.yml</code> 中配置如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">   type: disqus</span><br><span class=\"line\">   script: &#x27;https://example.disqus.com/embed.js&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>当然，你也可以配置<code>url</code> 和 <code>identifier</code>， 但是这个就属于高级内容了，对于我们一般的 hexo 博客网站来说必要性不大，如果你需要配置这些内容，可能你已经是一个高级玩家了，可以在 <code>themes/aircloud/layout/layout.ejs</code> 的相关代码的基础上进行改动。</p>\n<blockquote>\n<p>注意: 目前，直接嵌入 disqus 的代码可能会加载失败，你也可以考虑将相关代码放在自己的博客下引入：在 public 文件夹下新建文件放入代码，跟随发布即可（放入 source 文件夹下可能会由于 hexo 的处理变得有错误），并同时更改 <code>_config.yml</code> 中的配置。</p>\n</blockquote>\n<h4 id=\"LiveRe\"><a href=\"#LiveRe\" class=\"headerlink\" title=\"LiveRe\"></a>LiveRe</h4><p>LiveRe 是一款来自韩国的支持中文且没有被墙LiveRe评论插件，重点是使用无需翻墙。</p>\n<p>该插件分为city和premium两个版本，其中city版是适合所有人使用的免费版本,有更高需求的可以考虑premium版本。</p>\n<p>注册之后，选择 安装 -&gt; 选 city版本，按提示操作进入到管理页面，系统会给出一段嵌入代码，找到其中的data-id和data-uid。</p>\n<p>之后，你需要在<code>_config.yml</code>中配置如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">   type: livere</span><br><span class=\"line\">   livere_id: &#x27;city&#x27;</span><br><span class=\"line\">   livere_uid: </span><br></pre></td></tr></table></figure>\n\n<p><code>livere_id</code> 和 <code>livere_uid</code>就是注册后获得的 data-id和data-uid。</p>\n<h3 id=\"favicon-的配置\"><a href=\"#favicon-的配置\" class=\"headerlink\" title=\"favicon 的配置\"></a>favicon 的配置</h3><p>项目的 favicon 默认在你的博客根目录的 <code>/source/img</code> 下面，在 <code>/source/img</code> 下面添加 favicon.ico 即可，不要添加在主题文件夹内。</p>\n<h3 id=\"底部自定义\"><a href=\"#底部自定义\" class=\"headerlink\" title=\"底部自定义\"></a>底部自定义</h3><p>大家如果访问提供的预览链接，会发现我们的博客底部是提供一些内容的：一些社交平台的个人主页链接、友情链接、PV、UV 与 本模版链接。</p>\n<p>一般情况下，大家无需改动底部的代码，直接在 <code>_config.yml</code> 中配置即可。</p>\n<p>配置社交平台主页的样例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># SNS settings</span><br><span class=\"line\"># 一些社交平台地址，支持以下几种：</span><br><span class=\"line\">weibo_username:     3286578617</span><br><span class=\"line\">zhihu_username:     ai-er-lan-xue-da</span><br><span class=\"line\">github_username:    AirCloud</span><br><span class=\"line\">twitter_username:   iconie_alloy</span><br><span class=\"line\">facebook_username:  xiaotao.nie.5</span><br><span class=\"line\">linkedin_username:  小涛-聂-80964aba</span><br></pre></td></tr></table></figure>\n\n<p>如果不想包括某些社交平台，直接注释或删除相关代码即可（目前暂不支持在不改动模版代码的前提下新增社交平台）。</p>\n<p>配置友情链接的样例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Friends</span><br><span class=\"line\"># 友情链接</span><br><span class=\"line\">friends: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: &quot;10000H&quot;,</span><br><span class=\"line\">        href: &quot;https://www.10000h.top&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        title: &quot;Xiaotao&#x27;s Page&quot;,</span><br><span class=\"line\">        href: &quot;https://niexiaotao.com&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        title: &quot;It helps SEO&quot;,</span><br><span class=\"line\">        href: &quot;#&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>最底部的 PV、UV 和模版地址，无需配置。</p>\n<h2 id=\"高级自定义\"><a href=\"#高级自定义\" class=\"headerlink\" title=\"高级自定义\"></a>高级自定义</h2><h3 id=\"首行缩进\"><a href=\"#首行缩进\" class=\"headerlink\" title=\"首行缩进\"></a>首行缩进</h3><p>目前可以配置是否在博客页面带有首行缩进两个汉字的效果，默认是有首行缩进的效果的，但是也可以通过下面的配置代码进行关闭：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_style:</span><br><span class=\"line\">    indent: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"头像圆角\"><a href=\"#头像圆角\" class=\"headerlink\" title=\"头像圆角\"></a>头像圆角</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar_style:</span><br><span class=\"line\">  radius: true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"如何取消赞赏功能？\"><a href=\"#如何取消赞赏功能？\" class=\"headerlink\" title=\"如何取消赞赏功能？\"></a>如何取消赞赏功能？</h3><p>目前网站的赞赏功能做的比较鸡肋，缺乏一定的丰富度，如果你想取消这个功能，只需取消注释或者删除掉赞赏部分的相关配置即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">donate:</span><br><span class=\"line\">  img: img/donate.jpg</span><br><span class=\"line\">  content: 感谢鼓励</span><br></pre></td></tr></table></figure>\n\n<p>另外，如果你对赞赏部分有用户体验较好并且通用型比较好的设计，也可以提 issue，我会考虑实现。</p>\n<h2 id=\"一些注意事项\"><a href=\"#一些注意事项\" class=\"headerlink\" title=\"一些注意事项\"></a>一些注意事项</h2><p>由于一些hexo的历史遗留问题等，为了避免给用户在使用过程中带来太多麻烦(比如需要改动主题代码甚至hexo源码)，建议用户使用过程中遵循一些规范：</p>\n<ul>\n<li>文章不要有跳级目录，比如一个<code>###</code>三级目录下是一个<code>#####</code>五级目录，然后又有一个<code>###</code>三级目录，这样有可能导致 hexo 解析出错，从而影响文章目录部分的展示。</li>\n<li>文章的段落(p)都有默认的两个字符的首行缩进，虽然能识别 markdown 段落中的换行，但是无法对换行后的内容进行缩进，所以这里需要注意样式问题(如果需要多行缩进，建议使用多个段落或者做成列表)。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hexo-Theme-AirCloud-一个简洁轻量的-hexo-博客主题\"><a href=\"#Hexo-Theme-AirCloud-一个简洁轻量的-hexo-博客主题\" class=\"headerlink\" title=\"Hexo-Theme-AirCloud: 一个简洁轻量的 hexo 博客主题\"></a>Hexo-Theme-AirCloud: 一个简洁轻量的 hexo 博客主题</h2><h2 id=\"功能简介\"><a href=\"#功能简介\" class=\"headerlink\" title=\"功能简介\"></a>功能简介</h2><p>Hexo-Theme-AirCloud 是一个简洁轻量的 hexo 博客主题，旨在将中心放在博文本身，因此：</p>\n<ul>\n<li>默认没有大范围的主题色块、图片铺排等，也不要求每片博文配图，一方面这并不是我们记录知识的重点，另外一方面可能程序员群体并没有足够的素材，容易造成主题纠纷。</li>\n<li>建议通过不冗余的内容进行传达，比如默认没有博文摘要，因为不少开发者写博客的时候没有写博文摘要，如果从博客前一部分截取往往不能表达完整思想。</li>\n</ul>\n<p>另外，该主题主要实现的功能有:</p>\n<ul>\n<li>全局搜索功能，并对搜索内容进行高亮。</li>\n<li>博客评论功能，目前接入 <a href=\"https://imsun.net/posts/gitment-introduction/\">gitment</a>，之后考虑接入多种可选。</li>\n<li>文章详情页文章目录功能</li>\n<li>访问量统计（总体UV、PV，单页PV）</li>\n<li>语言切换能力，目前支持中文和英文</li>\n</ul>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><blockquote>\n<p>我在”常见问题”中总结了该项目之前被提及的一些问题，如果你在使用过程中遇到了问题，可以在”常见问题”中寻找答案，如果没能解决，欢迎提<a href=\"https://github.com/aircloud/hexo-theme-aircloud/issues\">issue</a>，我会保证回复。</p>\n</blockquote>\n<p>注意，如果你不按照”功能适配”部分的内容进行操作，可能会导致相关提及的功能无法正常使用。</p>\n<ul>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\">基本使用</a></li>\n<li>功能适配<ul>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD\">搜索功能</a></li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%9D%A2--%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2\"><code>标签</code>页面 &amp; <code>关于</code>页面</a></li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD\">评论功能</a></li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%9D%A2--%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2\">favicon 的配置</a></li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E5%BA%95%E9%83%A8%E8%87%AA%E5%AE%9A%E4%B9%89\">底部自定义</a></li>\n</ul>\n</li>\n<li>高级自定义<ul>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E9%A6%96%E8%A1%8C%E7%BC%A9%E8%BF%9B\">首行缩进</a></li>\n</ul>\n</li>\n<li>常见问题<ul>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88%E8%B5%9E%E8%B5%8F%E5%8A%9F%E8%83%BD\">如何取消赞赏功能？</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/aircloud/hexo-theme-aircloud#%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">一些注意事项</a></li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p><strong>建议：参考 <a href=\"https://github.com/aircloud/hexo-aircloud-blog\">DEMO</a> 进行配置，尤其是 _config.yml 部分，否则可能会造成功能缺失</strong></p>\n<p>同其他博客主题使用方式相同，直接 clone 或者下载本项目，复制粘贴到 themes 文件夹下即可。</p>\n<p>具体的 _config.yml 自定义配置，请参考<a href=\"https://github.com/aircloud/hexo-aircloud-blog\">DEMO</a>。</p>\n<h2 id=\"功能适配\"><a href=\"#功能适配\" class=\"headerlink\" title=\"功能适配\"></a>功能适配</h2><h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h3><p>为了使用搜索功能，首先需要安装下列插件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在 _config.yml 中进行配置，可以参考如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"标签页面-amp-关于页面\"><a href=\"#标签页面-amp-关于页面\" class=\"headerlink\" title=\"标签页面 &amp; 关于页面\"></a><code>标签</code>页面 &amp; <code>关于</code>页面</h3><p>如果是新项目，默认是没有<code>标签</code>页面和<code>关于</code>页面的，需要在<code>source</code>文件夹下建立<code>tags</code>文件夹和<code>about</code>文件夹。</p>\n<blockquote>\n<p>注：建议不要直接新建文件，而是采用 hexo 的 <code>hexo new page tags</code> 和 <code>hexo new page about</code> 的方式新建文件，这样可以被 hexo 索引到。</p>\n</blockquote>\n<p>其中<code>tags</code>文件夹中新建<code>index.md</code>并写入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: &quot;tags&quot;</span><br><span class=\"line\">title: &quot;Tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><code>about</code>文件夹下<code>index.md</code>为一篇支持 markdown 格式的文件，需要在开头添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: &quot;about&quot;</span><br><span class=\"line\">title: &quot;About&quot;</span><br><span class=\"line\">date: 2016-04-21 04:48:33</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"评论功能\"><a href=\"#评论功能\" class=\"headerlink\" title=\"评论功能\"></a>评论功能</h3><p>目前，本博客支持以下评论功能：</p>\n<ul>\n<li><a href=\"https://imsun.net/posts/gitment-introduction/\">gitment</a>（gitment 经常会出现限频或者 404 等错误，其作者已关闭github认证转发服务）</li>\n<li><a href=\"https://disqus.com/\">disqus</a></li>\n<li><a href=\"https://www.livere.com/\">LiveRe</a></li>\n</ul>\n<h4 id=\"gitment\"><a href=\"#gitment\" class=\"headerlink\" title=\"gitment\"></a>gitment</h4><p>建议先在<a href=\"https://imsun.net/posts/gitment-introduction/\">gitment</a>进行了解，然后参考<a href=\"https://github.com/aircloud/hexo-aircloud-blog\">DEMO</a>进行配置，其中一些相关项目如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">  type: gitment</span><br><span class=\"line\">  id: your-id-created-by-https://github.com/settings/applications/new</span><br><span class=\"line\">  secret: your-secret-created-by-https://github.com/settings/applications/new</span><br><span class=\"line\">  owner: aircloud</span><br><span class=\"line\">  repo: hexo-aircloud-blog</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"disqus\"><a href=\"#disqus\" class=\"headerlink\" title=\"disqus\"></a>disqus</h4><p>disqus 是一个使用比较广泛的评论系统，我们需要先在<a href=\"https://disqus.com/\">官方网站</a>注册一个账号。</p>\n<p>登录后，点击首页的 GET STARTED 按钮，之后选择 I want to install Disqus on my site 选项，填写相关内容，值得注意的是，<code>Website Name</code> 需要全网唯一，而且，一般情况，假设你的 <code>Website Name</code> 填写的是 example，那么下文 <code>script</code> 字段就可以写 <code>&#39;https://example.disqus.com/embed.js&#39;</code>。</p>\n<p>当然，你也可以在下一步 -&gt; 选择 basic 免费套餐 -&gt; 选择最后的 “I don’t see my platform listed, installed manually with universal code” -&gt; 找到代码中的 <code>s.src = &#39;https://xxxx.disqus.com/embed.js&#39;; </code>, 从而找到 script 地址。(无需插入 disqus 给出的脚本，只需按照这里的说明配置即可)</p>\n<p>之后，你需要在 <code>_config.yml</code> 中配置如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">   type: disqus</span><br><span class=\"line\">   script: &#x27;https://example.disqus.com/embed.js&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>当然，你也可以配置<code>url</code> 和 <code>identifier</code>， 但是这个就属于高级内容了，对于我们一般的 hexo 博客网站来说必要性不大，如果你需要配置这些内容，可能你已经是一个高级玩家了，可以在 <code>themes/aircloud/layout/layout.ejs</code> 的相关代码的基础上进行改动。</p>\n<blockquote>\n<p>注意: 目前，直接嵌入 disqus 的代码可能会加载失败，你也可以考虑将相关代码放在自己的博客下引入：在 public 文件夹下新建文件放入代码，跟随发布即可（放入 source 文件夹下可能会由于 hexo 的处理变得有错误），并同时更改 <code>_config.yml</code> 中的配置。</p>\n</blockquote>\n<h4 id=\"LiveRe\"><a href=\"#LiveRe\" class=\"headerlink\" title=\"LiveRe\"></a>LiveRe</h4><p>LiveRe 是一款来自韩国的支持中文且没有被墙LiveRe评论插件，重点是使用无需翻墙。</p>\n<p>该插件分为city和premium两个版本，其中city版是适合所有人使用的免费版本,有更高需求的可以考虑premium版本。</p>\n<p>注册之后，选择 安装 -&gt; 选 city版本，按提示操作进入到管理页面，系统会给出一段嵌入代码，找到其中的data-id和data-uid。</p>\n<p>之后，你需要在<code>_config.yml</code>中配置如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">   type: livere</span><br><span class=\"line\">   livere_id: &#x27;city&#x27;</span><br><span class=\"line\">   livere_uid: </span><br></pre></td></tr></table></figure>\n\n<p><code>livere_id</code> 和 <code>livere_uid</code>就是注册后获得的 data-id和data-uid。</p>\n<h3 id=\"favicon-的配置\"><a href=\"#favicon-的配置\" class=\"headerlink\" title=\"favicon 的配置\"></a>favicon 的配置</h3><p>项目的 favicon 默认在你的博客根目录的 <code>/source/img</code> 下面，在 <code>/source/img</code> 下面添加 favicon.ico 即可，不要添加在主题文件夹内。</p>\n<h3 id=\"底部自定义\"><a href=\"#底部自定义\" class=\"headerlink\" title=\"底部自定义\"></a>底部自定义</h3><p>大家如果访问提供的预览链接，会发现我们的博客底部是提供一些内容的：一些社交平台的个人主页链接、友情链接、PV、UV 与 本模版链接。</p>\n<p>一般情况下，大家无需改动底部的代码，直接在 <code>_config.yml</code> 中配置即可。</p>\n<p>配置社交平台主页的样例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># SNS settings</span><br><span class=\"line\"># 一些社交平台地址，支持以下几种：</span><br><span class=\"line\">weibo_username:     3286578617</span><br><span class=\"line\">zhihu_username:     ai-er-lan-xue-da</span><br><span class=\"line\">github_username:    AirCloud</span><br><span class=\"line\">twitter_username:   iconie_alloy</span><br><span class=\"line\">facebook_username:  xiaotao.nie.5</span><br><span class=\"line\">linkedin_username:  小涛-聂-80964aba</span><br></pre></td></tr></table></figure>\n\n<p>如果不想包括某些社交平台，直接注释或删除相关代码即可（目前暂不支持在不改动模版代码的前提下新增社交平台）。</p>\n<p>配置友情链接的样例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Friends</span><br><span class=\"line\"># 友情链接</span><br><span class=\"line\">friends: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: &quot;10000H&quot;,</span><br><span class=\"line\">        href: &quot;https://www.10000h.top&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        title: &quot;Xiaotao&#x27;s Page&quot;,</span><br><span class=\"line\">        href: &quot;https://niexiaotao.com&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        title: &quot;It helps SEO&quot;,</span><br><span class=\"line\">        href: &quot;#&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>最底部的 PV、UV 和模版地址，无需配置。</p>\n<h2 id=\"高级自定义\"><a href=\"#高级自定义\" class=\"headerlink\" title=\"高级自定义\"></a>高级自定义</h2><h3 id=\"首行缩进\"><a href=\"#首行缩进\" class=\"headerlink\" title=\"首行缩进\"></a>首行缩进</h3><p>目前可以配置是否在博客页面带有首行缩进两个汉字的效果，默认是有首行缩进的效果的，但是也可以通过下面的配置代码进行关闭：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_style:</span><br><span class=\"line\">    indent: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"头像圆角\"><a href=\"#头像圆角\" class=\"headerlink\" title=\"头像圆角\"></a>头像圆角</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar_style:</span><br><span class=\"line\">  radius: true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"如何取消赞赏功能？\"><a href=\"#如何取消赞赏功能？\" class=\"headerlink\" title=\"如何取消赞赏功能？\"></a>如何取消赞赏功能？</h3><p>目前网站的赞赏功能做的比较鸡肋，缺乏一定的丰富度，如果你想取消这个功能，只需取消注释或者删除掉赞赏部分的相关配置即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">donate:</span><br><span class=\"line\">  img: img/donate.jpg</span><br><span class=\"line\">  content: 感谢鼓励</span><br></pre></td></tr></table></figure>\n\n<p>另外，如果你对赞赏部分有用户体验较好并且通用型比较好的设计，也可以提 issue，我会考虑实现。</p>\n<h2 id=\"一些注意事项\"><a href=\"#一些注意事项\" class=\"headerlink\" title=\"一些注意事项\"></a>一些注意事项</h2><p>由于一些hexo的历史遗留问题等，为了避免给用户在使用过程中带来太多麻烦(比如需要改动主题代码甚至hexo源码)，建议用户使用过程中遵循一些规范：</p>\n<ul>\n<li>文章不要有跳级目录，比如一个<code>###</code>三级目录下是一个<code>#####</code>五级目录，然后又有一个<code>###</code>三级目录，这样有可能导致 hexo 解析出错，从而影响文章目录部分的展示。</li>\n<li>文章的段落(p)都有默认的两个字符的首行缩进，虽然能识别 markdown 段落中的换行，但是无法对换行后的内容进行缩进，所以这里需要注意样式问题(如果需要多行缩进，建议使用多个段落或者做成列表)。</li>\n</ul>\n"},{"title":"Install-WSL","date":"2022-03-09T06:28:42.000Z","_content":"\n\n\n为简单起见，通常建议使用 [`wsl --install`](https://docs.microsoft.com/zh-cn/windows/wsl/install) 安装适用于 Linux 的 Windows 子系统，但如果运行的是旧版 Windows，则可能不支持这种方式。 下面介绍了手动安装步骤。 如果在安装过程中遇到问题，请查看[疑难解答指南的安装部分](https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#installation-issues)。\n\n## 步骤 1 - 启用适用于 Linux 的 Windows 子系统\n\n需要先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发。\n\n以管理员身份打开 PowerShell（“开始”菜单 >“PowerShell”> 单击右键 >“以管理员身份运行”），然后输入以下命令：\n\nPowerShell复制\n\n```powershell\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n```\n\n建议现在转到步骤 #2，更新到 WSL 2，但如果只想安装 WSL 1，现在可以重新启动计算机，然后继续执行[步骤 6 - 安装所选的 Linux 发行版](https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-6---install-your-linux-distribution-of-choice)。 若要更新到 WSL 2，请等待重新启动计算机，然后继续执行下一步。\n\n## 步骤 2 - 检查运行 WSL 2 的要求\n\n若要更新到 WSL 2，需要运行 Windows 10。\n\n- 对于 x64 系统：**版本 1903** 或更高版本，采用**内部版本 18362** 或更高版本。\n- 对于 ARM64 系统：**版本 2004** 或更高版本，采用**内部版本 19041** 或更高版本。\n- 低于 18362 的版本不支持 WSL 2。 使用 [Windows Update 助手](https://www.microsoft.com/software-download/windows10)更新 Windows 版本。\n\n若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。 更新到“设置”菜单中的[最新 Windows 版本](ms-settings:windowsupdate)。\n\n 备注\n\n如果运行的是 Windows 10 版本1903 或 1909，请在 Windows 菜单中打开“设置”，导航到“更新和安全性”，然后选择“检查更新”。 内部版本号必须是 18362.1049+ 或 18363.1049+，次要内部版本号需要高于 .1049。 阅读详细信息：[WSL 2 即将支持 Windows 10 版本 1903 和 1909](https://devblogs.microsoft.com/commandline/wsl-2-support-is-coming-to-windows-10-versions-1903-and-1909/)。\n\n## 步骤 3 - 启用虚拟机功能\n\n安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要[虚拟化功能](https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#error-0x80370102-the-virtual-machine-could-not-be-started-because-a-required-feature-is-not-installed)才能使用此功能。\n\n以管理员身份打开 PowerShell 并运行：\n\nPowerShell复制\n\n```powershell\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n**重新启动**计算机，以完成 WSL 安装并更新到 WSL 2。\n\n## 步骤 4 - 下载 Linux 内核更新包\n\n1. 下载最新包：\n\n   - [适用于 x64 计算机的 WSL2 Linux 内核更新包](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi)\n\n    备注\n\n   如果使用的是 ARM64 计算机，请下载 [ARM64 包](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi)。 如果不确定自己计算机的类型，请打开命令提示符或 PowerShell，并输入：`systeminfo | find \"System Type\"`。 **Caveat：** 在非英文版 Windows 上，你可能必须修改搜索文本，对“System Type”字符串进行翻译。 你可能还需要对引号进行转义来用于 find 命令。 例如，在德语版中使用 `systeminfo | find '\"Systemtyp\"'`。\n\n2. 运行上一步中下载的更新包。 （双击以运行 - 系统将提示你提供提升的权限，选择“是”以批准此安装。）\n\n安装完成后，请继续执行下一步 - 在安装新的 Linux 分发时，将 WSL 2 设置为默认版本。 （如果希望将新的 Linux 安装设置为 WSL 1，请跳过此步骤。）\n\n 备注\n\n有关详细信息，请参阅 [Windows 命令行博客](https://aka.ms/cliblog)上的文章[对更新 WSL2 Linux 内核的更改](https://devblogs.microsoft.com/commandline/wsl2-will-be-generally-available-in-windows-10-version-2004)。\n\n## 步骤 5 - 将 WSL 2 设置为默认版本\n\n打开 PowerShell，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：\n\nPowerShell复制\n\n```powershell\nwsl --set-default-version 2\n```\n\n## 步骤 6 - 安装所选的 Linux 分发\n\n1. 打开 [Microsoft Store](https://aka.ms/wslstore)，并选择你偏好的 Linux 分发版。\n","source":"_posts/Install-WSL.md","raw":"---\ntitle: Install-WSL\ndate: 2022-03-09 14:28:42\ntags: WSL\n---\n\n\n\n为简单起见，通常建议使用 [`wsl --install`](https://docs.microsoft.com/zh-cn/windows/wsl/install) 安装适用于 Linux 的 Windows 子系统，但如果运行的是旧版 Windows，则可能不支持这种方式。 下面介绍了手动安装步骤。 如果在安装过程中遇到问题，请查看[疑难解答指南的安装部分](https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#installation-issues)。\n\n## 步骤 1 - 启用适用于 Linux 的 Windows 子系统\n\n需要先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发。\n\n以管理员身份打开 PowerShell（“开始”菜单 >“PowerShell”> 单击右键 >“以管理员身份运行”），然后输入以下命令：\n\nPowerShell复制\n\n```powershell\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n```\n\n建议现在转到步骤 #2，更新到 WSL 2，但如果只想安装 WSL 1，现在可以重新启动计算机，然后继续执行[步骤 6 - 安装所选的 Linux 发行版](https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-6---install-your-linux-distribution-of-choice)。 若要更新到 WSL 2，请等待重新启动计算机，然后继续执行下一步。\n\n## 步骤 2 - 检查运行 WSL 2 的要求\n\n若要更新到 WSL 2，需要运行 Windows 10。\n\n- 对于 x64 系统：**版本 1903** 或更高版本，采用**内部版本 18362** 或更高版本。\n- 对于 ARM64 系统：**版本 2004** 或更高版本，采用**内部版本 19041** 或更高版本。\n- 低于 18362 的版本不支持 WSL 2。 使用 [Windows Update 助手](https://www.microsoft.com/software-download/windows10)更新 Windows 版本。\n\n若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。 更新到“设置”菜单中的[最新 Windows 版本](ms-settings:windowsupdate)。\n\n 备注\n\n如果运行的是 Windows 10 版本1903 或 1909，请在 Windows 菜单中打开“设置”，导航到“更新和安全性”，然后选择“检查更新”。 内部版本号必须是 18362.1049+ 或 18363.1049+，次要内部版本号需要高于 .1049。 阅读详细信息：[WSL 2 即将支持 Windows 10 版本 1903 和 1909](https://devblogs.microsoft.com/commandline/wsl-2-support-is-coming-to-windows-10-versions-1903-and-1909/)。\n\n## 步骤 3 - 启用虚拟机功能\n\n安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要[虚拟化功能](https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#error-0x80370102-the-virtual-machine-could-not-be-started-because-a-required-feature-is-not-installed)才能使用此功能。\n\n以管理员身份打开 PowerShell 并运行：\n\nPowerShell复制\n\n```powershell\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n**重新启动**计算机，以完成 WSL 安装并更新到 WSL 2。\n\n## 步骤 4 - 下载 Linux 内核更新包\n\n1. 下载最新包：\n\n   - [适用于 x64 计算机的 WSL2 Linux 内核更新包](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi)\n\n    备注\n\n   如果使用的是 ARM64 计算机，请下载 [ARM64 包](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi)。 如果不确定自己计算机的类型，请打开命令提示符或 PowerShell，并输入：`systeminfo | find \"System Type\"`。 **Caveat：** 在非英文版 Windows 上，你可能必须修改搜索文本，对“System Type”字符串进行翻译。 你可能还需要对引号进行转义来用于 find 命令。 例如，在德语版中使用 `systeminfo | find '\"Systemtyp\"'`。\n\n2. 运行上一步中下载的更新包。 （双击以运行 - 系统将提示你提供提升的权限，选择“是”以批准此安装。）\n\n安装完成后，请继续执行下一步 - 在安装新的 Linux 分发时，将 WSL 2 设置为默认版本。 （如果希望将新的 Linux 安装设置为 WSL 1，请跳过此步骤。）\n\n 备注\n\n有关详细信息，请参阅 [Windows 命令行博客](https://aka.ms/cliblog)上的文章[对更新 WSL2 Linux 内核的更改](https://devblogs.microsoft.com/commandline/wsl2-will-be-generally-available-in-windows-10-version-2004)。\n\n## 步骤 5 - 将 WSL 2 设置为默认版本\n\n打开 PowerShell，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：\n\nPowerShell复制\n\n```powershell\nwsl --set-default-version 2\n```\n\n## 步骤 6 - 安装所选的 Linux 分发\n\n1. 打开 [Microsoft Store](https://aka.ms/wslstore)，并选择你偏好的 Linux 分发版。\n","slug":"Install-WSL","published":1,"updated":"2022-03-09T06:29:47.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0j6lsfj0000ywln2wel6npw","content":"<p>为简单起见，通常建议使用 <a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\"><code>wsl --install</code></a> 安装适用于 Linux 的 Windows 子系统，但如果运行的是旧版 Windows，则可能不支持这种方式。 下面介绍了手动安装步骤。 如果在安装过程中遇到问题，请查看<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#installation-issues\">疑难解答指南的安装部分</a>。</p>\n<h2 id=\"步骤-1-启用适用于-Linux-的-Windows-子系统\"><a href=\"#步骤-1-启用适用于-Linux-的-Windows-子系统\" class=\"headerlink\" title=\"步骤 1 - 启用适用于 Linux 的 Windows 子系统\"></a>步骤 1 - 启用适用于 Linux 的 Windows 子系统</h2><p>需要先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发。</p>\n<p>以管理员身份打开 PowerShell（“开始”菜单 &gt;“PowerShell”&gt; 单击右键 &gt;“以管理员身份运行”），然后输入以下命令：</p>\n<p>PowerShell复制</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /<span class=\"built_in\">enable-feature</span> /featurename:Microsoft<span class=\"literal\">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure>\n\n<p>建议现在转到步骤 #2，更新到 WSL 2，但如果只想安装 WSL 1，现在可以重新启动计算机，然后继续执行<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-6---install-your-linux-distribution-of-choice\">步骤 6 - 安装所选的 Linux 发行版</a>。 若要更新到 WSL 2，请等待重新启动计算机，然后继续执行下一步。</p>\n<h2 id=\"步骤-2-检查运行-WSL-2-的要求\"><a href=\"#步骤-2-检查运行-WSL-2-的要求\" class=\"headerlink\" title=\"步骤 2 - 检查运行 WSL 2 的要求\"></a>步骤 2 - 检查运行 WSL 2 的要求</h2><p>若要更新到 WSL 2，需要运行 Windows 10。</p>\n<ul>\n<li>对于 x64 系统：<strong>版本 1903</strong> 或更高版本，采用<strong>内部版本 18362</strong> 或更高版本。</li>\n<li>对于 ARM64 系统：<strong>版本 2004</strong> 或更高版本，采用<strong>内部版本 19041</strong> 或更高版本。</li>\n<li>低于 18362 的版本不支持 WSL 2。 使用 <a href=\"https://www.microsoft.com/software-download/windows10\">Windows Update 助手</a>更新 Windows 版本。</li>\n</ul>\n<p>若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。 更新到“设置”菜单中的<a href=\"ms-settings:windowsupdate\">最新 Windows 版本</a>。</p>\n<p> 备注</p>\n<p>如果运行的是 Windows 10 版本1903 或 1909，请在 Windows 菜单中打开“设置”，导航到“更新和安全性”，然后选择“检查更新”。 内部版本号必须是 18362.1049+ 或 18363.1049+，次要内部版本号需要高于 .1049。 阅读详细信息：<a href=\"https://devblogs.microsoft.com/commandline/wsl-2-support-is-coming-to-windows-10-versions-1903-and-1909/\">WSL 2 即将支持 Windows 10 版本 1903 和 1909</a>。</p>\n<h2 id=\"步骤-3-启用虚拟机功能\"><a href=\"#步骤-3-启用虚拟机功能\" class=\"headerlink\" title=\"步骤 3 - 启用虚拟机功能\"></a>步骤 3 - 启用虚拟机功能</h2><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#error-0x80370102-the-virtual-machine-could-not-be-started-because-a-required-feature-is-not-installed\">虚拟化功能</a>才能使用此功能。</p>\n<p>以管理员身份打开 PowerShell 并运行：</p>\n<p>PowerShell复制</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /<span class=\"built_in\">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>\n\n<p><strong>重新启动</strong>计算机，以完成 WSL 安装并更新到 WSL 2。</p>\n<h2 id=\"步骤-4-下载-Linux-内核更新包\"><a href=\"#步骤-4-下载-Linux-内核更新包\" class=\"headerlink\" title=\"步骤 4 - 下载 Linux 内核更新包\"></a>步骤 4 - 下载 Linux 内核更新包</h2><ol>\n<li><p>下载最新包：</p>\n<ul>\n<li><a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\">适用于 x64 计算机的 WSL2 Linux 内核更新包</a></li>\n</ul>\n<p> 备注</p>\n<p>如果使用的是 ARM64 计算机，请下载 <a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi\">ARM64 包</a>。 如果不确定自己计算机的类型，请打开命令提示符或 PowerShell，并输入：<code>systeminfo | find &quot;System Type&quot;</code>。 <strong>Caveat：</strong> 在非英文版 Windows 上，你可能必须修改搜索文本，对“System Type”字符串进行翻译。 你可能还需要对引号进行转义来用于 find 命令。 例如，在德语版中使用 <code>systeminfo | find &#39;&quot;Systemtyp&quot;&#39;</code>。</p>\n</li>\n<li><p>运行上一步中下载的更新包。 （双击以运行 - 系统将提示你提供提升的权限，选择“是”以批准此安装。）</p>\n</li>\n</ol>\n<p>安装完成后，请继续执行下一步 - 在安装新的 Linux 分发时，将 WSL 2 设置为默认版本。 （如果希望将新的 Linux 安装设置为 WSL 1，请跳过此步骤。）</p>\n<p> 备注</p>\n<p>有关详细信息，请参阅 <a href=\"https://aka.ms/cliblog\">Windows 命令行博客</a>上的文章<a href=\"https://devblogs.microsoft.com/commandline/wsl2-will-be-generally-available-in-windows-10-version-2004\">对更新 WSL2 Linux 内核的更改</a>。</p>\n<h2 id=\"步骤-5-将-WSL-2-设置为默认版本\"><a href=\"#步骤-5-将-WSL-2-设置为默认版本\" class=\"headerlink\" title=\"步骤 5 - 将 WSL 2 设置为默认版本\"></a>步骤 5 - 将 WSL 2 设置为默认版本</h2><p>打开 PowerShell，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：</p>\n<p>PowerShell复制</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--set-default-version</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步骤-6-安装所选的-Linux-分发\"><a href=\"#步骤-6-安装所选的-Linux-分发\" class=\"headerlink\" title=\"步骤 6 - 安装所选的 Linux 分发\"></a>步骤 6 - 安装所选的 Linux 分发</h2><ol>\n<li>打开 <a href=\"https://aka.ms/wslstore\">Microsoft Store</a>，并选择你偏好的 Linux 分发版。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>为简单起见，通常建议使用 <a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\"><code>wsl --install</code></a> 安装适用于 Linux 的 Windows 子系统，但如果运行的是旧版 Windows，则可能不支持这种方式。 下面介绍了手动安装步骤。 如果在安装过程中遇到问题，请查看<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#installation-issues\">疑难解答指南的安装部分</a>。</p>\n<h2 id=\"步骤-1-启用适用于-Linux-的-Windows-子系统\"><a href=\"#步骤-1-启用适用于-Linux-的-Windows-子系统\" class=\"headerlink\" title=\"步骤 1 - 启用适用于 Linux 的 Windows 子系统\"></a>步骤 1 - 启用适用于 Linux 的 Windows 子系统</h2><p>需要先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发。</p>\n<p>以管理员身份打开 PowerShell（“开始”菜单 &gt;“PowerShell”&gt; 单击右键 &gt;“以管理员身份运行”），然后输入以下命令：</p>\n<p>PowerShell复制</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /<span class=\"built_in\">enable-feature</span> /featurename:Microsoft<span class=\"literal\">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure>\n\n<p>建议现在转到步骤 #2，更新到 WSL 2，但如果只想安装 WSL 1，现在可以重新启动计算机，然后继续执行<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-6---install-your-linux-distribution-of-choice\">步骤 6 - 安装所选的 Linux 发行版</a>。 若要更新到 WSL 2，请等待重新启动计算机，然后继续执行下一步。</p>\n<h2 id=\"步骤-2-检查运行-WSL-2-的要求\"><a href=\"#步骤-2-检查运行-WSL-2-的要求\" class=\"headerlink\" title=\"步骤 2 - 检查运行 WSL 2 的要求\"></a>步骤 2 - 检查运行 WSL 2 的要求</h2><p>若要更新到 WSL 2，需要运行 Windows 10。</p>\n<ul>\n<li>对于 x64 系统：<strong>版本 1903</strong> 或更高版本，采用<strong>内部版本 18362</strong> 或更高版本。</li>\n<li>对于 ARM64 系统：<strong>版本 2004</strong> 或更高版本，采用<strong>内部版本 19041</strong> 或更高版本。</li>\n<li>低于 18362 的版本不支持 WSL 2。 使用 <a href=\"https://www.microsoft.com/software-download/windows10\">Windows Update 助手</a>更新 Windows 版本。</li>\n</ul>\n<p>若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。 更新到“设置”菜单中的<a href=\"ms-settings:windowsupdate\">最新 Windows 版本</a>。</p>\n<p> 备注</p>\n<p>如果运行的是 Windows 10 版本1903 或 1909，请在 Windows 菜单中打开“设置”，导航到“更新和安全性”，然后选择“检查更新”。 内部版本号必须是 18362.1049+ 或 18363.1049+，次要内部版本号需要高于 .1049。 阅读详细信息：<a href=\"https://devblogs.microsoft.com/commandline/wsl-2-support-is-coming-to-windows-10-versions-1903-and-1909/\">WSL 2 即将支持 Windows 10 版本 1903 和 1909</a>。</p>\n<h2 id=\"步骤-3-启用虚拟机功能\"><a href=\"#步骤-3-启用虚拟机功能\" class=\"headerlink\" title=\"步骤 3 - 启用虚拟机功能\"></a>步骤 3 - 启用虚拟机功能</h2><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#error-0x80370102-the-virtual-machine-could-not-be-started-because-a-required-feature-is-not-installed\">虚拟化功能</a>才能使用此功能。</p>\n<p>以管理员身份打开 PowerShell 并运行：</p>\n<p>PowerShell复制</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /<span class=\"built_in\">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>\n\n<p><strong>重新启动</strong>计算机，以完成 WSL 安装并更新到 WSL 2。</p>\n<h2 id=\"步骤-4-下载-Linux-内核更新包\"><a href=\"#步骤-4-下载-Linux-内核更新包\" class=\"headerlink\" title=\"步骤 4 - 下载 Linux 内核更新包\"></a>步骤 4 - 下载 Linux 内核更新包</h2><ol>\n<li><p>下载最新包：</p>\n<ul>\n<li><a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\">适用于 x64 计算机的 WSL2 Linux 内核更新包</a></li>\n</ul>\n<p> 备注</p>\n<p>如果使用的是 ARM64 计算机，请下载 <a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi\">ARM64 包</a>。 如果不确定自己计算机的类型，请打开命令提示符或 PowerShell，并输入：<code>systeminfo | find &quot;System Type&quot;</code>。 <strong>Caveat：</strong> 在非英文版 Windows 上，你可能必须修改搜索文本，对“System Type”字符串进行翻译。 你可能还需要对引号进行转义来用于 find 命令。 例如，在德语版中使用 <code>systeminfo | find &#39;&quot;Systemtyp&quot;&#39;</code>。</p>\n</li>\n<li><p>运行上一步中下载的更新包。 （双击以运行 - 系统将提示你提供提升的权限，选择“是”以批准此安装。）</p>\n</li>\n</ol>\n<p>安装完成后，请继续执行下一步 - 在安装新的 Linux 分发时，将 WSL 2 设置为默认版本。 （如果希望将新的 Linux 安装设置为 WSL 1，请跳过此步骤。）</p>\n<p> 备注</p>\n<p>有关详细信息，请参阅 <a href=\"https://aka.ms/cliblog\">Windows 命令行博客</a>上的文章<a href=\"https://devblogs.microsoft.com/commandline/wsl2-will-be-generally-available-in-windows-10-version-2004\">对更新 WSL2 Linux 内核的更改</a>。</p>\n<h2 id=\"步骤-5-将-WSL-2-设置为默认版本\"><a href=\"#步骤-5-将-WSL-2-设置为默认版本\" class=\"headerlink\" title=\"步骤 5 - 将 WSL 2 设置为默认版本\"></a>步骤 5 - 将 WSL 2 设置为默认版本</h2><p>打开 PowerShell，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：</p>\n<p>PowerShell复制</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--set-default-version</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步骤-6-安装所选的-Linux-分发\"><a href=\"#步骤-6-安装所选的-Linux-分发\" class=\"headerlink\" title=\"步骤 6 - 安装所选的 Linux 分发\"></a>步骤 6 - 安装所选的 Linux 分发</h2><ol>\n<li>打开 <a href=\"https://aka.ms/wslstore\">Microsoft Store</a>，并选择你偏好的 Linux 分发版。</li>\n</ol>\n"},{"title":"Run-Time-Data-Areas","date":"2022-03-09T09:40:20.000Z","_content":"\n\n\n## The pc Register - 程序计数器\n\n线程私有内存，保存**当前线程所执行的字节码的行号指示器**，这里和计算机组成原理中的计数器不太一样，计组中的 PC 指的是**下一条要执行的指令**的地址。JVM 中常有多个线程执行，故每条线程都需要有一个独立的程序计数器。\n\n如果线程执行的是 Java 方法，哪儿计数器记录的就是正在执行的虚拟机字节码指令的地址；如果执行的是 Native 方法，这个计数器则为空。\n\nP.S. 这块内存无OutOfMemoryError\n\n## Java Virtual Machine Stacks - Java 虚拟机栈\n\n线程私有，虚拟机栈描述的是 Java 方法执行的内存模型，每个方法在执行时会创建一个栈帧，栈帧中保存有局部变量表、操作数栈、动态链接和方法出口等。粗略来讲 Java 内存区分为堆和栈，实际上『栈』指的往往是虚拟机栈中的局部变量表部分。\n\n局部变量表中存放了编译期可知的各种基本数据类型、对象引用类型和 returnAddress 类型。方法运行期间局部变量表大小不变。\n\n## Native Method Stacks - 本地方法栈\n\n和虚拟机栈类似，不过区别在于虚拟机栈为 Java 方法（字节码）服务，而本地方法栈为 Native 方法服务（类似 C 语言中的栈）。具体实现可将这两者合二为一。\n\n## Heap - 堆\n\n堆是被所有线程共享的一块内存区域。一般来说所有的对象实例和数组都要在堆上分配，但一些优化技术导致不一定所有对象实例都在堆上分配。\n\n## Method Area - 方法区\n\n各线程共享的一块内存区域，和操作系统中进程中的『文本段』有些类似，用于存储虚拟机加载的类信息、常量、静态常量和即时编译器编译后的代码数据等。\n\n## Run-Time Constant Pool - 运行时常量池\n\n这一部分是方法区的一部分，用于保存 Class 文件中编译期生成的字面值和符号引用。\n\n## 直接内存\n\n这一部分并不是虚拟机运行时的数据区域，用于 Native 函数分配堆外内存，提高性能用（不必在操作系统堆和 Java 堆复制数据）。","source":"_posts/Run-Time-Data-Areas.md","raw":"---\ntitle: Run-Time-Data-Areas\ndate: 2022-03-09 17:40:20\ntags: Java\n---\n\n\n\n## The pc Register - 程序计数器\n\n线程私有内存，保存**当前线程所执行的字节码的行号指示器**，这里和计算机组成原理中的计数器不太一样，计组中的 PC 指的是**下一条要执行的指令**的地址。JVM 中常有多个线程执行，故每条线程都需要有一个独立的程序计数器。\n\n如果线程执行的是 Java 方法，哪儿计数器记录的就是正在执行的虚拟机字节码指令的地址；如果执行的是 Native 方法，这个计数器则为空。\n\nP.S. 这块内存无OutOfMemoryError\n\n## Java Virtual Machine Stacks - Java 虚拟机栈\n\n线程私有，虚拟机栈描述的是 Java 方法执行的内存模型，每个方法在执行时会创建一个栈帧，栈帧中保存有局部变量表、操作数栈、动态链接和方法出口等。粗略来讲 Java 内存区分为堆和栈，实际上『栈』指的往往是虚拟机栈中的局部变量表部分。\n\n局部变量表中存放了编译期可知的各种基本数据类型、对象引用类型和 returnAddress 类型。方法运行期间局部变量表大小不变。\n\n## Native Method Stacks - 本地方法栈\n\n和虚拟机栈类似，不过区别在于虚拟机栈为 Java 方法（字节码）服务，而本地方法栈为 Native 方法服务（类似 C 语言中的栈）。具体实现可将这两者合二为一。\n\n## Heap - 堆\n\n堆是被所有线程共享的一块内存区域。一般来说所有的对象实例和数组都要在堆上分配，但一些优化技术导致不一定所有对象实例都在堆上分配。\n\n## Method Area - 方法区\n\n各线程共享的一块内存区域，和操作系统中进程中的『文本段』有些类似，用于存储虚拟机加载的类信息、常量、静态常量和即时编译器编译后的代码数据等。\n\n## Run-Time Constant Pool - 运行时常量池\n\n这一部分是方法区的一部分，用于保存 Class 文件中编译期生成的字面值和符号引用。\n\n## 直接内存\n\n这一部分并不是虚拟机运行时的数据区域，用于 Native 函数分配堆外内存，提高性能用（不必在操作系统堆和 Java 堆复制数据）。","slug":"Run-Time-Data-Areas","published":1,"updated":"2022-03-10T07:01:35.270Z","_id":"cl0jdgabt00003cln8bvta0n8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"The-pc-Register-程序计数器\"><a href=\"#The-pc-Register-程序计数器\" class=\"headerlink\" title=\"The pc Register - 程序计数器\"></a>The pc Register - 程序计数器</h2><p>线程私有内存，保存<strong>当前线程所执行的字节码的行号指示器</strong>，这里和计算机组成原理中的计数器不太一样，计组中的 PC 指的是<strong>下一条要执行的指令</strong>的地址。JVM 中常有多个线程执行，故每条线程都需要有一个独立的程序计数器。</p>\n<p>如果线程执行的是 Java 方法，哪儿计数器记录的就是正在执行的虚拟机字节码指令的地址；如果执行的是 Native 方法，这个计数器则为空。</p>\n<p>P.S. 这块内存无OutOfMemoryError</p>\n<h2 id=\"Java-Virtual-Machine-Stacks-Java-虚拟机栈\"><a href=\"#Java-Virtual-Machine-Stacks-Java-虚拟机栈\" class=\"headerlink\" title=\"Java Virtual Machine Stacks - Java 虚拟机栈\"></a>Java Virtual Machine Stacks - Java 虚拟机栈</h2><p>线程私有，虚拟机栈描述的是 Java 方法执行的内存模型，每个方法在执行时会创建一个栈帧，栈帧中保存有局部变量表、操作数栈、动态链接和方法出口等。粗略来讲 Java 内存区分为堆和栈，实际上『栈』指的往往是虚拟机栈中的局部变量表部分。</p>\n<p>局部变量表中存放了编译期可知的各种基本数据类型、对象引用类型和 returnAddress 类型。方法运行期间局部变量表大小不变。</p>\n<h2 id=\"Native-Method-Stacks-本地方法栈\"><a href=\"#Native-Method-Stacks-本地方法栈\" class=\"headerlink\" title=\"Native Method Stacks - 本地方法栈\"></a>Native Method Stacks - 本地方法栈</h2><p>和虚拟机栈类似，不过区别在于虚拟机栈为 Java 方法（字节码）服务，而本地方法栈为 Native 方法服务（类似 C 语言中的栈）。具体实现可将这两者合二为一。</p>\n<h2 id=\"Heap-堆\"><a href=\"#Heap-堆\" class=\"headerlink\" title=\"Heap - 堆\"></a>Heap - 堆</h2><p>堆是被所有线程共享的一块内存区域。一般来说所有的对象实例和数组都要在堆上分配，但一些优化技术导致不一定所有对象实例都在堆上分配。</p>\n<h2 id=\"Method-Area-方法区\"><a href=\"#Method-Area-方法区\" class=\"headerlink\" title=\"Method Area - 方法区\"></a>Method Area - 方法区</h2><p>各线程共享的一块内存区域，和操作系统中进程中的『文本段』有些类似，用于存储虚拟机加载的类信息、常量、静态常量和即时编译器编译后的代码数据等。</p>\n<h2 id=\"Run-Time-Constant-Pool-运行时常量池\"><a href=\"#Run-Time-Constant-Pool-运行时常量池\" class=\"headerlink\" title=\"Run-Time Constant Pool - 运行时常量池\"></a>Run-Time Constant Pool - 运行时常量池</h2><p>这一部分是方法区的一部分，用于保存 Class 文件中编译期生成的字面值和符号引用。</p>\n<h2 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h2><p>这一部分并不是虚拟机运行时的数据区域，用于 Native 函数分配堆外内存，提高性能用（不必在操作系统堆和 Java 堆复制数据）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"The-pc-Register-程序计数器\"><a href=\"#The-pc-Register-程序计数器\" class=\"headerlink\" title=\"The pc Register - 程序计数器\"></a>The pc Register - 程序计数器</h2><p>线程私有内存，保存<strong>当前线程所执行的字节码的行号指示器</strong>，这里和计算机组成原理中的计数器不太一样，计组中的 PC 指的是<strong>下一条要执行的指令</strong>的地址。JVM 中常有多个线程执行，故每条线程都需要有一个独立的程序计数器。</p>\n<p>如果线程执行的是 Java 方法，哪儿计数器记录的就是正在执行的虚拟机字节码指令的地址；如果执行的是 Native 方法，这个计数器则为空。</p>\n<p>P.S. 这块内存无OutOfMemoryError</p>\n<h2 id=\"Java-Virtual-Machine-Stacks-Java-虚拟机栈\"><a href=\"#Java-Virtual-Machine-Stacks-Java-虚拟机栈\" class=\"headerlink\" title=\"Java Virtual Machine Stacks - Java 虚拟机栈\"></a>Java Virtual Machine Stacks - Java 虚拟机栈</h2><p>线程私有，虚拟机栈描述的是 Java 方法执行的内存模型，每个方法在执行时会创建一个栈帧，栈帧中保存有局部变量表、操作数栈、动态链接和方法出口等。粗略来讲 Java 内存区分为堆和栈，实际上『栈』指的往往是虚拟机栈中的局部变量表部分。</p>\n<p>局部变量表中存放了编译期可知的各种基本数据类型、对象引用类型和 returnAddress 类型。方法运行期间局部变量表大小不变。</p>\n<h2 id=\"Native-Method-Stacks-本地方法栈\"><a href=\"#Native-Method-Stacks-本地方法栈\" class=\"headerlink\" title=\"Native Method Stacks - 本地方法栈\"></a>Native Method Stacks - 本地方法栈</h2><p>和虚拟机栈类似，不过区别在于虚拟机栈为 Java 方法（字节码）服务，而本地方法栈为 Native 方法服务（类似 C 语言中的栈）。具体实现可将这两者合二为一。</p>\n<h2 id=\"Heap-堆\"><a href=\"#Heap-堆\" class=\"headerlink\" title=\"Heap - 堆\"></a>Heap - 堆</h2><p>堆是被所有线程共享的一块内存区域。一般来说所有的对象实例和数组都要在堆上分配，但一些优化技术导致不一定所有对象实例都在堆上分配。</p>\n<h2 id=\"Method-Area-方法区\"><a href=\"#Method-Area-方法区\" class=\"headerlink\" title=\"Method Area - 方法区\"></a>Method Area - 方法区</h2><p>各线程共享的一块内存区域，和操作系统中进程中的『文本段』有些类似，用于存储虚拟机加载的类信息、常量、静态常量和即时编译器编译后的代码数据等。</p>\n<h2 id=\"Run-Time-Constant-Pool-运行时常量池\"><a href=\"#Run-Time-Constant-Pool-运行时常量池\" class=\"headerlink\" title=\"Run-Time Constant Pool - 运行时常量池\"></a>Run-Time Constant Pool - 运行时常量池</h2><p>这一部分是方法区的一部分，用于保存 Class 文件中编译期生成的字面值和符号引用。</p>\n<h2 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h2><p>这一部分并不是虚拟机运行时的数据区域，用于 Native 函数分配堆外内存，提高性能用（不必在操作系统堆和 Java 堆复制数据）。</p>\n"},{"title":"MyBatis-Plugin-Development","date":"2022-03-10T06:59:54.000Z","_content":"\n\n\n## MyBatis插件开发流程\n\n- 类实现Interceptor接口；\n\n- 类上添加注解\n\n  ```\n  @Intercepts({@Signature(type, method, args)})\n  ```\n\n  - **type**：需要拦截的对象，只可取四大对象之一Executor.class、StatementHandler.class、ParameterHandler.class、ResultSetHandler.class。\n  - **method**：拦截的对象方法。\n  - **args**：拦截的对象方法参数。\n\n- 实现拦截的方法Object intercept(Invocation invocation)。\n\n##  Interceptor接口\n\n```\npublic interface Interceptor {\n\n    /**\n     * 此方法将直接覆盖被拦截对象的原有方法\n     *\n     * @param invocation 通过该对象可以反射调度拦截对象的方法\n     * @return\n     * @throws Throwable\n     */\n    Object intercept(Invocation invocation) throws Throwable;\n\n    /**\n     * 为被拦截对象生成一个代理对象，并返回它\n     *\n     * @param target 被拦截的对象\n     * @return\n     */\n    Object plugin(Object target);\n\n    /**\n     * 设置插件配置的参数\n     *\n     * @param properties 插件配置的参数\n     */\n    void setProperties(Properties properties);\n\n}\n```\n\n## 步骤\n\n### 确定拦截的方法签名\n\n需要在实现Interceptor接口的类上加入@Intercepts({@Signature(type, method, args)})注解才能够运行插件。\n\n#### type－拦截的对象\n\n- Executor 执行的SQL 全过程，包括组装参数、组装结果返回和执行SQL的过程等都可以拦截。\n- StatementHandler 执行SQL的过程，拦截该对象可以重写执行SQL的过程。\n- ParameterHandler 执行SQL 的参数组装，拦截该对象可以重写组装参数的规则。\n- ResultSetHandler 执行结果的组装，拦截该对象可以重写组装结果的规则。\n\n对于分页插件，我们只需要拦截StatementHandler对象，重写SELECT类型的SQL语句，实现分页功能。\n\n\n\n#### method－拦截的方法\n\n我们已经能够确定拦截的对象是StatementHandler了，现在我们要确定拦截的是哪个方法，因为StatementHandler是通过prepare方法对SQL进行预编译的，所以我们需要对prepare方法进行拦截，在这个方法执行之前，完成SQL的重新编写，加入limit。\n\n**StatementHandler**\n\n```\npublic interface StatementHandler {\n\n  /**\n   * 预编译SQL\n   *\n   * @param connection\n   * @return\n   * @throws SQLException\n   */\n  Statement prepare(Connection connection)\n      throws SQLException;\n\n  /**\n   * 设置参数\n   *\n   * @param statement\n   * @throws SQLException\n   */\n  void parameterize(Statement statement)\n      throws SQLException;\n\n  /**\n   * 批处理\n   *\n   * @param statement\n   * @throws SQLException\n   */\n  void batch(Statement statement)\n      throws SQLException;\n\n  /**\n   * 执行更新操作\n   *\n   * @param statement\n   * @return 返回影响行数\n   * @throws SQLException\n   */\n  int update(Statement statement)\n      throws SQLException;\n\n  /**\n   * 执行查询操作，将结果交给ResultHandler进行结果的组装\n   *\n   * @param statement\n   * @param resultHandler\n   * @param <E>\n   * @return 返回查询的数据列表\n   * @throws SQLException\n   */\n  <E> List<E> query(Statement statement, ResultHandler resultHandler)\n      throws SQLException;\n\n  /**\n   * 得到绑定的sql\n   * \n   * @return\n   */\n  BoundSql getBoundSql();\n\n  /**\n   * 得到参数处理器\n   * \n   * @return\n   */\n  ParameterHandler getParameterHandler();\n\n}\n```\n\n#### args－拦截的参数\n\nargs是一个Class类型的数组，表示的是被拦截方法的参数列表。由于我们已经确定了拦截的是StatementHandler的prepare方法，而该方法只有一个参数Connection，所以我们只需要拦截这一个参数即可。\n\n### 实现拦截方法\n\n定义一个封装分页参数的类Page\n\n```\npublic class Page {\n\n    /**\n     * 当前页码\n     */\n    private Integer pageIndex;\n    /**\n     * 每页数据条数\n     */\n    private Integer pageSize;\n    /**\n     * 总数据数\n     */\n    private Integer total;\n    /**\n     * 总页数\n     */\n    private Integer totalPage;\n\n    public Page() {\n    }\n\n    public Page(Integer pageIndex, Integer pageSize) {\n        this.pageIndex = pageIndex;\n        this.pageSize = pageSize;\n    }\n\t// 省略get、set方法...\n}\n```\n\n实现插件分页的功能\n\n```\nimport org.apache.ibatis.executor.parameter.ParameterHandler;\nimport org.apache.ibatis.executor.statement.StatementHandler;\nimport org.apache.ibatis.mapping.BoundSql;\nimport org.apache.ibatis.mapping.MappedStatement;\nimport org.apache.ibatis.plugin.*;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.apache.ibatis.reflection.SystemMetaObject;\nimport org.apache.ibatis.scripting.defaults.DefaultParameterHandler;\nimport org.apache.ibatis.session.Configuration;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\n\n@Intercepts({@Signature(\n        type = StatementHandler.class,\n        method = \"prepare\",\n        args = {Connection.class}\n)})\npublic class PagingPlugin implements Interceptor {\n\n    /**\n     * 默认页码\n     */\n    private Integer defaultPageIndex;\n    /**\n     * 默认每页数据条数\n     */\n    private Integer defaultPageSize;\n\n    public Object intercept(Invocation invocation) throws Throwable {\n        StatementHandler statementHandler = getUnProxyObject(invocation);\n        MetaObject metaObject = SystemMetaObject.forObject(statementHandler);\n        String sql = getSql(metaObject);\n        if (!checkSelect(sql)) {\n            // 不是select语句，进入责任链下一层\n            return invocation.proceed();\n        }\n\n        BoundSql boundSql = (BoundSql) metaObject.getValue(\"delegate.boundSql\");\n        Object parameterObject = boundSql.getParameterObject();\n        Page page = getPage(parameterObject);\n        if (page == null) {\n            // 没有传入page对象，不执行分页处理，进入责任链下一层\n            return invocation.proceed();\n        }\n\n        // 设置分页默认值\n        if (page.getPageIndex() == null) {\n            page.setPageIndex(this.defaultPageIndex);\n        }\n        if (page.getPageSize() == null) {\n            page.setPageSize(this.defaultPageSize);\n        }\n        // 设置分页总数，数据总数\n        setTotalToPage(page, invocation, metaObject, boundSql);\n        // 校验分页参数\n        checkPage(page);\n        return changeSql(invocation, metaObject, boundSql, page);\n    }\n\n    public Object plugin(Object target) {\n        // 生成代理对象\n        return Plugin.wrap(target, this);\n    }\n\n    public void setProperties(Properties properties) {\n        // 初始化配置的默认页码，无配置则默认1\n        this.defaultPageIndex = Integer.parseInt(properties.getProperty(\"default.pageIndex\", \"1\"));\n        // 初始化配置的默认数据条数，无配置则默认20\n        this.defaultPageSize = Integer.parseInt(properties.getProperty(\"default.pageSize\", \"20\"));\n    }\n\n    /**\n     * 从代理对象中分离出真实对象\n     *\n     * @param invocation\n     * @return\n     */\n    private StatementHandler getUnProxyObject(Invocation invocation) {\n        // 取出被拦截的对象\n        StatementHandler statementHandler = (StatementHandler) invocation.getTarget();\n        MetaObject metaStmtHandler = SystemMetaObject.forObject(statementHandler);\n        Object object = null;\n        // 分离代理对象\n        while (metaStmtHandler.hasGetter(\"h\")) {\n            object = metaStmtHandler.getValue(\"h\");\n            metaStmtHandler = SystemMetaObject.forObject(object);\n        }\n\n        return object == null ? statementHandler : (StatementHandler) object;\n    }\n\n    /**\n     * 判断是否是select语句\n     *\n     * @param sql\n     * @return\n     */\n    private boolean checkSelect(String sql) {\n        // 去除sql的前后空格，并将sql转换成小写\n        sql = sql.trim().toLowerCase();\n        return sql.indexOf(\"select\") == 0;\n    }\n\n    /**\n     * 获取分页参数\n     *\n     * @param parameterObject\n     * @return\n     */\n    private Page getPage(Object parameterObject) {\n        if (parameterObject == null) {\n            return null;\n        }\n\n        if (parameterObject instanceof Map) {\n            // 如果传入的参数是map类型的，则遍历map取出Page对象\n            Map<String, Object> parameMap = (Map<String, Object>) parameterObject;\n            Set<String> keySet = parameMap.keySet();\n            for (String key : keySet) {\n                Object value = parameMap.get(key);\n                if (value instanceof Page) {\n                    // 返回Page对象\n                    return (Page) value;\n                }\n            }\n        } else if (parameterObject instanceof Page) {\n            // 如果传入的是Page类型，则直接返回该对象\n            return (Page) parameterObject;\n        }\n\n        // 初步判断并没有传入Page类型的参数，返回null\n        return null;\n    }\n\n    /**\n     * 获取数据总数\n     *\n     * @param invocation\n     * @param metaObject\n     * @param boundSql\n     * @return\n     */\n    private int getTotal(Invocation invocation, MetaObject metaObject, BoundSql boundSql) {\n        // 获取当前的mappedStatement对象\n        MappedStatement mappedStatement = (MappedStatement) metaObject.getValue(\"delegate.mappedStatement\");\n        // 获取配置对象\n        Configuration configuration = mappedStatement.getConfiguration();\n        // 获取当前需要执行的sql\n        String sql = getSql(metaObject);\n        // 改写sql语句，实现返回数据总数 $_paging取名是为了防止数据库表重名\n        String countSql = \"select count(*) as total from (\" + sql + \") $_paging\";\n        // 获取拦截方法参数，拦截的是connection对象\n        Connection connection = (Connection) invocation.getArgs()[0];\n        PreparedStatement pstmt = null;\n        int total = 0;\n\n        try {\n            // 预编译查询数据总数的sql语句\n            pstmt = connection.prepareStatement(countSql);\n            // 构建boundSql对象\n            BoundSql countBoundSql = new BoundSql(configuration, countSql, boundSql.getParameterMappings(),\n                    boundSql.getParameterObject());\n            // 构建parameterHandler用于设置sql参数\n            ParameterHandler parameterHandler = new DefaultParameterHandler(mappedStatement, boundSql.getParameterObject(),\n                    countBoundSql);\n            // 设置sql参数\n            parameterHandler.setParameters(pstmt);\n            //执行查询\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                total = rs.getInt(\"total\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (pstmt != null) {\n                try {\n                    pstmt.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        // 返回总数据数\n        return total;\n    }\n\n    /**\n     * 设置总数据数、总页数\n     *\n     * @param page\n     * @param invocation\n     * @param metaObject\n     * @param boundSql\n     */\n    private void setTotalToPage(Page page, Invocation invocation, MetaObject metaObject, BoundSql boundSql) {\n        // 总数据数\n        int total = getTotal(invocation, metaObject, boundSql);\n        // 计算总页数\n        int totalPage = total / page.getPageSize();\n        if (total % page.getPageSize() != 0) {\n            totalPage = totalPage + 1;\n        }\n\n        page.setTotal(total);\n        page.setTotalPage(totalPage);\n    }\n\n    /**\n     * 校验分页参数\n     *\n     * @param page\n     */\n    private void checkPage(Page page) {\n        // 如果当前页码大于总页数，抛出异常\n        if (page.getPageIndex() > page.getTotalPage()) {\n            throw new RuntimeException(\"当前页码［\" + page.getPageIndex() + \"］大于总页数［\" + page.getTotalPage() + \"］\");\n        }\n        // 如果当前页码小于总页数，抛出异常\n        if (page.getPageIndex() < 1) {\n            throw new RuntimeException(\"当前页码［\" + page.getPageIndex() + \"］小于［1］\");\n        }\n    }\n\n    /**\n     * 修改当前查询的sql\n     *\n     * @param invocation\n     * @param metaObject\n     * @param boundSql\n     * @param page\n     * @return\n     */\n    private Object changeSql(Invocation invocation, MetaObject metaObject, BoundSql boundSql, Page page) throws Exception {\n        // 获取当前查询的sql\n        String sql = getSql(metaObject);\n        // 修改sql，$_paging_table_limit取名是为了防止数据库表重名\n        String newSql = \"select * from (\" + sql + \") $_paging_table_limit limit ?, ?\";\n        // 设置当前sql为修改后的sql\n        setSql(metaObject, newSql);\n\n        // 获取PreparedStatement对象\n        PreparedStatement pstmt = (PreparedStatement) invocation.proceed();\n        // 获取sql的总参数个数\n        int parameCount = pstmt.getParameterMetaData().getParameterCount();\n        // 设置分页参数\n        pstmt.setInt(parameCount - 1, (page.getPageIndex() - 1) * page.getPageSize());\n        pstmt.setInt(parameCount, page.getPageSize());\n\n        return pstmt;\n    }\n\n    /**\n     * 获取当前查询的sql\n     *\n     * @param metaObject\n     * @return\n     */\n    private String getSql(MetaObject metaObject) {\n        return (String) metaObject.getValue(\"delegate.boundSql.sql\");\n    }\n\n    /**\n     * 设置当前查询的sql\n     *\n     * @param metaObject\n     */\n    private void setSql(MetaObject metaObject, String sql) {\n        metaObject.setValue(\"delegate.boundSql.sql\", sql);\n    }\n}\n```\n\n### 配置分页插件\n\n在mybatis-config.xml配置文件中配置自定义的分页插件\n\n```\n<plugins>\n\t<plugin interceptor=\"PagingPlugin\">\n\t\t<property name=\"default.pageIndex\" value=\"1\"/>\n\t\t<property name=\"default.pageSize\" value=\"20\"/>\n\t</plugin>\n</plugins>\n```\n\n### 实现DAO\n\n```\npublic class Role {\n\n   private Long id;\n   private String roleName;\n   private String note;\n   // 省略get、set...\n}\n```\n\n定义Mapper接口，通过分页对象查询角色列表\n\n```\npublic interface RoleMapper {\n    List<Role> listRoleByPage(Page page);\n}\n```\n\n定义Mapper.xml编写查询的SQL语句\n\n```\n<mapper namespace=\"RoleMapper\">\n    <select id=\"listRoleByPage\" resultType=\"Role\">\n        SELECT id, role_name, note FROM role\n    </select>\n</mapper>\n```\n\n### 测试分页插件\n\n测试代码\n\n```\n@Test\npublic void test() {\n\tInputStream inputStream = null;\n\tSqlSessionFactory sqlSessionFactory;\n\tSqlSession sqlSession = null;\n\ttry {\n\t\tinputStream = Resources.getResourceAsStream(\"mybatis-config.xml\");\n\t\tsqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\t\tsqlSession = sqlSessionFactory.openSession();\n\t\tRoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);\n\t\t// 分页参数，从第一页开始，每页显示5条数据\n\t\tPage page = new Page(1, 5);\n\t\tList<Role> roleList = roleMapper.listRoleByPage(page);\n\t\tSystem.out.println(\"===分页信息===\");\n\t\tSystem.out.println(\"当前页码：\" + page.getPageIndex());\n\t\tSystem.out.println(\"每页显示数据数：\" + page.getPageSize());\n\t\tSystem.out.println(\"总数据数：\" + page.getTotal());\n\t\tSystem.out.println(\"总页数：\" + page.getTotalPage());\n\t\tSystem.out.println(\"=============\");\n\t\tSystem.out.println(\"===数据列表===\");\n\t\tfor (Role role : roleList) {\n\t\t\tSystem.out.println(role);\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (sqlSession != null) {\n\t\t\tsqlSession.close();\n\t\t}\n\t\tif (inputStream != null) {\n\t\t\ttry {\n\t\t\t\tinputStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n数据库role表中的全部数据信息\n\n| id   | role_name   | note       |\n| ---- | ----------- | ---------- |\n| 1    | SUPER_ADMIN | 超级管理员 |\n| 2    | admin       | 管理员     |\n| 3    | user        | 用户       |\n| 4    | user2       | 用户2      |\n| 8    | user3       | 用户3      |\n| 9    | test        | 测试       |\n| 10   | test2       | 测试2      |\n| 11   | test3       | 测试3      |\n| 12   | test4       | 测试4      |\n| 13   | test5       | 测试5      |\n\n代码执行结果\n\n```\n===分页信息===\n当前页码：1\n每页显示数据数：5\n总数据数：10\n总页数：2\n=============\n===数据列表===\nRole{id=1, roleName='SUPER_ADMIN', note=' 超级管理员'}\nRole{id=2, roleName='admin', note='管理员'}\nRole{id=3, roleName='user', note='用户'}\nRole{id=4, roleName='user2', note='用户2'}\nRole{id=8, roleName='user3', note='用户3'}\n```\n\n打印的SQL信息\n\n```\n==>  Preparing: select count(*) as total from (SELECT id, role_name, note FROM role) $_paging \n==> Parameters: \n<==    Columns: total\n<==        Row: 10\n<==      Total: 1\n==>  Preparing: select * from (SELECT id, role_name, note FROM role) $_paging_table_limit limit ?, ? \n==> Parameters: 0(Integer), 5(Integer)\n<==    Columns: id, role_name, note\n<==        Row: 1, SUPER_ADMIN,  超级管理员\n<==        Row: 2, admin, 管理员\n<==        Row: 3, user, 用户\n<==        Row: 4, user2, 用户2\n<==        Row: 8, user3, 用户3\n<==      Total: 5\n```","source":"_posts/MyBatis-Plugin-Development.md","raw":"---\ntitle: MyBatis-Plugin-Development\ndate: 2022-03-10 14:59:54\ntags: MyBatis\n---\n\n\n\n## MyBatis插件开发流程\n\n- 类实现Interceptor接口；\n\n- 类上添加注解\n\n  ```\n  @Intercepts({@Signature(type, method, args)})\n  ```\n\n  - **type**：需要拦截的对象，只可取四大对象之一Executor.class、StatementHandler.class、ParameterHandler.class、ResultSetHandler.class。\n  - **method**：拦截的对象方法。\n  - **args**：拦截的对象方法参数。\n\n- 实现拦截的方法Object intercept(Invocation invocation)。\n\n##  Interceptor接口\n\n```\npublic interface Interceptor {\n\n    /**\n     * 此方法将直接覆盖被拦截对象的原有方法\n     *\n     * @param invocation 通过该对象可以反射调度拦截对象的方法\n     * @return\n     * @throws Throwable\n     */\n    Object intercept(Invocation invocation) throws Throwable;\n\n    /**\n     * 为被拦截对象生成一个代理对象，并返回它\n     *\n     * @param target 被拦截的对象\n     * @return\n     */\n    Object plugin(Object target);\n\n    /**\n     * 设置插件配置的参数\n     *\n     * @param properties 插件配置的参数\n     */\n    void setProperties(Properties properties);\n\n}\n```\n\n## 步骤\n\n### 确定拦截的方法签名\n\n需要在实现Interceptor接口的类上加入@Intercepts({@Signature(type, method, args)})注解才能够运行插件。\n\n#### type－拦截的对象\n\n- Executor 执行的SQL 全过程，包括组装参数、组装结果返回和执行SQL的过程等都可以拦截。\n- StatementHandler 执行SQL的过程，拦截该对象可以重写执行SQL的过程。\n- ParameterHandler 执行SQL 的参数组装，拦截该对象可以重写组装参数的规则。\n- ResultSetHandler 执行结果的组装，拦截该对象可以重写组装结果的规则。\n\n对于分页插件，我们只需要拦截StatementHandler对象，重写SELECT类型的SQL语句，实现分页功能。\n\n\n\n#### method－拦截的方法\n\n我们已经能够确定拦截的对象是StatementHandler了，现在我们要确定拦截的是哪个方法，因为StatementHandler是通过prepare方法对SQL进行预编译的，所以我们需要对prepare方法进行拦截，在这个方法执行之前，完成SQL的重新编写，加入limit。\n\n**StatementHandler**\n\n```\npublic interface StatementHandler {\n\n  /**\n   * 预编译SQL\n   *\n   * @param connection\n   * @return\n   * @throws SQLException\n   */\n  Statement prepare(Connection connection)\n      throws SQLException;\n\n  /**\n   * 设置参数\n   *\n   * @param statement\n   * @throws SQLException\n   */\n  void parameterize(Statement statement)\n      throws SQLException;\n\n  /**\n   * 批处理\n   *\n   * @param statement\n   * @throws SQLException\n   */\n  void batch(Statement statement)\n      throws SQLException;\n\n  /**\n   * 执行更新操作\n   *\n   * @param statement\n   * @return 返回影响行数\n   * @throws SQLException\n   */\n  int update(Statement statement)\n      throws SQLException;\n\n  /**\n   * 执行查询操作，将结果交给ResultHandler进行结果的组装\n   *\n   * @param statement\n   * @param resultHandler\n   * @param <E>\n   * @return 返回查询的数据列表\n   * @throws SQLException\n   */\n  <E> List<E> query(Statement statement, ResultHandler resultHandler)\n      throws SQLException;\n\n  /**\n   * 得到绑定的sql\n   * \n   * @return\n   */\n  BoundSql getBoundSql();\n\n  /**\n   * 得到参数处理器\n   * \n   * @return\n   */\n  ParameterHandler getParameterHandler();\n\n}\n```\n\n#### args－拦截的参数\n\nargs是一个Class类型的数组，表示的是被拦截方法的参数列表。由于我们已经确定了拦截的是StatementHandler的prepare方法，而该方法只有一个参数Connection，所以我们只需要拦截这一个参数即可。\n\n### 实现拦截方法\n\n定义一个封装分页参数的类Page\n\n```\npublic class Page {\n\n    /**\n     * 当前页码\n     */\n    private Integer pageIndex;\n    /**\n     * 每页数据条数\n     */\n    private Integer pageSize;\n    /**\n     * 总数据数\n     */\n    private Integer total;\n    /**\n     * 总页数\n     */\n    private Integer totalPage;\n\n    public Page() {\n    }\n\n    public Page(Integer pageIndex, Integer pageSize) {\n        this.pageIndex = pageIndex;\n        this.pageSize = pageSize;\n    }\n\t// 省略get、set方法...\n}\n```\n\n实现插件分页的功能\n\n```\nimport org.apache.ibatis.executor.parameter.ParameterHandler;\nimport org.apache.ibatis.executor.statement.StatementHandler;\nimport org.apache.ibatis.mapping.BoundSql;\nimport org.apache.ibatis.mapping.MappedStatement;\nimport org.apache.ibatis.plugin.*;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.apache.ibatis.reflection.SystemMetaObject;\nimport org.apache.ibatis.scripting.defaults.DefaultParameterHandler;\nimport org.apache.ibatis.session.Configuration;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\n\n@Intercepts({@Signature(\n        type = StatementHandler.class,\n        method = \"prepare\",\n        args = {Connection.class}\n)})\npublic class PagingPlugin implements Interceptor {\n\n    /**\n     * 默认页码\n     */\n    private Integer defaultPageIndex;\n    /**\n     * 默认每页数据条数\n     */\n    private Integer defaultPageSize;\n\n    public Object intercept(Invocation invocation) throws Throwable {\n        StatementHandler statementHandler = getUnProxyObject(invocation);\n        MetaObject metaObject = SystemMetaObject.forObject(statementHandler);\n        String sql = getSql(metaObject);\n        if (!checkSelect(sql)) {\n            // 不是select语句，进入责任链下一层\n            return invocation.proceed();\n        }\n\n        BoundSql boundSql = (BoundSql) metaObject.getValue(\"delegate.boundSql\");\n        Object parameterObject = boundSql.getParameterObject();\n        Page page = getPage(parameterObject);\n        if (page == null) {\n            // 没有传入page对象，不执行分页处理，进入责任链下一层\n            return invocation.proceed();\n        }\n\n        // 设置分页默认值\n        if (page.getPageIndex() == null) {\n            page.setPageIndex(this.defaultPageIndex);\n        }\n        if (page.getPageSize() == null) {\n            page.setPageSize(this.defaultPageSize);\n        }\n        // 设置分页总数，数据总数\n        setTotalToPage(page, invocation, metaObject, boundSql);\n        // 校验分页参数\n        checkPage(page);\n        return changeSql(invocation, metaObject, boundSql, page);\n    }\n\n    public Object plugin(Object target) {\n        // 生成代理对象\n        return Plugin.wrap(target, this);\n    }\n\n    public void setProperties(Properties properties) {\n        // 初始化配置的默认页码，无配置则默认1\n        this.defaultPageIndex = Integer.parseInt(properties.getProperty(\"default.pageIndex\", \"1\"));\n        // 初始化配置的默认数据条数，无配置则默认20\n        this.defaultPageSize = Integer.parseInt(properties.getProperty(\"default.pageSize\", \"20\"));\n    }\n\n    /**\n     * 从代理对象中分离出真实对象\n     *\n     * @param invocation\n     * @return\n     */\n    private StatementHandler getUnProxyObject(Invocation invocation) {\n        // 取出被拦截的对象\n        StatementHandler statementHandler = (StatementHandler) invocation.getTarget();\n        MetaObject metaStmtHandler = SystemMetaObject.forObject(statementHandler);\n        Object object = null;\n        // 分离代理对象\n        while (metaStmtHandler.hasGetter(\"h\")) {\n            object = metaStmtHandler.getValue(\"h\");\n            metaStmtHandler = SystemMetaObject.forObject(object);\n        }\n\n        return object == null ? statementHandler : (StatementHandler) object;\n    }\n\n    /**\n     * 判断是否是select语句\n     *\n     * @param sql\n     * @return\n     */\n    private boolean checkSelect(String sql) {\n        // 去除sql的前后空格，并将sql转换成小写\n        sql = sql.trim().toLowerCase();\n        return sql.indexOf(\"select\") == 0;\n    }\n\n    /**\n     * 获取分页参数\n     *\n     * @param parameterObject\n     * @return\n     */\n    private Page getPage(Object parameterObject) {\n        if (parameterObject == null) {\n            return null;\n        }\n\n        if (parameterObject instanceof Map) {\n            // 如果传入的参数是map类型的，则遍历map取出Page对象\n            Map<String, Object> parameMap = (Map<String, Object>) parameterObject;\n            Set<String> keySet = parameMap.keySet();\n            for (String key : keySet) {\n                Object value = parameMap.get(key);\n                if (value instanceof Page) {\n                    // 返回Page对象\n                    return (Page) value;\n                }\n            }\n        } else if (parameterObject instanceof Page) {\n            // 如果传入的是Page类型，则直接返回该对象\n            return (Page) parameterObject;\n        }\n\n        // 初步判断并没有传入Page类型的参数，返回null\n        return null;\n    }\n\n    /**\n     * 获取数据总数\n     *\n     * @param invocation\n     * @param metaObject\n     * @param boundSql\n     * @return\n     */\n    private int getTotal(Invocation invocation, MetaObject metaObject, BoundSql boundSql) {\n        // 获取当前的mappedStatement对象\n        MappedStatement mappedStatement = (MappedStatement) metaObject.getValue(\"delegate.mappedStatement\");\n        // 获取配置对象\n        Configuration configuration = mappedStatement.getConfiguration();\n        // 获取当前需要执行的sql\n        String sql = getSql(metaObject);\n        // 改写sql语句，实现返回数据总数 $_paging取名是为了防止数据库表重名\n        String countSql = \"select count(*) as total from (\" + sql + \") $_paging\";\n        // 获取拦截方法参数，拦截的是connection对象\n        Connection connection = (Connection) invocation.getArgs()[0];\n        PreparedStatement pstmt = null;\n        int total = 0;\n\n        try {\n            // 预编译查询数据总数的sql语句\n            pstmt = connection.prepareStatement(countSql);\n            // 构建boundSql对象\n            BoundSql countBoundSql = new BoundSql(configuration, countSql, boundSql.getParameterMappings(),\n                    boundSql.getParameterObject());\n            // 构建parameterHandler用于设置sql参数\n            ParameterHandler parameterHandler = new DefaultParameterHandler(mappedStatement, boundSql.getParameterObject(),\n                    countBoundSql);\n            // 设置sql参数\n            parameterHandler.setParameters(pstmt);\n            //执行查询\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                total = rs.getInt(\"total\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (pstmt != null) {\n                try {\n                    pstmt.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        // 返回总数据数\n        return total;\n    }\n\n    /**\n     * 设置总数据数、总页数\n     *\n     * @param page\n     * @param invocation\n     * @param metaObject\n     * @param boundSql\n     */\n    private void setTotalToPage(Page page, Invocation invocation, MetaObject metaObject, BoundSql boundSql) {\n        // 总数据数\n        int total = getTotal(invocation, metaObject, boundSql);\n        // 计算总页数\n        int totalPage = total / page.getPageSize();\n        if (total % page.getPageSize() != 0) {\n            totalPage = totalPage + 1;\n        }\n\n        page.setTotal(total);\n        page.setTotalPage(totalPage);\n    }\n\n    /**\n     * 校验分页参数\n     *\n     * @param page\n     */\n    private void checkPage(Page page) {\n        // 如果当前页码大于总页数，抛出异常\n        if (page.getPageIndex() > page.getTotalPage()) {\n            throw new RuntimeException(\"当前页码［\" + page.getPageIndex() + \"］大于总页数［\" + page.getTotalPage() + \"］\");\n        }\n        // 如果当前页码小于总页数，抛出异常\n        if (page.getPageIndex() < 1) {\n            throw new RuntimeException(\"当前页码［\" + page.getPageIndex() + \"］小于［1］\");\n        }\n    }\n\n    /**\n     * 修改当前查询的sql\n     *\n     * @param invocation\n     * @param metaObject\n     * @param boundSql\n     * @param page\n     * @return\n     */\n    private Object changeSql(Invocation invocation, MetaObject metaObject, BoundSql boundSql, Page page) throws Exception {\n        // 获取当前查询的sql\n        String sql = getSql(metaObject);\n        // 修改sql，$_paging_table_limit取名是为了防止数据库表重名\n        String newSql = \"select * from (\" + sql + \") $_paging_table_limit limit ?, ?\";\n        // 设置当前sql为修改后的sql\n        setSql(metaObject, newSql);\n\n        // 获取PreparedStatement对象\n        PreparedStatement pstmt = (PreparedStatement) invocation.proceed();\n        // 获取sql的总参数个数\n        int parameCount = pstmt.getParameterMetaData().getParameterCount();\n        // 设置分页参数\n        pstmt.setInt(parameCount - 1, (page.getPageIndex() - 1) * page.getPageSize());\n        pstmt.setInt(parameCount, page.getPageSize());\n\n        return pstmt;\n    }\n\n    /**\n     * 获取当前查询的sql\n     *\n     * @param metaObject\n     * @return\n     */\n    private String getSql(MetaObject metaObject) {\n        return (String) metaObject.getValue(\"delegate.boundSql.sql\");\n    }\n\n    /**\n     * 设置当前查询的sql\n     *\n     * @param metaObject\n     */\n    private void setSql(MetaObject metaObject, String sql) {\n        metaObject.setValue(\"delegate.boundSql.sql\", sql);\n    }\n}\n```\n\n### 配置分页插件\n\n在mybatis-config.xml配置文件中配置自定义的分页插件\n\n```\n<plugins>\n\t<plugin interceptor=\"PagingPlugin\">\n\t\t<property name=\"default.pageIndex\" value=\"1\"/>\n\t\t<property name=\"default.pageSize\" value=\"20\"/>\n\t</plugin>\n</plugins>\n```\n\n### 实现DAO\n\n```\npublic class Role {\n\n   private Long id;\n   private String roleName;\n   private String note;\n   // 省略get、set...\n}\n```\n\n定义Mapper接口，通过分页对象查询角色列表\n\n```\npublic interface RoleMapper {\n    List<Role> listRoleByPage(Page page);\n}\n```\n\n定义Mapper.xml编写查询的SQL语句\n\n```\n<mapper namespace=\"RoleMapper\">\n    <select id=\"listRoleByPage\" resultType=\"Role\">\n        SELECT id, role_name, note FROM role\n    </select>\n</mapper>\n```\n\n### 测试分页插件\n\n测试代码\n\n```\n@Test\npublic void test() {\n\tInputStream inputStream = null;\n\tSqlSessionFactory sqlSessionFactory;\n\tSqlSession sqlSession = null;\n\ttry {\n\t\tinputStream = Resources.getResourceAsStream(\"mybatis-config.xml\");\n\t\tsqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\t\tsqlSession = sqlSessionFactory.openSession();\n\t\tRoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);\n\t\t// 分页参数，从第一页开始，每页显示5条数据\n\t\tPage page = new Page(1, 5);\n\t\tList<Role> roleList = roleMapper.listRoleByPage(page);\n\t\tSystem.out.println(\"===分页信息===\");\n\t\tSystem.out.println(\"当前页码：\" + page.getPageIndex());\n\t\tSystem.out.println(\"每页显示数据数：\" + page.getPageSize());\n\t\tSystem.out.println(\"总数据数：\" + page.getTotal());\n\t\tSystem.out.println(\"总页数：\" + page.getTotalPage());\n\t\tSystem.out.println(\"=============\");\n\t\tSystem.out.println(\"===数据列表===\");\n\t\tfor (Role role : roleList) {\n\t\t\tSystem.out.println(role);\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (sqlSession != null) {\n\t\t\tsqlSession.close();\n\t\t}\n\t\tif (inputStream != null) {\n\t\t\ttry {\n\t\t\t\tinputStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n数据库role表中的全部数据信息\n\n| id   | role_name   | note       |\n| ---- | ----------- | ---------- |\n| 1    | SUPER_ADMIN | 超级管理员 |\n| 2    | admin       | 管理员     |\n| 3    | user        | 用户       |\n| 4    | user2       | 用户2      |\n| 8    | user3       | 用户3      |\n| 9    | test        | 测试       |\n| 10   | test2       | 测试2      |\n| 11   | test3       | 测试3      |\n| 12   | test4       | 测试4      |\n| 13   | test5       | 测试5      |\n\n代码执行结果\n\n```\n===分页信息===\n当前页码：1\n每页显示数据数：5\n总数据数：10\n总页数：2\n=============\n===数据列表===\nRole{id=1, roleName='SUPER_ADMIN', note=' 超级管理员'}\nRole{id=2, roleName='admin', note='管理员'}\nRole{id=3, roleName='user', note='用户'}\nRole{id=4, roleName='user2', note='用户2'}\nRole{id=8, roleName='user3', note='用户3'}\n```\n\n打印的SQL信息\n\n```\n==>  Preparing: select count(*) as total from (SELECT id, role_name, note FROM role) $_paging \n==> Parameters: \n<==    Columns: total\n<==        Row: 10\n<==      Total: 1\n==>  Preparing: select * from (SELECT id, role_name, note FROM role) $_paging_table_limit limit ?, ? \n==> Parameters: 0(Integer), 5(Integer)\n<==    Columns: id, role_name, note\n<==        Row: 1, SUPER_ADMIN,  超级管理员\n<==        Row: 2, admin, 管理员\n<==        Row: 3, user, 用户\n<==        Row: 4, user2, 用户2\n<==        Row: 8, user3, 用户3\n<==      Total: 5\n```","slug":"MyBatis-Plugin-Development","published":1,"updated":"2022-03-10T07:28:41.020Z","_id":"cl0kn6lj30000ioln4vn5d6ga","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"MyBatis插件开发流程\"><a href=\"#MyBatis插件开发流程\" class=\"headerlink\" title=\"MyBatis插件开发流程\"></a>MyBatis插件开发流程</h2><ul>\n<li><p>类实现Interceptor接口；</p>\n</li>\n<li><p>类上添加注解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Intercepts(&#123;@Signature(type, method, args)&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>type</strong>：需要拦截的对象，只可取四大对象之一Executor.class、StatementHandler.class、ParameterHandler.class、ResultSetHandler.class。</li>\n<li><strong>method</strong>：拦截的对象方法。</li>\n<li><strong>args</strong>：拦截的对象方法参数。</li>\n</ul>\n</li>\n<li><p>实现拦截的方法Object intercept(Invocation invocation)。</p>\n</li>\n</ul>\n<h2 id=\"Interceptor接口\"><a href=\"#Interceptor接口\" class=\"headerlink\" title=\"Interceptor接口\"></a>Interceptor接口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 此方法将直接覆盖被拦截对象的原有方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param invocation 通过该对象可以反射调度拦截对象的方法</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @throws Throwable</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Object intercept(Invocation invocation) throws Throwable;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 为被拦截对象生成一个代理对象，并返回它</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param target 被拦截的对象</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Object plugin(Object target);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置插件配置的参数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param properties 插件配置的参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void setProperties(Properties properties);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"确定拦截的方法签名\"><a href=\"#确定拦截的方法签名\" class=\"headerlink\" title=\"确定拦截的方法签名\"></a>确定拦截的方法签名</h3><p>需要在实现Interceptor接口的类上加入@Intercepts({@Signature(type, method, args)})注解才能够运行插件。</p>\n<h4 id=\"type－拦截的对象\"><a href=\"#type－拦截的对象\" class=\"headerlink\" title=\"type－拦截的对象\"></a>type－拦截的对象</h4><ul>\n<li>Executor 执行的SQL 全过程，包括组装参数、组装结果返回和执行SQL的过程等都可以拦截。</li>\n<li>StatementHandler 执行SQL的过程，拦截该对象可以重写执行SQL的过程。</li>\n<li>ParameterHandler 执行SQL 的参数组装，拦截该对象可以重写组装参数的规则。</li>\n<li>ResultSetHandler 执行结果的组装，拦截该对象可以重写组装结果的规则。</li>\n</ul>\n<p>对于分页插件，我们只需要拦截StatementHandler对象，重写SELECT类型的SQL语句，实现分页功能。</p>\n<h4 id=\"method－拦截的方法\"><a href=\"#method－拦截的方法\" class=\"headerlink\" title=\"method－拦截的方法\"></a>method－拦截的方法</h4><p>我们已经能够确定拦截的对象是StatementHandler了，现在我们要确定拦截的是哪个方法，因为StatementHandler是通过prepare方法对SQL进行预编译的，所以我们需要对prepare方法进行拦截，在这个方法执行之前，完成SQL的重新编写，加入limit。</p>\n<p><strong>StatementHandler</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface StatementHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 预编译SQL</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param connection</span><br><span class=\"line\">   * @return</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  Statement prepare(Connection connection)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 设置参数</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statement</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  void parameterize(Statement statement)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 批处理</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statement</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  void batch(Statement statement)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 执行更新操作</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statement</span><br><span class=\"line\">   * @return 返回影响行数</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  int update(Statement statement)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 执行查询操作，将结果交给ResultHandler进行结果的组装</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statement</span><br><span class=\"line\">   * @param resultHandler</span><br><span class=\"line\">   * @param &lt;E&gt;</span><br><span class=\"line\">   * @return 返回查询的数据列表</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  &lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 得到绑定的sql</span><br><span class=\"line\">   * </span><br><span class=\"line\">   * @return</span><br><span class=\"line\">   */</span><br><span class=\"line\">  BoundSql getBoundSql();</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 得到参数处理器</span><br><span class=\"line\">   * </span><br><span class=\"line\">   * @return</span><br><span class=\"line\">   */</span><br><span class=\"line\">  ParameterHandler getParameterHandler();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"args－拦截的参数\"><a href=\"#args－拦截的参数\" class=\"headerlink\" title=\"args－拦截的参数\"></a>args－拦截的参数</h4><p>args是一个Class类型的数组，表示的是被拦截方法的参数列表。由于我们已经确定了拦截的是StatementHandler的prepare方法，而该方法只有一个参数Connection，所以我们只需要拦截这一个参数即可。</p>\n<h3 id=\"实现拦截方法\"><a href=\"#实现拦截方法\" class=\"headerlink\" title=\"实现拦截方法\"></a>实现拦截方法</h3><p>定义一个封装分页参数的类Page</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Page &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 当前页码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer pageIndex;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 每页数据条数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer pageSize;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 总数据数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer total;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 总页数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer totalPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Page() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Page(Integer pageIndex, Integer pageSize) &#123;</span><br><span class=\"line\">        this.pageIndex = pageIndex;</span><br><span class=\"line\">        this.pageSize = pageSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 省略get、set方法...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现插件分页的功能</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.executor.parameter.ParameterHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.mapping.BoundSql;</span><br><span class=\"line\">import org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\">import org.apache.ibatis.plugin.*;</span><br><span class=\"line\">import org.apache.ibatis.reflection.MetaObject;</span><br><span class=\"line\">import org.apache.ibatis.reflection.SystemMetaObject;</span><br><span class=\"line\">import org.apache.ibatis.scripting.defaults.DefaultParameterHandler;</span><br><span class=\"line\">import org.apache.ibatis.session.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">@Intercepts(&#123;@Signature(</span><br><span class=\"line\">        type = StatementHandler.class,</span><br><span class=\"line\">        method = &quot;prepare&quot;,</span><br><span class=\"line\">        args = &#123;Connection.class&#125;</span><br><span class=\"line\">)&#125;)</span><br><span class=\"line\">public class PagingPlugin implements Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 默认页码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer defaultPageIndex;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 默认每页数据条数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer defaultPageSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class=\"line\">        StatementHandler statementHandler = getUnProxyObject(invocation);</span><br><span class=\"line\">        MetaObject metaObject = SystemMetaObject.forObject(statementHandler);</span><br><span class=\"line\">        String sql = getSql(metaObject);</span><br><span class=\"line\">        if (!checkSelect(sql)) &#123;</span><br><span class=\"line\">            // 不是select语句，进入责任链下一层</span><br><span class=\"line\">            return invocation.proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        BoundSql boundSql = (BoundSql) metaObject.getValue(&quot;delegate.boundSql&quot;);</span><br><span class=\"line\">        Object parameterObject = boundSql.getParameterObject();</span><br><span class=\"line\">        Page page = getPage(parameterObject);</span><br><span class=\"line\">        if (page == null) &#123;</span><br><span class=\"line\">            // 没有传入page对象，不执行分页处理，进入责任链下一层</span><br><span class=\"line\">            return invocation.proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 设置分页默认值</span><br><span class=\"line\">        if (page.getPageIndex() == null) &#123;</span><br><span class=\"line\">            page.setPageIndex(this.defaultPageIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (page.getPageSize() == null) &#123;</span><br><span class=\"line\">            page.setPageSize(this.defaultPageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 设置分页总数，数据总数</span><br><span class=\"line\">        setTotalToPage(page, invocation, metaObject, boundSql);</span><br><span class=\"line\">        // 校验分页参数</span><br><span class=\"line\">        checkPage(page);</span><br><span class=\"line\">        return changeSql(invocation, metaObject, boundSql, page);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object plugin(Object target) &#123;</span><br><span class=\"line\">        // 生成代理对象</span><br><span class=\"line\">        return Plugin.wrap(target, this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setProperties(Properties properties) &#123;</span><br><span class=\"line\">        // 初始化配置的默认页码，无配置则默认1</span><br><span class=\"line\">        this.defaultPageIndex = Integer.parseInt(properties.getProperty(&quot;default.pageIndex&quot;, &quot;1&quot;));</span><br><span class=\"line\">        // 初始化配置的默认数据条数，无配置则默认20</span><br><span class=\"line\">        this.defaultPageSize = Integer.parseInt(properties.getProperty(&quot;default.pageSize&quot;, &quot;20&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 从代理对象中分离出真实对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param invocation</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private StatementHandler getUnProxyObject(Invocation invocation) &#123;</span><br><span class=\"line\">        // 取出被拦截的对象</span><br><span class=\"line\">        StatementHandler statementHandler = (StatementHandler) invocation.getTarget();</span><br><span class=\"line\">        MetaObject metaStmtHandler = SystemMetaObject.forObject(statementHandler);</span><br><span class=\"line\">        Object object = null;</span><br><span class=\"line\">        // 分离代理对象</span><br><span class=\"line\">        while (metaStmtHandler.hasGetter(&quot;h&quot;)) &#123;</span><br><span class=\"line\">            object = metaStmtHandler.getValue(&quot;h&quot;);</span><br><span class=\"line\">            metaStmtHandler = SystemMetaObject.forObject(object);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return object == null ? statementHandler : (StatementHandler) object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断是否是select语句</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sql</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private boolean checkSelect(String sql) &#123;</span><br><span class=\"line\">        // 去除sql的前后空格，并将sql转换成小写</span><br><span class=\"line\">        sql = sql.trim().toLowerCase();</span><br><span class=\"line\">        return sql.indexOf(&quot;select&quot;) == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取分页参数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param parameterObject</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Page getPage(Object parameterObject) &#123;</span><br><span class=\"line\">        if (parameterObject == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (parameterObject instanceof Map) &#123;</span><br><span class=\"line\">            // 如果传入的参数是map类型的，则遍历map取出Page对象</span><br><span class=\"line\">            Map&lt;String, Object&gt; parameMap = (Map&lt;String, Object&gt;) parameterObject;</span><br><span class=\"line\">            Set&lt;String&gt; keySet = parameMap.keySet();</span><br><span class=\"line\">            for (String key : keySet) &#123;</span><br><span class=\"line\">                Object value = parameMap.get(key);</span><br><span class=\"line\">                if (value instanceof Page) &#123;</span><br><span class=\"line\">                    // 返回Page对象</span><br><span class=\"line\">                    return (Page) value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else if (parameterObject instanceof Page) &#123;</span><br><span class=\"line\">            // 如果传入的是Page类型，则直接返回该对象</span><br><span class=\"line\">            return (Page) parameterObject;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 初步判断并没有传入Page类型的参数，返回null</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取数据总数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param invocation</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     * @param boundSql</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int getTotal(Invocation invocation, MetaObject metaObject, BoundSql boundSql) &#123;</span><br><span class=\"line\">        // 获取当前的mappedStatement对象</span><br><span class=\"line\">        MappedStatement mappedStatement = (MappedStatement) metaObject.getValue(&quot;delegate.mappedStatement&quot;);</span><br><span class=\"line\">        // 获取配置对象</span><br><span class=\"line\">        Configuration configuration = mappedStatement.getConfiguration();</span><br><span class=\"line\">        // 获取当前需要执行的sql</span><br><span class=\"line\">        String sql = getSql(metaObject);</span><br><span class=\"line\">        // 改写sql语句，实现返回数据总数 $_paging取名是为了防止数据库表重名</span><br><span class=\"line\">        String countSql = &quot;select count(*) as total from (&quot; + sql + &quot;) $_paging&quot;;</span><br><span class=\"line\">        // 获取拦截方法参数，拦截的是connection对象</span><br><span class=\"line\">        Connection connection = (Connection) invocation.getArgs()[0];</span><br><span class=\"line\">        PreparedStatement pstmt = null;</span><br><span class=\"line\">        int total = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            // 预编译查询数据总数的sql语句</span><br><span class=\"line\">            pstmt = connection.prepareStatement(countSql);</span><br><span class=\"line\">            // 构建boundSql对象</span><br><span class=\"line\">            BoundSql countBoundSql = new BoundSql(configuration, countSql, boundSql.getParameterMappings(),</span><br><span class=\"line\">                    boundSql.getParameterObject());</span><br><span class=\"line\">            // 构建parameterHandler用于设置sql参数</span><br><span class=\"line\">            ParameterHandler parameterHandler = new DefaultParameterHandler(mappedStatement, boundSql.getParameterObject(),</span><br><span class=\"line\">                    countBoundSql);</span><br><span class=\"line\">            // 设置sql参数</span><br><span class=\"line\">            parameterHandler.setParameters(pstmt);</span><br><span class=\"line\">            //执行查询</span><br><span class=\"line\">            ResultSet rs = pstmt.executeQuery();</span><br><span class=\"line\">            while (rs.next()) &#123;</span><br><span class=\"line\">                total = rs.getInt(&quot;total&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (pstmt != null) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    pstmt.close();</span><br><span class=\"line\">                &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 返回总数据数</span><br><span class=\"line\">        return total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置总数据数、总页数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param page</span><br><span class=\"line\">     * @param invocation</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     * @param boundSql</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void setTotalToPage(Page page, Invocation invocation, MetaObject metaObject, BoundSql boundSql) &#123;</span><br><span class=\"line\">        // 总数据数</span><br><span class=\"line\">        int total = getTotal(invocation, metaObject, boundSql);</span><br><span class=\"line\">        // 计算总页数</span><br><span class=\"line\">        int totalPage = total / page.getPageSize();</span><br><span class=\"line\">        if (total % page.getPageSize() != 0) &#123;</span><br><span class=\"line\">            totalPage = totalPage + 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        page.setTotal(total);</span><br><span class=\"line\">        page.setTotalPage(totalPage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 校验分页参数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param page</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void checkPage(Page page) &#123;</span><br><span class=\"line\">        // 如果当前页码大于总页数，抛出异常</span><br><span class=\"line\">        if (page.getPageIndex() &gt; page.getTotalPage()) &#123;</span><br><span class=\"line\">            throw new RuntimeException(&quot;当前页码［&quot; + page.getPageIndex() + &quot;］大于总页数［&quot; + page.getTotalPage() + &quot;］&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果当前页码小于总页数，抛出异常</span><br><span class=\"line\">        if (page.getPageIndex() &lt; 1) &#123;</span><br><span class=\"line\">            throw new RuntimeException(&quot;当前页码［&quot; + page.getPageIndex() + &quot;］小于［1］&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 修改当前查询的sql</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param invocation</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     * @param boundSql</span><br><span class=\"line\">     * @param page</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Object changeSql(Invocation invocation, MetaObject metaObject, BoundSql boundSql, Page page) throws Exception &#123;</span><br><span class=\"line\">        // 获取当前查询的sql</span><br><span class=\"line\">        String sql = getSql(metaObject);</span><br><span class=\"line\">        // 修改sql，$_paging_table_limit取名是为了防止数据库表重名</span><br><span class=\"line\">        String newSql = &quot;select * from (&quot; + sql + &quot;) $_paging_table_limit limit ?, ?&quot;;</span><br><span class=\"line\">        // 设置当前sql为修改后的sql</span><br><span class=\"line\">        setSql(metaObject, newSql);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 获取PreparedStatement对象</span><br><span class=\"line\">        PreparedStatement pstmt = (PreparedStatement) invocation.proceed();</span><br><span class=\"line\">        // 获取sql的总参数个数</span><br><span class=\"line\">        int parameCount = pstmt.getParameterMetaData().getParameterCount();</span><br><span class=\"line\">        // 设置分页参数</span><br><span class=\"line\">        pstmt.setInt(parameCount - 1, (page.getPageIndex() - 1) * page.getPageSize());</span><br><span class=\"line\">        pstmt.setInt(parameCount, page.getPageSize());</span><br><span class=\"line\"></span><br><span class=\"line\">        return pstmt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取当前查询的sql</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String getSql(MetaObject metaObject) &#123;</span><br><span class=\"line\">        return (String) metaObject.getValue(&quot;delegate.boundSql.sql&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置当前查询的sql</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void setSql(MetaObject metaObject, String sql) &#123;</span><br><span class=\"line\">        metaObject.setValue(&quot;delegate.boundSql.sql&quot;, sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置分页插件\"><a href=\"#配置分页插件\" class=\"headerlink\" title=\"配置分页插件\"></a>配置分页插件</h3><p>在mybatis-config.xml配置文件中配置自定义的分页插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugins&gt;</span><br><span class=\"line\">\t&lt;plugin interceptor=&quot;PagingPlugin&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;default.pageIndex&quot; value=&quot;1&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;default.pageSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">\t&lt;/plugin&gt;</span><br><span class=\"line\">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现DAO\"><a href=\"#实现DAO\" class=\"headerlink\" title=\"实现DAO\"></a>实现DAO</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Role &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   private Long id;</span><br><span class=\"line\">   private String roleName;</span><br><span class=\"line\">   private String note;</span><br><span class=\"line\">   // 省略get、set...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义Mapper接口，通过分页对象查询角色列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface RoleMapper &#123;</span><br><span class=\"line\">    List&lt;Role&gt; listRoleByPage(Page page);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义Mapper.xml编写查询的SQL语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mapper namespace=&quot;RoleMapper&quot;&gt;</span><br><span class=\"line\">    &lt;select id=&quot;listRoleByPage&quot; resultType=&quot;Role&quot;&gt;</span><br><span class=\"line\">        SELECT id, role_name, note FROM role</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试分页插件\"><a href=\"#测试分页插件\" class=\"headerlink\" title=\"测试分页插件\"></a>测试分页插件</h3><p>测试代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">\tInputStream inputStream = null;</span><br><span class=\"line\">\tSqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">\tSqlSession sqlSession = null;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tinputStream = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);</span><br><span class=\"line\">\t\tsqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">\t\tsqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\">\t\tRoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);</span><br><span class=\"line\">\t\t// 分页参数，从第一页开始，每页显示5条数据</span><br><span class=\"line\">\t\tPage page = new Page(1, 5);</span><br><span class=\"line\">\t\tList&lt;Role&gt; roleList = roleMapper.listRoleByPage(page);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;===分页信息===&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;当前页码：&quot; + page.getPageIndex());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;每页显示数据数：&quot; + page.getPageSize());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;总数据数：&quot; + page.getTotal());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;总页数：&quot; + page.getTotalPage());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=============&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;===数据列表===&quot;);</span><br><span class=\"line\">\t\tfor (Role role : roleList) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(role);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; finally &#123;</span><br><span class=\"line\">\t\tif (sqlSession != null) &#123;</span><br><span class=\"line\">\t\t\tsqlSession.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (inputStream != null) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tinputStream.close();</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据库role表中的全部数据信息</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>role_name</th>\n<th>note</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>SUPER_ADMIN</td>\n<td>超级管理员</td>\n</tr>\n<tr>\n<td>2</td>\n<td>admin</td>\n<td>管理员</td>\n</tr>\n<tr>\n<td>3</td>\n<td>user</td>\n<td>用户</td>\n</tr>\n<tr>\n<td>4</td>\n<td>user2</td>\n<td>用户2</td>\n</tr>\n<tr>\n<td>8</td>\n<td>user3</td>\n<td>用户3</td>\n</tr>\n<tr>\n<td>9</td>\n<td>test</td>\n<td>测试</td>\n</tr>\n<tr>\n<td>10</td>\n<td>test2</td>\n<td>测试2</td>\n</tr>\n<tr>\n<td>11</td>\n<td>test3</td>\n<td>测试3</td>\n</tr>\n<tr>\n<td>12</td>\n<td>test4</td>\n<td>测试4</td>\n</tr>\n<tr>\n<td>13</td>\n<td>test5</td>\n<td>测试5</td>\n</tr>\n</tbody></table>\n<p>代码执行结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===分页信息===</span><br><span class=\"line\">当前页码：1</span><br><span class=\"line\">每页显示数据数：5</span><br><span class=\"line\">总数据数：10</span><br><span class=\"line\">总页数：2</span><br><span class=\"line\">=============</span><br><span class=\"line\">===数据列表===</span><br><span class=\"line\">Role&#123;id=1, roleName=&#x27;SUPER_ADMIN&#x27;, note=&#x27; 超级管理员&#x27;&#125;</span><br><span class=\"line\">Role&#123;id=2, roleName=&#x27;admin&#x27;, note=&#x27;管理员&#x27;&#125;</span><br><span class=\"line\">Role&#123;id=3, roleName=&#x27;user&#x27;, note=&#x27;用户&#x27;&#125;</span><br><span class=\"line\">Role&#123;id=4, roleName=&#x27;user2&#x27;, note=&#x27;用户2&#x27;&#125;</span><br><span class=\"line\">Role&#123;id=8, roleName=&#x27;user3&#x27;, note=&#x27;用户3&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印的SQL信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==&gt;  Preparing: select count(*) as total from (SELECT id, role_name, note FROM role) $_paging </span><br><span class=\"line\">==&gt; Parameters: </span><br><span class=\"line\">&lt;==    Columns: total</span><br><span class=\"line\">&lt;==        Row: 10</span><br><span class=\"line\">&lt;==      Total: 1</span><br><span class=\"line\">==&gt;  Preparing: select * from (SELECT id, role_name, note FROM role) $_paging_table_limit limit ?, ? </span><br><span class=\"line\">==&gt; Parameters: 0(Integer), 5(Integer)</span><br><span class=\"line\">&lt;==    Columns: id, role_name, note</span><br><span class=\"line\">&lt;==        Row: 1, SUPER_ADMIN,  超级管理员</span><br><span class=\"line\">&lt;==        Row: 2, admin, 管理员</span><br><span class=\"line\">&lt;==        Row: 3, user, 用户</span><br><span class=\"line\">&lt;==        Row: 4, user2, 用户2</span><br><span class=\"line\">&lt;==        Row: 8, user3, 用户3</span><br><span class=\"line\">&lt;==      Total: 5</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MyBatis插件开发流程\"><a href=\"#MyBatis插件开发流程\" class=\"headerlink\" title=\"MyBatis插件开发流程\"></a>MyBatis插件开发流程</h2><ul>\n<li><p>类实现Interceptor接口；</p>\n</li>\n<li><p>类上添加注解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Intercepts(&#123;@Signature(type, method, args)&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>type</strong>：需要拦截的对象，只可取四大对象之一Executor.class、StatementHandler.class、ParameterHandler.class、ResultSetHandler.class。</li>\n<li><strong>method</strong>：拦截的对象方法。</li>\n<li><strong>args</strong>：拦截的对象方法参数。</li>\n</ul>\n</li>\n<li><p>实现拦截的方法Object intercept(Invocation invocation)。</p>\n</li>\n</ul>\n<h2 id=\"Interceptor接口\"><a href=\"#Interceptor接口\" class=\"headerlink\" title=\"Interceptor接口\"></a>Interceptor接口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 此方法将直接覆盖被拦截对象的原有方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param invocation 通过该对象可以反射调度拦截对象的方法</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @throws Throwable</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Object intercept(Invocation invocation) throws Throwable;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 为被拦截对象生成一个代理对象，并返回它</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param target 被拦截的对象</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Object plugin(Object target);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置插件配置的参数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param properties 插件配置的参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void setProperties(Properties properties);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"确定拦截的方法签名\"><a href=\"#确定拦截的方法签名\" class=\"headerlink\" title=\"确定拦截的方法签名\"></a>确定拦截的方法签名</h3><p>需要在实现Interceptor接口的类上加入@Intercepts({@Signature(type, method, args)})注解才能够运行插件。</p>\n<h4 id=\"type－拦截的对象\"><a href=\"#type－拦截的对象\" class=\"headerlink\" title=\"type－拦截的对象\"></a>type－拦截的对象</h4><ul>\n<li>Executor 执行的SQL 全过程，包括组装参数、组装结果返回和执行SQL的过程等都可以拦截。</li>\n<li>StatementHandler 执行SQL的过程，拦截该对象可以重写执行SQL的过程。</li>\n<li>ParameterHandler 执行SQL 的参数组装，拦截该对象可以重写组装参数的规则。</li>\n<li>ResultSetHandler 执行结果的组装，拦截该对象可以重写组装结果的规则。</li>\n</ul>\n<p>对于分页插件，我们只需要拦截StatementHandler对象，重写SELECT类型的SQL语句，实现分页功能。</p>\n<h4 id=\"method－拦截的方法\"><a href=\"#method－拦截的方法\" class=\"headerlink\" title=\"method－拦截的方法\"></a>method－拦截的方法</h4><p>我们已经能够确定拦截的对象是StatementHandler了，现在我们要确定拦截的是哪个方法，因为StatementHandler是通过prepare方法对SQL进行预编译的，所以我们需要对prepare方法进行拦截，在这个方法执行之前，完成SQL的重新编写，加入limit。</p>\n<p><strong>StatementHandler</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface StatementHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 预编译SQL</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param connection</span><br><span class=\"line\">   * @return</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  Statement prepare(Connection connection)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 设置参数</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statement</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  void parameterize(Statement statement)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 批处理</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statement</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  void batch(Statement statement)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 执行更新操作</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statement</span><br><span class=\"line\">   * @return 返回影响行数</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  int update(Statement statement)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 执行查询操作，将结果交给ResultHandler进行结果的组装</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statement</span><br><span class=\"line\">   * @param resultHandler</span><br><span class=\"line\">   * @param &lt;E&gt;</span><br><span class=\"line\">   * @return 返回查询的数据列表</span><br><span class=\"line\">   * @throws SQLException</span><br><span class=\"line\">   */</span><br><span class=\"line\">  &lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler)</span><br><span class=\"line\">      throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 得到绑定的sql</span><br><span class=\"line\">   * </span><br><span class=\"line\">   * @return</span><br><span class=\"line\">   */</span><br><span class=\"line\">  BoundSql getBoundSql();</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 得到参数处理器</span><br><span class=\"line\">   * </span><br><span class=\"line\">   * @return</span><br><span class=\"line\">   */</span><br><span class=\"line\">  ParameterHandler getParameterHandler();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"args－拦截的参数\"><a href=\"#args－拦截的参数\" class=\"headerlink\" title=\"args－拦截的参数\"></a>args－拦截的参数</h4><p>args是一个Class类型的数组，表示的是被拦截方法的参数列表。由于我们已经确定了拦截的是StatementHandler的prepare方法，而该方法只有一个参数Connection，所以我们只需要拦截这一个参数即可。</p>\n<h3 id=\"实现拦截方法\"><a href=\"#实现拦截方法\" class=\"headerlink\" title=\"实现拦截方法\"></a>实现拦截方法</h3><p>定义一个封装分页参数的类Page</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Page &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 当前页码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer pageIndex;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 每页数据条数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer pageSize;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 总数据数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer total;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 总页数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer totalPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Page() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Page(Integer pageIndex, Integer pageSize) &#123;</span><br><span class=\"line\">        this.pageIndex = pageIndex;</span><br><span class=\"line\">        this.pageSize = pageSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 省略get、set方法...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现插件分页的功能</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.executor.parameter.ParameterHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.mapping.BoundSql;</span><br><span class=\"line\">import org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\">import org.apache.ibatis.plugin.*;</span><br><span class=\"line\">import org.apache.ibatis.reflection.MetaObject;</span><br><span class=\"line\">import org.apache.ibatis.reflection.SystemMetaObject;</span><br><span class=\"line\">import org.apache.ibatis.scripting.defaults.DefaultParameterHandler;</span><br><span class=\"line\">import org.apache.ibatis.session.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">@Intercepts(&#123;@Signature(</span><br><span class=\"line\">        type = StatementHandler.class,</span><br><span class=\"line\">        method = &quot;prepare&quot;,</span><br><span class=\"line\">        args = &#123;Connection.class&#125;</span><br><span class=\"line\">)&#125;)</span><br><span class=\"line\">public class PagingPlugin implements Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 默认页码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer defaultPageIndex;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 默认每页数据条数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Integer defaultPageSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class=\"line\">        StatementHandler statementHandler = getUnProxyObject(invocation);</span><br><span class=\"line\">        MetaObject metaObject = SystemMetaObject.forObject(statementHandler);</span><br><span class=\"line\">        String sql = getSql(metaObject);</span><br><span class=\"line\">        if (!checkSelect(sql)) &#123;</span><br><span class=\"line\">            // 不是select语句，进入责任链下一层</span><br><span class=\"line\">            return invocation.proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        BoundSql boundSql = (BoundSql) metaObject.getValue(&quot;delegate.boundSql&quot;);</span><br><span class=\"line\">        Object parameterObject = boundSql.getParameterObject();</span><br><span class=\"line\">        Page page = getPage(parameterObject);</span><br><span class=\"line\">        if (page == null) &#123;</span><br><span class=\"line\">            // 没有传入page对象，不执行分页处理，进入责任链下一层</span><br><span class=\"line\">            return invocation.proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 设置分页默认值</span><br><span class=\"line\">        if (page.getPageIndex() == null) &#123;</span><br><span class=\"line\">            page.setPageIndex(this.defaultPageIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (page.getPageSize() == null) &#123;</span><br><span class=\"line\">            page.setPageSize(this.defaultPageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 设置分页总数，数据总数</span><br><span class=\"line\">        setTotalToPage(page, invocation, metaObject, boundSql);</span><br><span class=\"line\">        // 校验分页参数</span><br><span class=\"line\">        checkPage(page);</span><br><span class=\"line\">        return changeSql(invocation, metaObject, boundSql, page);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object plugin(Object target) &#123;</span><br><span class=\"line\">        // 生成代理对象</span><br><span class=\"line\">        return Plugin.wrap(target, this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setProperties(Properties properties) &#123;</span><br><span class=\"line\">        // 初始化配置的默认页码，无配置则默认1</span><br><span class=\"line\">        this.defaultPageIndex = Integer.parseInt(properties.getProperty(&quot;default.pageIndex&quot;, &quot;1&quot;));</span><br><span class=\"line\">        // 初始化配置的默认数据条数，无配置则默认20</span><br><span class=\"line\">        this.defaultPageSize = Integer.parseInt(properties.getProperty(&quot;default.pageSize&quot;, &quot;20&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 从代理对象中分离出真实对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param invocation</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private StatementHandler getUnProxyObject(Invocation invocation) &#123;</span><br><span class=\"line\">        // 取出被拦截的对象</span><br><span class=\"line\">        StatementHandler statementHandler = (StatementHandler) invocation.getTarget();</span><br><span class=\"line\">        MetaObject metaStmtHandler = SystemMetaObject.forObject(statementHandler);</span><br><span class=\"line\">        Object object = null;</span><br><span class=\"line\">        // 分离代理对象</span><br><span class=\"line\">        while (metaStmtHandler.hasGetter(&quot;h&quot;)) &#123;</span><br><span class=\"line\">            object = metaStmtHandler.getValue(&quot;h&quot;);</span><br><span class=\"line\">            metaStmtHandler = SystemMetaObject.forObject(object);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return object == null ? statementHandler : (StatementHandler) object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断是否是select语句</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sql</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private boolean checkSelect(String sql) &#123;</span><br><span class=\"line\">        // 去除sql的前后空格，并将sql转换成小写</span><br><span class=\"line\">        sql = sql.trim().toLowerCase();</span><br><span class=\"line\">        return sql.indexOf(&quot;select&quot;) == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取分页参数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param parameterObject</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Page getPage(Object parameterObject) &#123;</span><br><span class=\"line\">        if (parameterObject == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (parameterObject instanceof Map) &#123;</span><br><span class=\"line\">            // 如果传入的参数是map类型的，则遍历map取出Page对象</span><br><span class=\"line\">            Map&lt;String, Object&gt; parameMap = (Map&lt;String, Object&gt;) parameterObject;</span><br><span class=\"line\">            Set&lt;String&gt; keySet = parameMap.keySet();</span><br><span class=\"line\">            for (String key : keySet) &#123;</span><br><span class=\"line\">                Object value = parameMap.get(key);</span><br><span class=\"line\">                if (value instanceof Page) &#123;</span><br><span class=\"line\">                    // 返回Page对象</span><br><span class=\"line\">                    return (Page) value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else if (parameterObject instanceof Page) &#123;</span><br><span class=\"line\">            // 如果传入的是Page类型，则直接返回该对象</span><br><span class=\"line\">            return (Page) parameterObject;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 初步判断并没有传入Page类型的参数，返回null</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取数据总数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param invocation</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     * @param boundSql</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int getTotal(Invocation invocation, MetaObject metaObject, BoundSql boundSql) &#123;</span><br><span class=\"line\">        // 获取当前的mappedStatement对象</span><br><span class=\"line\">        MappedStatement mappedStatement = (MappedStatement) metaObject.getValue(&quot;delegate.mappedStatement&quot;);</span><br><span class=\"line\">        // 获取配置对象</span><br><span class=\"line\">        Configuration configuration = mappedStatement.getConfiguration();</span><br><span class=\"line\">        // 获取当前需要执行的sql</span><br><span class=\"line\">        String sql = getSql(metaObject);</span><br><span class=\"line\">        // 改写sql语句，实现返回数据总数 $_paging取名是为了防止数据库表重名</span><br><span class=\"line\">        String countSql = &quot;select count(*) as total from (&quot; + sql + &quot;) $_paging&quot;;</span><br><span class=\"line\">        // 获取拦截方法参数，拦截的是connection对象</span><br><span class=\"line\">        Connection connection = (Connection) invocation.getArgs()[0];</span><br><span class=\"line\">        PreparedStatement pstmt = null;</span><br><span class=\"line\">        int total = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            // 预编译查询数据总数的sql语句</span><br><span class=\"line\">            pstmt = connection.prepareStatement(countSql);</span><br><span class=\"line\">            // 构建boundSql对象</span><br><span class=\"line\">            BoundSql countBoundSql = new BoundSql(configuration, countSql, boundSql.getParameterMappings(),</span><br><span class=\"line\">                    boundSql.getParameterObject());</span><br><span class=\"line\">            // 构建parameterHandler用于设置sql参数</span><br><span class=\"line\">            ParameterHandler parameterHandler = new DefaultParameterHandler(mappedStatement, boundSql.getParameterObject(),</span><br><span class=\"line\">                    countBoundSql);</span><br><span class=\"line\">            // 设置sql参数</span><br><span class=\"line\">            parameterHandler.setParameters(pstmt);</span><br><span class=\"line\">            //执行查询</span><br><span class=\"line\">            ResultSet rs = pstmt.executeQuery();</span><br><span class=\"line\">            while (rs.next()) &#123;</span><br><span class=\"line\">                total = rs.getInt(&quot;total&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (pstmt != null) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    pstmt.close();</span><br><span class=\"line\">                &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 返回总数据数</span><br><span class=\"line\">        return total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置总数据数、总页数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param page</span><br><span class=\"line\">     * @param invocation</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     * @param boundSql</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void setTotalToPage(Page page, Invocation invocation, MetaObject metaObject, BoundSql boundSql) &#123;</span><br><span class=\"line\">        // 总数据数</span><br><span class=\"line\">        int total = getTotal(invocation, metaObject, boundSql);</span><br><span class=\"line\">        // 计算总页数</span><br><span class=\"line\">        int totalPage = total / page.getPageSize();</span><br><span class=\"line\">        if (total % page.getPageSize() != 0) &#123;</span><br><span class=\"line\">            totalPage = totalPage + 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        page.setTotal(total);</span><br><span class=\"line\">        page.setTotalPage(totalPage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 校验分页参数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param page</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void checkPage(Page page) &#123;</span><br><span class=\"line\">        // 如果当前页码大于总页数，抛出异常</span><br><span class=\"line\">        if (page.getPageIndex() &gt; page.getTotalPage()) &#123;</span><br><span class=\"line\">            throw new RuntimeException(&quot;当前页码［&quot; + page.getPageIndex() + &quot;］大于总页数［&quot; + page.getTotalPage() + &quot;］&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果当前页码小于总页数，抛出异常</span><br><span class=\"line\">        if (page.getPageIndex() &lt; 1) &#123;</span><br><span class=\"line\">            throw new RuntimeException(&quot;当前页码［&quot; + page.getPageIndex() + &quot;］小于［1］&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 修改当前查询的sql</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param invocation</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     * @param boundSql</span><br><span class=\"line\">     * @param page</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Object changeSql(Invocation invocation, MetaObject metaObject, BoundSql boundSql, Page page) throws Exception &#123;</span><br><span class=\"line\">        // 获取当前查询的sql</span><br><span class=\"line\">        String sql = getSql(metaObject);</span><br><span class=\"line\">        // 修改sql，$_paging_table_limit取名是为了防止数据库表重名</span><br><span class=\"line\">        String newSql = &quot;select * from (&quot; + sql + &quot;) $_paging_table_limit limit ?, ?&quot;;</span><br><span class=\"line\">        // 设置当前sql为修改后的sql</span><br><span class=\"line\">        setSql(metaObject, newSql);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 获取PreparedStatement对象</span><br><span class=\"line\">        PreparedStatement pstmt = (PreparedStatement) invocation.proceed();</span><br><span class=\"line\">        // 获取sql的总参数个数</span><br><span class=\"line\">        int parameCount = pstmt.getParameterMetaData().getParameterCount();</span><br><span class=\"line\">        // 设置分页参数</span><br><span class=\"line\">        pstmt.setInt(parameCount - 1, (page.getPageIndex() - 1) * page.getPageSize());</span><br><span class=\"line\">        pstmt.setInt(parameCount, page.getPageSize());</span><br><span class=\"line\"></span><br><span class=\"line\">        return pstmt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取当前查询的sql</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String getSql(MetaObject metaObject) &#123;</span><br><span class=\"line\">        return (String) metaObject.getValue(&quot;delegate.boundSql.sql&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置当前查询的sql</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param metaObject</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void setSql(MetaObject metaObject, String sql) &#123;</span><br><span class=\"line\">        metaObject.setValue(&quot;delegate.boundSql.sql&quot;, sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置分页插件\"><a href=\"#配置分页插件\" class=\"headerlink\" title=\"配置分页插件\"></a>配置分页插件</h3><p>在mybatis-config.xml配置文件中配置自定义的分页插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugins&gt;</span><br><span class=\"line\">\t&lt;plugin interceptor=&quot;PagingPlugin&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;default.pageIndex&quot; value=&quot;1&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;default.pageSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">\t&lt;/plugin&gt;</span><br><span class=\"line\">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现DAO\"><a href=\"#实现DAO\" class=\"headerlink\" title=\"实现DAO\"></a>实现DAO</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Role &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   private Long id;</span><br><span class=\"line\">   private String roleName;</span><br><span class=\"line\">   private String note;</span><br><span class=\"line\">   // 省略get、set...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义Mapper接口，通过分页对象查询角色列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface RoleMapper &#123;</span><br><span class=\"line\">    List&lt;Role&gt; listRoleByPage(Page page);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义Mapper.xml编写查询的SQL语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mapper namespace=&quot;RoleMapper&quot;&gt;</span><br><span class=\"line\">    &lt;select id=&quot;listRoleByPage&quot; resultType=&quot;Role&quot;&gt;</span><br><span class=\"line\">        SELECT id, role_name, note FROM role</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试分页插件\"><a href=\"#测试分页插件\" class=\"headerlink\" title=\"测试分页插件\"></a>测试分页插件</h3><p>测试代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">\tInputStream inputStream = null;</span><br><span class=\"line\">\tSqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">\tSqlSession sqlSession = null;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tinputStream = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);</span><br><span class=\"line\">\t\tsqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">\t\tsqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\">\t\tRoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);</span><br><span class=\"line\">\t\t// 分页参数，从第一页开始，每页显示5条数据</span><br><span class=\"line\">\t\tPage page = new Page(1, 5);</span><br><span class=\"line\">\t\tList&lt;Role&gt; roleList = roleMapper.listRoleByPage(page);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;===分页信息===&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;当前页码：&quot; + page.getPageIndex());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;每页显示数据数：&quot; + page.getPageSize());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;总数据数：&quot; + page.getTotal());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;总页数：&quot; + page.getTotalPage());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=============&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;===数据列表===&quot;);</span><br><span class=\"line\">\t\tfor (Role role : roleList) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(role);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; finally &#123;</span><br><span class=\"line\">\t\tif (sqlSession != null) &#123;</span><br><span class=\"line\">\t\t\tsqlSession.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (inputStream != null) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tinputStream.close();</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据库role表中的全部数据信息</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>role_name</th>\n<th>note</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>SUPER_ADMIN</td>\n<td>超级管理员</td>\n</tr>\n<tr>\n<td>2</td>\n<td>admin</td>\n<td>管理员</td>\n</tr>\n<tr>\n<td>3</td>\n<td>user</td>\n<td>用户</td>\n</tr>\n<tr>\n<td>4</td>\n<td>user2</td>\n<td>用户2</td>\n</tr>\n<tr>\n<td>8</td>\n<td>user3</td>\n<td>用户3</td>\n</tr>\n<tr>\n<td>9</td>\n<td>test</td>\n<td>测试</td>\n</tr>\n<tr>\n<td>10</td>\n<td>test2</td>\n<td>测试2</td>\n</tr>\n<tr>\n<td>11</td>\n<td>test3</td>\n<td>测试3</td>\n</tr>\n<tr>\n<td>12</td>\n<td>test4</td>\n<td>测试4</td>\n</tr>\n<tr>\n<td>13</td>\n<td>test5</td>\n<td>测试5</td>\n</tr>\n</tbody></table>\n<p>代码执行结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===分页信息===</span><br><span class=\"line\">当前页码：1</span><br><span class=\"line\">每页显示数据数：5</span><br><span class=\"line\">总数据数：10</span><br><span class=\"line\">总页数：2</span><br><span class=\"line\">=============</span><br><span class=\"line\">===数据列表===</span><br><span class=\"line\">Role&#123;id=1, roleName=&#x27;SUPER_ADMIN&#x27;, note=&#x27; 超级管理员&#x27;&#125;</span><br><span class=\"line\">Role&#123;id=2, roleName=&#x27;admin&#x27;, note=&#x27;管理员&#x27;&#125;</span><br><span class=\"line\">Role&#123;id=3, roleName=&#x27;user&#x27;, note=&#x27;用户&#x27;&#125;</span><br><span class=\"line\">Role&#123;id=4, roleName=&#x27;user2&#x27;, note=&#x27;用户2&#x27;&#125;</span><br><span class=\"line\">Role&#123;id=8, roleName=&#x27;user3&#x27;, note=&#x27;用户3&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印的SQL信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==&gt;  Preparing: select count(*) as total from (SELECT id, role_name, note FROM role) $_paging </span><br><span class=\"line\">==&gt; Parameters: </span><br><span class=\"line\">&lt;==    Columns: total</span><br><span class=\"line\">&lt;==        Row: 10</span><br><span class=\"line\">&lt;==      Total: 1</span><br><span class=\"line\">==&gt;  Preparing: select * from (SELECT id, role_name, note FROM role) $_paging_table_limit limit ?, ? </span><br><span class=\"line\">==&gt; Parameters: 0(Integer), 5(Integer)</span><br><span class=\"line\">&lt;==    Columns: id, role_name, note</span><br><span class=\"line\">&lt;==        Row: 1, SUPER_ADMIN,  超级管理员</span><br><span class=\"line\">&lt;==        Row: 2, admin, 管理员</span><br><span class=\"line\">&lt;==        Row: 3, user, 用户</span><br><span class=\"line\">&lt;==        Row: 4, user2, 用户2</span><br><span class=\"line\">&lt;==        Row: 8, user3, 用户3</span><br><span class=\"line\">&lt;==      Total: 5</span><br></pre></td></tr></table></figure>"},{"title":"MySql-Transaction-Isolation-Level","date":"2022-03-10T07:33:59.000Z","_content":"\n\n# 事务的4大特性ACID\n原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。\n一致性（Consistent）：一方面，在事务开始之前和事务结束以后，数据库的完整性没有被破坏；另一方面，写入的数据必须完全符合所有的预设规则。\n隔离性（Isolation）：不同的会话或线程，操作数据库的时候可能产生多个事务。如果同时操作一张表或同一行数据，必然产生并发或干扰操作。隔离性要求事务间对表或数据操作是透明的，互相不存在干扰的，通过这种方式保证一致性。\n持久性（Durable）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n#  MySQL 事务的隔离级别\n\n\n\n## 准备环境\n\n```\n docker pull mysql\n docker run --name=mysql -it -p3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql\n docker ps -a\n docker exec -it 15084 bash\n mysql -u root -p\n mysql> create database kangpan\n mysql> use kangpan\n\n```\n\n\n\n## 准备数据\n\n```\nmysql> create table user(\n    -> id int(10) auto_increment,\n    -> name varchar(30) default null,\n    -> age tinyint(4) default null,\n    -> primary key (id)\n    -> )engine=innodb charset=utf8mb4;\n\n insert into user(id, name, age) values (1,'kangpan',31);\n\nmysql> select * from user;\n+----+---------+------+\n| id | name    | age  |\n+----+---------+------+\n|  1 | kangpan |   31 |\n+----+---------+------+\n1 row in set (0.00 sec)\n```\n\n## 事务并发可能出现的情况\n\n#### 脏读（Dirty Read）\n\n一个事务读到了另一个未提交事务修改过的数据\n\n\n\n#### 幻读（Phantom）\n\n一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）\n\n\n\n#### 不可重复读（Non-Repeatable Read）\n\n一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提交和读已提交隔离级别都可能会出现）\n\n\n\n#### 幻读（Phantom）\n\n一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）\n\n\n\n## 事务的隔离级别\n\nMySQL的事务隔离级别一共有四个，分别是读未提交、读已提交、可重复读以及可串行化。\n\nMySQL的隔离级别的作用就是让事务之间互相隔离，互不影响，这样可以保证事务的一致性。\n\n隔离级别比较：可串行化>可重复读>读已提交>读未提交\n\n隔离级别对性能的影响比较：可串行化>可重复读>读已提交>读未提交\n\n由此看出，隔离级别越高，所需要消耗的MySQL性能越大（如事务并发严重性），为了平衡二者，一般建议设置的隔离级别为可重复读，MySQL默认的隔离级别也是可重复读。\n\n#### 读未提交（READ UNCOMMITTED）\n\n在读未提交隔离级别下，事务A可以读取到事务B修改过但未提交的数据。\n\n可能发生脏读、不可重复读和幻读问题，一般很少使用此隔离级别。\n\n#### 读已提交（READ COMMITTED）\n\n在读已提交隔离级别下，事务B只能在事务A修改过并且已提交后才能读取到事务B修改的数据。\n\n读已提交隔离级别解决了脏读的问题，但可能发生不可重复读和幻读问题，一般很少使用此隔离级别。\n\n#### 可重复读（REPEATABLE READ）\n\n在可重复读隔离级别下，事务B只能在事务A修改过数据并提交后，自己也提交事务后，才能读取到事务B修改的数据。可重复读隔离级别解决了脏读和不可重复读的问题，但可能发生幻读问题。\n\n提问：为什么上了写锁（写操作），别的事务还可以读操作？\n\n因为InnoDB有MVCC机制（多版本并发控制），可以使用快照读，而不会被阻塞。\n\n#### 可串行化（SERIALIZABLE）\n\n各种问题（脏读、不可重复读、幻读）都不会发生，通过加锁实现（读锁和写锁）。\n\n\n\n## 隔离级别的实现原理\n\n使用MySQL的默认隔离级别（可重复读）来进行说明。\n\n每条记录在更新的时候都会同时记录一条回滚操作（回滚操作日志undo log）。同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。即通过回滚（rollback操作），可以回到前一个状态的值。\n\n假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。\n\n- read-view A : 回滚段 将 2 改成 1\n- read-view B : 回滚段 将 3 改成 2\n\n- read-view C : 当前值 4 \n\nread-view A -> read-view B -> read-view C\n\n当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。\n\n同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。\n\n提问：回滚操作日志（undo log）什么时候删除？\n\nMySQL会判断当没有事务需要用到这些回滚日志的时候，回滚日志会被删除。\n\n提问：什么时候不需要了？\n\n当系统里么有比这个回滚日志更早的read-view的时候。\n\n我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行**回滚**，在 MySQL 中，恢复机制是通过 **回滚日志（undo log）** 实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用 **回滚日志** 中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚将之前未完成的事务。\n\n另外，MVCC 的实现依赖于：**隐藏字段、Read View、undo log**。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改\n\n## 查看当前会话隔离级别\n\n#### 方式1\n\n```\n命令：SHOW VARIABLES LIKE 'transaction_isolation';\n\nmysql> show variables like 'transaction_isolation';\n+-----------------------+--------------+\n| Variable_name  | Value |\n+-----------------------+--------------+\n| transaction_isolation | SERIALIZABLE |\n+-----------------------+--------------+\n```\n\n#### 方式2\n\n```\n命令：SELECT @@transaction_isolation;\n\nmysql> select @@transaction_isolation;\n+-------------------------+\n| @@transaction_isolation |\n+-------------------------+\n| SERIALIZABLE            |\n+-------------------------+\n\nmysql> select @@global.transaction_isolation;\n+--------------------------------+\n| @@global.transaction_isolation |\n+--------------------------------+\n| READ-UNCOMMITTED               |\n+--------------------------------+\n1 row in set (0.01 sec)\n```\n\n## 设置隔离级别\n\n#### 方式1：通过set命令\n\n```\nSET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL level;\n其中level有4种值：\nlevel: {\n     REPEATABLE READ\n   | READ COMMITTED\n   | READ UNCOMMITTED\n   | SERIALIZABLE\n}\n```\n\n##### 关键词：GLOBAL\n\n```\nSET GLOBAL TRANSACTION ISOLATION LEVEL level;\neg: set global transaction isolation level read uncommitted;\n* 只对执行完该语句之后产生的会话起作用\n* 当前已经存在的会话无效\n```\n\n##### 关键词：SESSION\n\n```\nSET SESSION TRANSACTION ISOLATION LEVEL level;\n* 对当前会话的所有后续的事务有效\n* 该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务\n* 如果在事务之间执行，则对后续的事务有效。\n```\n\n##### 无关键词\n\n```\nSET TRANSACTION ISOLATION LEVEL level;\n* 只对当前会话中下一个即将开启的事务有效\n* 下一个事务执行完后，后续事务将恢复到之前的隔离级别\n* 该语句不能在已经开启的事务中间执行，会报错的\n```\n\n#### 方式2：通过服务启动项命令\n\n> 可以修改启动参数transaction-isolation的值\n>\n> 比方说我们在启动服务器时指定了--transaction-isolation=READ UNCOMMITTED，那么事务的默认隔离级别就从原来的REPEATABLE READ变成了READ UNCOMMITTED。\n\n\n\n## 关于事务日志\n\n关于事务日志的说明中，我们可以看得出来，只要修改的数据已经写入到日志并且持久化了，数据本身还没有写入磁盘时，即使断电了，系统在重启的时候依然会将数据恢复。那么我们再来看看官网给出的innodb_flush_log_at_trx_commit 参数的介绍\n- 为0时，如果MySQL挂了或宕机可能会有1秒数据的丢失。\n- 为1时， 只要事务提交成功，redo log记录就一定在硬盘里，不会有任何数据丢失。如果事务执行期间MySQL挂了或宕机，这部分日志丢了，但是事务并没有提交，所以日志丢了也不会有损失。\n- 为2时， 只要事务提交成功，redo log buffer中的内容只写入文件系统缓存（page cache）。如果仅仅只是MySQL挂了不会有任何数据丢失，但是宕机可能会有1秒数据的丢失。\n\n该属性主要是为数据库的ACID原则进行服务的，并且默认为1，但是实际情况下设置为2会提高很多的事务性能，设置1的时候，innodb的缓存会在事务提交或者每秒钟时都会进行磁盘的刷新操作，2的时候，innodb缓存会在提交事务时写入到事务日志但不会刷新磁盘，然后在每秒钟时进行磁盘刷新操作，2要比1提高很多性能，事务没有commit时，断电了，此时肯定数据是没有更新成功的，因为都还没有来得及写入事务日志，事务提交后，在写入事务日志的时候，发生断电，此时无论是参数的值是1还是2，都应该恢复不了数据了，每秒钟刷新磁盘时，发生断电，此时既然事务日志已经持久化了，那么重启后，数据是会自动恢复的。\n\n#### 刷盘时机\n\nInnoDB 存储引擎为 redo log 的刷盘策略提供了 innodb_flush_log_at_trx_commit 参数，它支持三种策略：\n\n- **0** ：设置为 0 的时候，表示每次事务提交时不进行刷盘操作，后台线程进行刷盘\n- **1** ：设置为 1 的时候，表示每次事务提交时都将进行刷盘操作（默认值）\n- **2** ：设置为 2 的时候，表示每次事务提交时都只把 redo log buffer 内容写入 page cache\n\ninnodb_flush_log_at_trx_commit 参数默认为 1 ，也就是说当事务提交时会调用 fsync 对 redo log 进行刷盘\n\n另外，InnoDB 存储引擎有一个后台线程，每隔1 秒，就会把 redo log buffer 中的内容写到文件系统缓存（page cache），然后调用 fsync 刷盘。也就是说，一个没有提交事务的 redo log 记录，也可能会刷盘。因为在事务执行过程 redo log 记录是会写入redo log buffer 中，这些 redo log 记录会被后台线程刷盘。除了后台线程每秒1次的轮询操作，还有一种情况，当 redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动刷盘。\n\n\n#### 日志存储方式\n硬盘上存储的 redo log 日志文件不只一个，而是以一个日志文件组的形式出现的，每个的redo日志文件大小都是一样的。\n比如可以配置为一组4个文件，每个文件的大小是 1GB，整个 redo log 日志文件组可以记录4G的内容。\n它采用的是环形数组形式，从头开始写，写到末尾又回到头循环写，在个日志文件组中还有两个重要的属性，分别是 write pos、checkpoint\n- write pos 是当前记录的位置，一边写一边后移\n- checkpoint 是当前要擦除的位置，也是往后推移\n每次刷盘 redo log 记录到日志文件组中，write pos 位置就会后移更新。如果 write pos 追上 checkpoint ，表示日志文件组满了，这时候不能再写入新的 redo log 记录，MySQL 得停下来，清空一些记录，把 checkpoint 推进一下。\n\n## 关于Autocommit\n\n当变量autocommit的值为ON时，代表自动提交开启，改为OFF则变为手动提交。在手动提交模式下，可以使用下面两种指令开启事务：\n\n\n```\nstart transaction;\nbegin;\n```\n\n结束事务的方式也有两种，事务确认提交\n```\ncommit;\nrollback;\n```\n\n```\nmysql> set @@autocommit=0;\n\nmysql> SHOW VARIABLES like '%autocommit%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| autocommit    | OFF   |\n+---------------+-------+\n1 row in set (0.00 sec)\n```\n\n## 悲观锁与乐观锁\n\n- **悲观锁**：悲观锁指对数据被意外修改持保守态度，依赖数据库原生支持的锁机制来保证当前事务处理的安全性，防止其他并发事务对目标数据的破坏或破坏其他并发事务数据，将在事务开始执行前或执行中申请锁定，执行完后再释放锁定。这对于长事务来讲，可能会严重影响系统的并发处理能力\n\n  ```\n  LOCK TABLES a WRITE;\n  INSERT INTO a VALUES (1,23),(2,34),(4,33);\n  INSERT INTO a VALUES (8,26),(6,29);\n  UNLOCK TABLES;\n  ```\n\n  锁定表可以加速用多个语句执行的INSERT操作，因为索引缓存区仅在所有INSERT语句完成后刷新到磁盘上一次。一般有多少INSERT语句即有多少索引缓存区刷新，如果能用一个语句插入所有的行，就不需要锁定；对于事务表，应使用BEGIN和COMMIT代替LOCK TABLES来加快插入\n\n- **乐观锁**：乐观锁相对悲观锁而言，先假想数据不会被并发操作修改，没有数据冲突，只在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则宣告失败，否则更新数据。这就要求避免使用长事务和锁机制，以免导致系统并发处理能力降低，保障系统生产效率。下面将说明使用乐观锁时的大致业务处理流程\n\n  ```\n  首 步：执行一次查询 select some_column as old_value from some_table where id = id_value (假设该值在当前业务处理过程中不会被其他并发事务修改)\n  ...\n  第n步：old_value参与中间业务处理，比如old_value被自己修改 new_value = f(old_value)。这期间可能耗时很长，但不会为持有 some_column 而申请所在的行或表锁定，因此其他并发事务可以获得该锁\n  ...\n  尾 步：执行条件更新 update some_table set some_column = new_value where id = id_value and some_column = old_value (条件更新中检查old_value是否被修改)\n  ```\n\n## 三大日志\nMySQL InnoDB 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。MySQL数据库的数据备份、主备、主主、主从都离不开binlog，需要依靠binlog来同步数据，保证数据一致性。\n","source":"_posts/MySql-Transaction-Isolation-Level.md","raw":"---\ntitle: MySql-Transaction-Isolation-Level\ndate: 2022-03-10 15:33:59\ntags: MySql\n---\n\n\n# 事务的4大特性ACID\n原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。\n一致性（Consistent）：一方面，在事务开始之前和事务结束以后，数据库的完整性没有被破坏；另一方面，写入的数据必须完全符合所有的预设规则。\n隔离性（Isolation）：不同的会话或线程，操作数据库的时候可能产生多个事务。如果同时操作一张表或同一行数据，必然产生并发或干扰操作。隔离性要求事务间对表或数据操作是透明的，互相不存在干扰的，通过这种方式保证一致性。\n持久性（Durable）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n#  MySQL 事务的隔离级别\n\n\n\n## 准备环境\n\n```\n docker pull mysql\n docker run --name=mysql -it -p3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql\n docker ps -a\n docker exec -it 15084 bash\n mysql -u root -p\n mysql> create database kangpan\n mysql> use kangpan\n\n```\n\n\n\n## 准备数据\n\n```\nmysql> create table user(\n    -> id int(10) auto_increment,\n    -> name varchar(30) default null,\n    -> age tinyint(4) default null,\n    -> primary key (id)\n    -> )engine=innodb charset=utf8mb4;\n\n insert into user(id, name, age) values (1,'kangpan',31);\n\nmysql> select * from user;\n+----+---------+------+\n| id | name    | age  |\n+----+---------+------+\n|  1 | kangpan |   31 |\n+----+---------+------+\n1 row in set (0.00 sec)\n```\n\n## 事务并发可能出现的情况\n\n#### 脏读（Dirty Read）\n\n一个事务读到了另一个未提交事务修改过的数据\n\n\n\n#### 幻读（Phantom）\n\n一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）\n\n\n\n#### 不可重复读（Non-Repeatable Read）\n\n一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提交和读已提交隔离级别都可能会出现）\n\n\n\n#### 幻读（Phantom）\n\n一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）\n\n\n\n## 事务的隔离级别\n\nMySQL的事务隔离级别一共有四个，分别是读未提交、读已提交、可重复读以及可串行化。\n\nMySQL的隔离级别的作用就是让事务之间互相隔离，互不影响，这样可以保证事务的一致性。\n\n隔离级别比较：可串行化>可重复读>读已提交>读未提交\n\n隔离级别对性能的影响比较：可串行化>可重复读>读已提交>读未提交\n\n由此看出，隔离级别越高，所需要消耗的MySQL性能越大（如事务并发严重性），为了平衡二者，一般建议设置的隔离级别为可重复读，MySQL默认的隔离级别也是可重复读。\n\n#### 读未提交（READ UNCOMMITTED）\n\n在读未提交隔离级别下，事务A可以读取到事务B修改过但未提交的数据。\n\n可能发生脏读、不可重复读和幻读问题，一般很少使用此隔离级别。\n\n#### 读已提交（READ COMMITTED）\n\n在读已提交隔离级别下，事务B只能在事务A修改过并且已提交后才能读取到事务B修改的数据。\n\n读已提交隔离级别解决了脏读的问题，但可能发生不可重复读和幻读问题，一般很少使用此隔离级别。\n\n#### 可重复读（REPEATABLE READ）\n\n在可重复读隔离级别下，事务B只能在事务A修改过数据并提交后，自己也提交事务后，才能读取到事务B修改的数据。可重复读隔离级别解决了脏读和不可重复读的问题，但可能发生幻读问题。\n\n提问：为什么上了写锁（写操作），别的事务还可以读操作？\n\n因为InnoDB有MVCC机制（多版本并发控制），可以使用快照读，而不会被阻塞。\n\n#### 可串行化（SERIALIZABLE）\n\n各种问题（脏读、不可重复读、幻读）都不会发生，通过加锁实现（读锁和写锁）。\n\n\n\n## 隔离级别的实现原理\n\n使用MySQL的默认隔离级别（可重复读）来进行说明。\n\n每条记录在更新的时候都会同时记录一条回滚操作（回滚操作日志undo log）。同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。即通过回滚（rollback操作），可以回到前一个状态的值。\n\n假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。\n\n- read-view A : 回滚段 将 2 改成 1\n- read-view B : 回滚段 将 3 改成 2\n\n- read-view C : 当前值 4 \n\nread-view A -> read-view B -> read-view C\n\n当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。\n\n同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。\n\n提问：回滚操作日志（undo log）什么时候删除？\n\nMySQL会判断当没有事务需要用到这些回滚日志的时候，回滚日志会被删除。\n\n提问：什么时候不需要了？\n\n当系统里么有比这个回滚日志更早的read-view的时候。\n\n我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行**回滚**，在 MySQL 中，恢复机制是通过 **回滚日志（undo log）** 实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用 **回滚日志** 中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚将之前未完成的事务。\n\n另外，MVCC 的实现依赖于：**隐藏字段、Read View、undo log**。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改\n\n## 查看当前会话隔离级别\n\n#### 方式1\n\n```\n命令：SHOW VARIABLES LIKE 'transaction_isolation';\n\nmysql> show variables like 'transaction_isolation';\n+-----------------------+--------------+\n| Variable_name  | Value |\n+-----------------------+--------------+\n| transaction_isolation | SERIALIZABLE |\n+-----------------------+--------------+\n```\n\n#### 方式2\n\n```\n命令：SELECT @@transaction_isolation;\n\nmysql> select @@transaction_isolation;\n+-------------------------+\n| @@transaction_isolation |\n+-------------------------+\n| SERIALIZABLE            |\n+-------------------------+\n\nmysql> select @@global.transaction_isolation;\n+--------------------------------+\n| @@global.transaction_isolation |\n+--------------------------------+\n| READ-UNCOMMITTED               |\n+--------------------------------+\n1 row in set (0.01 sec)\n```\n\n## 设置隔离级别\n\n#### 方式1：通过set命令\n\n```\nSET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL level;\n其中level有4种值：\nlevel: {\n     REPEATABLE READ\n   | READ COMMITTED\n   | READ UNCOMMITTED\n   | SERIALIZABLE\n}\n```\n\n##### 关键词：GLOBAL\n\n```\nSET GLOBAL TRANSACTION ISOLATION LEVEL level;\neg: set global transaction isolation level read uncommitted;\n* 只对执行完该语句之后产生的会话起作用\n* 当前已经存在的会话无效\n```\n\n##### 关键词：SESSION\n\n```\nSET SESSION TRANSACTION ISOLATION LEVEL level;\n* 对当前会话的所有后续的事务有效\n* 该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务\n* 如果在事务之间执行，则对后续的事务有效。\n```\n\n##### 无关键词\n\n```\nSET TRANSACTION ISOLATION LEVEL level;\n* 只对当前会话中下一个即将开启的事务有效\n* 下一个事务执行完后，后续事务将恢复到之前的隔离级别\n* 该语句不能在已经开启的事务中间执行，会报错的\n```\n\n#### 方式2：通过服务启动项命令\n\n> 可以修改启动参数transaction-isolation的值\n>\n> 比方说我们在启动服务器时指定了--transaction-isolation=READ UNCOMMITTED，那么事务的默认隔离级别就从原来的REPEATABLE READ变成了READ UNCOMMITTED。\n\n\n\n## 关于事务日志\n\n关于事务日志的说明中，我们可以看得出来，只要修改的数据已经写入到日志并且持久化了，数据本身还没有写入磁盘时，即使断电了，系统在重启的时候依然会将数据恢复。那么我们再来看看官网给出的innodb_flush_log_at_trx_commit 参数的介绍\n- 为0时，如果MySQL挂了或宕机可能会有1秒数据的丢失。\n- 为1时， 只要事务提交成功，redo log记录就一定在硬盘里，不会有任何数据丢失。如果事务执行期间MySQL挂了或宕机，这部分日志丢了，但是事务并没有提交，所以日志丢了也不会有损失。\n- 为2时， 只要事务提交成功，redo log buffer中的内容只写入文件系统缓存（page cache）。如果仅仅只是MySQL挂了不会有任何数据丢失，但是宕机可能会有1秒数据的丢失。\n\n该属性主要是为数据库的ACID原则进行服务的，并且默认为1，但是实际情况下设置为2会提高很多的事务性能，设置1的时候，innodb的缓存会在事务提交或者每秒钟时都会进行磁盘的刷新操作，2的时候，innodb缓存会在提交事务时写入到事务日志但不会刷新磁盘，然后在每秒钟时进行磁盘刷新操作，2要比1提高很多性能，事务没有commit时，断电了，此时肯定数据是没有更新成功的，因为都还没有来得及写入事务日志，事务提交后，在写入事务日志的时候，发生断电，此时无论是参数的值是1还是2，都应该恢复不了数据了，每秒钟刷新磁盘时，发生断电，此时既然事务日志已经持久化了，那么重启后，数据是会自动恢复的。\n\n#### 刷盘时机\n\nInnoDB 存储引擎为 redo log 的刷盘策略提供了 innodb_flush_log_at_trx_commit 参数，它支持三种策略：\n\n- **0** ：设置为 0 的时候，表示每次事务提交时不进行刷盘操作，后台线程进行刷盘\n- **1** ：设置为 1 的时候，表示每次事务提交时都将进行刷盘操作（默认值）\n- **2** ：设置为 2 的时候，表示每次事务提交时都只把 redo log buffer 内容写入 page cache\n\ninnodb_flush_log_at_trx_commit 参数默认为 1 ，也就是说当事务提交时会调用 fsync 对 redo log 进行刷盘\n\n另外，InnoDB 存储引擎有一个后台线程，每隔1 秒，就会把 redo log buffer 中的内容写到文件系统缓存（page cache），然后调用 fsync 刷盘。也就是说，一个没有提交事务的 redo log 记录，也可能会刷盘。因为在事务执行过程 redo log 记录是会写入redo log buffer 中，这些 redo log 记录会被后台线程刷盘。除了后台线程每秒1次的轮询操作，还有一种情况，当 redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动刷盘。\n\n\n#### 日志存储方式\n硬盘上存储的 redo log 日志文件不只一个，而是以一个日志文件组的形式出现的，每个的redo日志文件大小都是一样的。\n比如可以配置为一组4个文件，每个文件的大小是 1GB，整个 redo log 日志文件组可以记录4G的内容。\n它采用的是环形数组形式，从头开始写，写到末尾又回到头循环写，在个日志文件组中还有两个重要的属性，分别是 write pos、checkpoint\n- write pos 是当前记录的位置，一边写一边后移\n- checkpoint 是当前要擦除的位置，也是往后推移\n每次刷盘 redo log 记录到日志文件组中，write pos 位置就会后移更新。如果 write pos 追上 checkpoint ，表示日志文件组满了，这时候不能再写入新的 redo log 记录，MySQL 得停下来，清空一些记录，把 checkpoint 推进一下。\n\n## 关于Autocommit\n\n当变量autocommit的值为ON时，代表自动提交开启，改为OFF则变为手动提交。在手动提交模式下，可以使用下面两种指令开启事务：\n\n\n```\nstart transaction;\nbegin;\n```\n\n结束事务的方式也有两种，事务确认提交\n```\ncommit;\nrollback;\n```\n\n```\nmysql> set @@autocommit=0;\n\nmysql> SHOW VARIABLES like '%autocommit%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| autocommit    | OFF   |\n+---------------+-------+\n1 row in set (0.00 sec)\n```\n\n## 悲观锁与乐观锁\n\n- **悲观锁**：悲观锁指对数据被意外修改持保守态度，依赖数据库原生支持的锁机制来保证当前事务处理的安全性，防止其他并发事务对目标数据的破坏或破坏其他并发事务数据，将在事务开始执行前或执行中申请锁定，执行完后再释放锁定。这对于长事务来讲，可能会严重影响系统的并发处理能力\n\n  ```\n  LOCK TABLES a WRITE;\n  INSERT INTO a VALUES (1,23),(2,34),(4,33);\n  INSERT INTO a VALUES (8,26),(6,29);\n  UNLOCK TABLES;\n  ```\n\n  锁定表可以加速用多个语句执行的INSERT操作，因为索引缓存区仅在所有INSERT语句完成后刷新到磁盘上一次。一般有多少INSERT语句即有多少索引缓存区刷新，如果能用一个语句插入所有的行，就不需要锁定；对于事务表，应使用BEGIN和COMMIT代替LOCK TABLES来加快插入\n\n- **乐观锁**：乐观锁相对悲观锁而言，先假想数据不会被并发操作修改，没有数据冲突，只在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则宣告失败，否则更新数据。这就要求避免使用长事务和锁机制，以免导致系统并发处理能力降低，保障系统生产效率。下面将说明使用乐观锁时的大致业务处理流程\n\n  ```\n  首 步：执行一次查询 select some_column as old_value from some_table where id = id_value (假设该值在当前业务处理过程中不会被其他并发事务修改)\n  ...\n  第n步：old_value参与中间业务处理，比如old_value被自己修改 new_value = f(old_value)。这期间可能耗时很长，但不会为持有 some_column 而申请所在的行或表锁定，因此其他并发事务可以获得该锁\n  ...\n  尾 步：执行条件更新 update some_table set some_column = new_value where id = id_value and some_column = old_value (条件更新中检查old_value是否被修改)\n  ```\n\n## 三大日志\nMySQL InnoDB 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。MySQL数据库的数据备份、主备、主主、主从都离不开binlog，需要依靠binlog来同步数据，保证数据一致性。\n","slug":"MySql-Transaction-Isolation-Level","published":1,"updated":"2022-03-10T07:36:03.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0koezlv0000fcln8vf3flre","content":"<h1 id=\"事务的4大特性ACID\"><a href=\"#事务的4大特性ACID\" class=\"headerlink\" title=\"事务的4大特性ACID\"></a>事务的4大特性ACID</h1><p>原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。<br>一致性（Consistent）：一方面，在事务开始之前和事务结束以后，数据库的完整性没有被破坏；另一方面，写入的数据必须完全符合所有的预设规则。<br>隔离性（Isolation）：不同的会话或线程，操作数据库的时候可能产生多个事务。如果同时操作一张表或同一行数据，必然产生并发或干扰操作。隔离性要求事务间对表或数据操作是透明的，互相不存在干扰的，通过这种方式保证一致性。<br>持久性（Durable）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>\n<h1 id=\"MySQL-事务的隔离级别\"><a href=\"#MySQL-事务的隔离级别\" class=\"headerlink\" title=\"MySQL 事务的隔离级别\"></a>MySQL 事务的隔离级别</h1><h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\">docker run --name=mysql -it -p3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\">docker exec -it 15084 bash</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql&gt; create database kangpan</span><br><span class=\"line\">mysql&gt; use kangpan</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"准备数据\"><a href=\"#准备数据\" class=\"headerlink\" title=\"准备数据\"></a>准备数据</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table user(</span><br><span class=\"line\">    -&gt; id int(10) auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(30) default null,</span><br><span class=\"line\">    -&gt; age tinyint(4) default null,</span><br><span class=\"line\">    -&gt; primary key (id)</span><br><span class=\"line\">    -&gt; )engine=innodb charset=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"> insert into user(id, name, age) values (1,&#x27;kangpan&#x27;,31);</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from user;</span><br><span class=\"line\">+----+---------+------+</span><br><span class=\"line\">| id | name    | age  |</span><br><span class=\"line\">+----+---------+------+</span><br><span class=\"line\">|  1 | kangpan |   31 |</span><br><span class=\"line\">+----+---------+------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事务并发可能出现的情况\"><a href=\"#事务并发可能出现的情况\" class=\"headerlink\" title=\"事务并发可能出现的情况\"></a>事务并发可能出现的情况</h2><h4 id=\"脏读（Dirty-Read）\"><a href=\"#脏读（Dirty-Read）\" class=\"headerlink\" title=\"脏读（Dirty Read）\"></a>脏读（Dirty Read）</h4><p>一个事务读到了另一个未提交事务修改过的数据</p>\n<h4 id=\"幻读（Phantom）\"><a href=\"#幻读（Phantom）\" class=\"headerlink\" title=\"幻读（Phantom）\"></a>幻读（Phantom）</h4><p>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）</p>\n<h4 id=\"不可重复读（Non-Repeatable-Read）\"><a href=\"#不可重复读（Non-Repeatable-Read）\" class=\"headerlink\" title=\"不可重复读（Non-Repeatable Read）\"></a>不可重复读（Non-Repeatable Read）</h4><p>一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提交和读已提交隔离级别都可能会出现）</p>\n<h4 id=\"幻读（Phantom）-1\"><a href=\"#幻读（Phantom）-1\" class=\"headerlink\" title=\"幻读（Phantom）\"></a>幻读（Phantom）</h4><p>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）</p>\n<h2 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h2><p>MySQL的事务隔离级别一共有四个，分别是读未提交、读已提交、可重复读以及可串行化。</p>\n<p>MySQL的隔离级别的作用就是让事务之间互相隔离，互不影响，这样可以保证事务的一致性。</p>\n<p>隔离级别比较：可串行化&gt;可重复读&gt;读已提交&gt;读未提交</p>\n<p>隔离级别对性能的影响比较：可串行化&gt;可重复读&gt;读已提交&gt;读未提交</p>\n<p>由此看出，隔离级别越高，所需要消耗的MySQL性能越大（如事务并发严重性），为了平衡二者，一般建议设置的隔离级别为可重复读，MySQL默认的隔离级别也是可重复读。</p>\n<h4 id=\"读未提交（READ-UNCOMMITTED）\"><a href=\"#读未提交（READ-UNCOMMITTED）\" class=\"headerlink\" title=\"读未提交（READ UNCOMMITTED）\"></a>读未提交（READ UNCOMMITTED）</h4><p>在读未提交隔离级别下，事务A可以读取到事务B修改过但未提交的数据。</p>\n<p>可能发生脏读、不可重复读和幻读问题，一般很少使用此隔离级别。</p>\n<h4 id=\"读已提交（READ-COMMITTED）\"><a href=\"#读已提交（READ-COMMITTED）\" class=\"headerlink\" title=\"读已提交（READ COMMITTED）\"></a>读已提交（READ COMMITTED）</h4><p>在读已提交隔离级别下，事务B只能在事务A修改过并且已提交后才能读取到事务B修改的数据。</p>\n<p>读已提交隔离级别解决了脏读的问题，但可能发生不可重复读和幻读问题，一般很少使用此隔离级别。</p>\n<h4 id=\"可重复读（REPEATABLE-READ）\"><a href=\"#可重复读（REPEATABLE-READ）\" class=\"headerlink\" title=\"可重复读（REPEATABLE READ）\"></a>可重复读（REPEATABLE READ）</h4><p>在可重复读隔离级别下，事务B只能在事务A修改过数据并提交后，自己也提交事务后，才能读取到事务B修改的数据。可重复读隔离级别解决了脏读和不可重复读的问题，但可能发生幻读问题。</p>\n<p>提问：为什么上了写锁（写操作），别的事务还可以读操作？</p>\n<p>因为InnoDB有MVCC机制（多版本并发控制），可以使用快照读，而不会被阻塞。</p>\n<h4 id=\"可串行化（SERIALIZABLE）\"><a href=\"#可串行化（SERIALIZABLE）\" class=\"headerlink\" title=\"可串行化（SERIALIZABLE）\"></a>可串行化（SERIALIZABLE）</h4><p>各种问题（脏读、不可重复读、幻读）都不会发生，通过加锁实现（读锁和写锁）。</p>\n<h2 id=\"隔离级别的实现原理\"><a href=\"#隔离级别的实现原理\" class=\"headerlink\" title=\"隔离级别的实现原理\"></a>隔离级别的实现原理</h2><p>使用MySQL的默认隔离级别（可重复读）来进行说明。</p>\n<p>每条记录在更新的时候都会同时记录一条回滚操作（回滚操作日志undo log）。同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。即通过回滚（rollback操作），可以回到前一个状态的值。</p>\n<p>假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p>\n<ul>\n<li><p>read-view A : 回滚段 将 2 改成 1</p>\n</li>\n<li><p>read-view B : 回滚段 将 3 改成 2</p>\n</li>\n<li><p>read-view C : 当前值 4 </p>\n</li>\n</ul>\n<p>read-view A -&gt; read-view B -&gt; read-view C</p>\n<p>当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。</p>\n<p>同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。</p>\n<p>提问：回滚操作日志（undo log）什么时候删除？</p>\n<p>MySQL会判断当没有事务需要用到这些回滚日志的时候，回滚日志会被删除。</p>\n<p>提问：什么时候不需要了？</p>\n<p>当系统里么有比这个回滚日志更早的read-view的时候。</p>\n<p>我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行<strong>回滚</strong>，在 MySQL 中，恢复机制是通过 <strong>回滚日志（undo log）</strong> 实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用 <strong>回滚日志</strong> 中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚将之前未完成的事务。</p>\n<p>另外，MVCC 的实现依赖于：<strong>隐藏字段、Read View、undo log</strong>。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改</p>\n<h2 id=\"查看当前会话隔离级别\"><a href=\"#查看当前会话隔离级别\" class=\"headerlink\" title=\"查看当前会话隔离级别\"></a>查看当前会话隔离级别</h2><h4 id=\"方式1\"><a href=\"#方式1\" class=\"headerlink\" title=\"方式1\"></a>方式1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：SHOW VARIABLES LIKE &#x27;transaction_isolation&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show variables like &#x27;transaction_isolation&#x27;;</span><br><span class=\"line\">+-----------------------+--------------+</span><br><span class=\"line\">| Variable_name  | Value |</span><br><span class=\"line\">+-----------------------+--------------+</span><br><span class=\"line\">| transaction_isolation | SERIALIZABLE |</span><br><span class=\"line\">+-----------------------+--------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式2\"><a href=\"#方式2\" class=\"headerlink\" title=\"方式2\"></a>方式2</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：SELECT @@transaction_isolation;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@transaction_isolation;</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| @@transaction_isolation |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| SERIALIZABLE            |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@global.transaction_isolation;</span><br><span class=\"line\">+--------------------------------+</span><br><span class=\"line\">| @@global.transaction_isolation |</span><br><span class=\"line\">+--------------------------------+</span><br><span class=\"line\">| READ-UNCOMMITTED               |</span><br><span class=\"line\">+--------------------------------+</span><br><span class=\"line\">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置隔离级别\"><a href=\"#设置隔离级别\" class=\"headerlink\" title=\"设置隔离级别\"></a>设置隔离级别</h2><h4 id=\"方式1：通过set命令\"><a href=\"#方式1：通过set命令\" class=\"headerlink\" title=\"方式1：通过set命令\"></a>方式1：通过set命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL level;</span><br><span class=\"line\">其中level有4种值：</span><br><span class=\"line\">level: &#123;</span><br><span class=\"line\">     REPEATABLE READ</span><br><span class=\"line\">   | READ COMMITTED</span><br><span class=\"line\">   | READ UNCOMMITTED</span><br><span class=\"line\">   | SERIALIZABLE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关键词：GLOBAL\"><a href=\"#关键词：GLOBAL\" class=\"headerlink\" title=\"关键词：GLOBAL\"></a>关键词：GLOBAL</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL TRANSACTION ISOLATION LEVEL level;</span><br><span class=\"line\">eg: set global transaction isolation level read uncommitted;</span><br><span class=\"line\">* 只对执行完该语句之后产生的会话起作用</span><br><span class=\"line\">* 当前已经存在的会话无效</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关键词：SESSION\"><a href=\"#关键词：SESSION\" class=\"headerlink\" title=\"关键词：SESSION\"></a>关键词：SESSION</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET SESSION TRANSACTION ISOLATION LEVEL level;</span><br><span class=\"line\">* 对当前会话的所有后续的事务有效</span><br><span class=\"line\">* 该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务</span><br><span class=\"line\">* 如果在事务之间执行，则对后续的事务有效。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"无关键词\"><a href=\"#无关键词\" class=\"headerlink\" title=\"无关键词\"></a>无关键词</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET TRANSACTION ISOLATION LEVEL level;</span><br><span class=\"line\">* 只对当前会话中下一个即将开启的事务有效</span><br><span class=\"line\">* 下一个事务执行完后，后续事务将恢复到之前的隔离级别</span><br><span class=\"line\">* 该语句不能在已经开启的事务中间执行，会报错的</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式2：通过服务启动项命令\"><a href=\"#方式2：通过服务启动项命令\" class=\"headerlink\" title=\"方式2：通过服务启动项命令\"></a>方式2：通过服务启动项命令</h4><blockquote>\n<p>可以修改启动参数transaction-isolation的值</p>\n<p>比方说我们在启动服务器时指定了–transaction-isolation=READ UNCOMMITTED，那么事务的默认隔离级别就从原来的REPEATABLE READ变成了READ UNCOMMITTED。</p>\n</blockquote>\n<h2 id=\"关于事务日志\"><a href=\"#关于事务日志\" class=\"headerlink\" title=\"关于事务日志\"></a>关于事务日志</h2><p>关于事务日志的说明中，我们可以看得出来，只要修改的数据已经写入到日志并且持久化了，数据本身还没有写入磁盘时，即使断电了，系统在重启的时候依然会将数据恢复。那么我们再来看看官网给出的innodb_flush_log_at_trx_commit 参数的介绍</p>\n<ul>\n<li>为0时，如果MySQL挂了或宕机可能会有1秒数据的丢失。</li>\n<li>为1时， 只要事务提交成功，redo log记录就一定在硬盘里，不会有任何数据丢失。如果事务执行期间MySQL挂了或宕机，这部分日志丢了，但是事务并没有提交，所以日志丢了也不会有损失。</li>\n<li>为2时， 只要事务提交成功，redo log buffer中的内容只写入文件系统缓存（page cache）。如果仅仅只是MySQL挂了不会有任何数据丢失，但是宕机可能会有1秒数据的丢失。</li>\n</ul>\n<p>该属性主要是为数据库的ACID原则进行服务的，并且默认为1，但是实际情况下设置为2会提高很多的事务性能，设置1的时候，innodb的缓存会在事务提交或者每秒钟时都会进行磁盘的刷新操作，2的时候，innodb缓存会在提交事务时写入到事务日志但不会刷新磁盘，然后在每秒钟时进行磁盘刷新操作，2要比1提高很多性能，事务没有commit时，断电了，此时肯定数据是没有更新成功的，因为都还没有来得及写入事务日志，事务提交后，在写入事务日志的时候，发生断电，此时无论是参数的值是1还是2，都应该恢复不了数据了，每秒钟刷新磁盘时，发生断电，此时既然事务日志已经持久化了，那么重启后，数据是会自动恢复的。</p>\n<h4 id=\"刷盘时机\"><a href=\"#刷盘时机\" class=\"headerlink\" title=\"刷盘时机\"></a>刷盘时机</h4><p>InnoDB 存储引擎为 redo log 的刷盘策略提供了 innodb_flush_log_at_trx_commit 参数，它支持三种策略：</p>\n<ul>\n<li><strong>0</strong> ：设置为 0 的时候，表示每次事务提交时不进行刷盘操作，后台线程进行刷盘</li>\n<li><strong>1</strong> ：设置为 1 的时候，表示每次事务提交时都将进行刷盘操作（默认值）</li>\n<li><strong>2</strong> ：设置为 2 的时候，表示每次事务提交时都只把 redo log buffer 内容写入 page cache</li>\n</ul>\n<p>innodb_flush_log_at_trx_commit 参数默认为 1 ，也就是说当事务提交时会调用 fsync 对 redo log 进行刷盘</p>\n<p>另外，InnoDB 存储引擎有一个后台线程，每隔1 秒，就会把 redo log buffer 中的内容写到文件系统缓存（page cache），然后调用 fsync 刷盘。也就是说，一个没有提交事务的 redo log 记录，也可能会刷盘。因为在事务执行过程 redo log 记录是会写入redo log buffer 中，这些 redo log 记录会被后台线程刷盘。除了后台线程每秒1次的轮询操作，还有一种情况，当 redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动刷盘。</p>\n<h4 id=\"日志存储方式\"><a href=\"#日志存储方式\" class=\"headerlink\" title=\"日志存储方式\"></a>日志存储方式</h4><p>硬盘上存储的 redo log 日志文件不只一个，而是以一个日志文件组的形式出现的，每个的redo日志文件大小都是一样的。<br>比如可以配置为一组4个文件，每个文件的大小是 1GB，整个 redo log 日志文件组可以记录4G的内容。<br>它采用的是环形数组形式，从头开始写，写到末尾又回到头循环写，在个日志文件组中还有两个重要的属性，分别是 write pos、checkpoint</p>\n<ul>\n<li>write pos 是当前记录的位置，一边写一边后移</li>\n<li>checkpoint 是当前要擦除的位置，也是往后推移<br>每次刷盘 redo log 记录到日志文件组中，write pos 位置就会后移更新。如果 write pos 追上 checkpoint ，表示日志文件组满了，这时候不能再写入新的 redo log 记录，MySQL 得停下来，清空一些记录，把 checkpoint 推进一下。</li>\n</ul>\n<h2 id=\"关于Autocommit\"><a href=\"#关于Autocommit\" class=\"headerlink\" title=\"关于Autocommit\"></a>关于Autocommit</h2><p>当变量autocommit的值为ON时，代表自动提交开启，改为OFF则变为手动提交。在手动提交模式下，可以使用下面两种指令开启事务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start transaction;</span><br><span class=\"line\">begin;</span><br></pre></td></tr></table></figure>\n\n<p>结束事务的方式也有两种，事务确认提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit;</span><br><span class=\"line\">rollback;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set @@autocommit=0;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SHOW VARIABLES like &#x27;%autocommit%&#x27;;</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| autocommit    | OFF   |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"悲观锁与乐观锁\"><a href=\"#悲观锁与乐观锁\" class=\"headerlink\" title=\"悲观锁与乐观锁\"></a>悲观锁与乐观锁</h2><ul>\n<li><p><strong>悲观锁</strong>：悲观锁指对数据被意外修改持保守态度，依赖数据库原生支持的锁机制来保证当前事务处理的安全性，防止其他并发事务对目标数据的破坏或破坏其他并发事务数据，将在事务开始执行前或执行中申请锁定，执行完后再释放锁定。这对于长事务来讲，可能会严重影响系统的并发处理能力</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCK TABLES a WRITE;</span><br><span class=\"line\">INSERT INTO a VALUES (1,23),(2,34),(4,33);</span><br><span class=\"line\">INSERT INTO a VALUES (8,26),(6,29);</span><br><span class=\"line\">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>\n\n<p>锁定表可以加速用多个语句执行的INSERT操作，因为索引缓存区仅在所有INSERT语句完成后刷新到磁盘上一次。一般有多少INSERT语句即有多少索引缓存区刷新，如果能用一个语句插入所有的行，就不需要锁定；对于事务表，应使用BEGIN和COMMIT代替LOCK TABLES来加快插入</p>\n</li>\n<li><p><strong>乐观锁</strong>：乐观锁相对悲观锁而言，先假想数据不会被并发操作修改，没有数据冲突，只在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则宣告失败，否则更新数据。这就要求避免使用长事务和锁机制，以免导致系统并发处理能力降低，保障系统生产效率。下面将说明使用乐观锁时的大致业务处理流程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首 步：执行一次查询 select some_column as old_value from some_table where id = id_value (假设该值在当前业务处理过程中不会被其他并发事务修改)</span><br><span class=\"line\">...</span><br><span class=\"line\">第n步：old_value参与中间业务处理，比如old_value被自己修改 new_value = f(old_value)。这期间可能耗时很长，但不会为持有 some_column 而申请所在的行或表锁定，因此其他并发事务可以获得该锁</span><br><span class=\"line\">...</span><br><span class=\"line\">尾 步：执行条件更新 update some_table set some_column = new_value where id = id_value and some_column = old_value (条件更新中检查old_value是否被修改)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"三大日志\"><a href=\"#三大日志\" class=\"headerlink\" title=\"三大日志\"></a>三大日志</h2><p>MySQL InnoDB 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。MySQL数据库的数据备份、主备、主主、主从都离不开binlog，需要依靠binlog来同步数据，保证数据一致性。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"事务的4大特性ACID\"><a href=\"#事务的4大特性ACID\" class=\"headerlink\" title=\"事务的4大特性ACID\"></a>事务的4大特性ACID</h1><p>原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。<br>一致性（Consistent）：一方面，在事务开始之前和事务结束以后，数据库的完整性没有被破坏；另一方面，写入的数据必须完全符合所有的预设规则。<br>隔离性（Isolation）：不同的会话或线程，操作数据库的时候可能产生多个事务。如果同时操作一张表或同一行数据，必然产生并发或干扰操作。隔离性要求事务间对表或数据操作是透明的，互相不存在干扰的，通过这种方式保证一致性。<br>持久性（Durable）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>\n<h1 id=\"MySQL-事务的隔离级别\"><a href=\"#MySQL-事务的隔离级别\" class=\"headerlink\" title=\"MySQL 事务的隔离级别\"></a>MySQL 事务的隔离级别</h1><h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\">docker run --name=mysql -it -p3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\">docker exec -it 15084 bash</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql&gt; create database kangpan</span><br><span class=\"line\">mysql&gt; use kangpan</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"准备数据\"><a href=\"#准备数据\" class=\"headerlink\" title=\"准备数据\"></a>准备数据</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table user(</span><br><span class=\"line\">    -&gt; id int(10) auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(30) default null,</span><br><span class=\"line\">    -&gt; age tinyint(4) default null,</span><br><span class=\"line\">    -&gt; primary key (id)</span><br><span class=\"line\">    -&gt; )engine=innodb charset=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"> insert into user(id, name, age) values (1,&#x27;kangpan&#x27;,31);</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from user;</span><br><span class=\"line\">+----+---------+------+</span><br><span class=\"line\">| id | name    | age  |</span><br><span class=\"line\">+----+---------+------+</span><br><span class=\"line\">|  1 | kangpan |   31 |</span><br><span class=\"line\">+----+---------+------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事务并发可能出现的情况\"><a href=\"#事务并发可能出现的情况\" class=\"headerlink\" title=\"事务并发可能出现的情况\"></a>事务并发可能出现的情况</h2><h4 id=\"脏读（Dirty-Read）\"><a href=\"#脏读（Dirty-Read）\" class=\"headerlink\" title=\"脏读（Dirty Read）\"></a>脏读（Dirty Read）</h4><p>一个事务读到了另一个未提交事务修改过的数据</p>\n<h4 id=\"幻读（Phantom）\"><a href=\"#幻读（Phantom）\" class=\"headerlink\" title=\"幻读（Phantom）\"></a>幻读（Phantom）</h4><p>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）</p>\n<h4 id=\"不可重复读（Non-Repeatable-Read）\"><a href=\"#不可重复读（Non-Repeatable-Read）\" class=\"headerlink\" title=\"不可重复读（Non-Repeatable Read）\"></a>不可重复读（Non-Repeatable Read）</h4><p>一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提交和读已提交隔离级别都可能会出现）</p>\n<h4 id=\"幻读（Phantom）-1\"><a href=\"#幻读（Phantom）-1\" class=\"headerlink\" title=\"幻读（Phantom）\"></a>幻读（Phantom）</h4><p>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）</p>\n<h2 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h2><p>MySQL的事务隔离级别一共有四个，分别是读未提交、读已提交、可重复读以及可串行化。</p>\n<p>MySQL的隔离级别的作用就是让事务之间互相隔离，互不影响，这样可以保证事务的一致性。</p>\n<p>隔离级别比较：可串行化&gt;可重复读&gt;读已提交&gt;读未提交</p>\n<p>隔离级别对性能的影响比较：可串行化&gt;可重复读&gt;读已提交&gt;读未提交</p>\n<p>由此看出，隔离级别越高，所需要消耗的MySQL性能越大（如事务并发严重性），为了平衡二者，一般建议设置的隔离级别为可重复读，MySQL默认的隔离级别也是可重复读。</p>\n<h4 id=\"读未提交（READ-UNCOMMITTED）\"><a href=\"#读未提交（READ-UNCOMMITTED）\" class=\"headerlink\" title=\"读未提交（READ UNCOMMITTED）\"></a>读未提交（READ UNCOMMITTED）</h4><p>在读未提交隔离级别下，事务A可以读取到事务B修改过但未提交的数据。</p>\n<p>可能发生脏读、不可重复读和幻读问题，一般很少使用此隔离级别。</p>\n<h4 id=\"读已提交（READ-COMMITTED）\"><a href=\"#读已提交（READ-COMMITTED）\" class=\"headerlink\" title=\"读已提交（READ COMMITTED）\"></a>读已提交（READ COMMITTED）</h4><p>在读已提交隔离级别下，事务B只能在事务A修改过并且已提交后才能读取到事务B修改的数据。</p>\n<p>读已提交隔离级别解决了脏读的问题，但可能发生不可重复读和幻读问题，一般很少使用此隔离级别。</p>\n<h4 id=\"可重复读（REPEATABLE-READ）\"><a href=\"#可重复读（REPEATABLE-READ）\" class=\"headerlink\" title=\"可重复读（REPEATABLE READ）\"></a>可重复读（REPEATABLE READ）</h4><p>在可重复读隔离级别下，事务B只能在事务A修改过数据并提交后，自己也提交事务后，才能读取到事务B修改的数据。可重复读隔离级别解决了脏读和不可重复读的问题，但可能发生幻读问题。</p>\n<p>提问：为什么上了写锁（写操作），别的事务还可以读操作？</p>\n<p>因为InnoDB有MVCC机制（多版本并发控制），可以使用快照读，而不会被阻塞。</p>\n<h4 id=\"可串行化（SERIALIZABLE）\"><a href=\"#可串行化（SERIALIZABLE）\" class=\"headerlink\" title=\"可串行化（SERIALIZABLE）\"></a>可串行化（SERIALIZABLE）</h4><p>各种问题（脏读、不可重复读、幻读）都不会发生，通过加锁实现（读锁和写锁）。</p>\n<h2 id=\"隔离级别的实现原理\"><a href=\"#隔离级别的实现原理\" class=\"headerlink\" title=\"隔离级别的实现原理\"></a>隔离级别的实现原理</h2><p>使用MySQL的默认隔离级别（可重复读）来进行说明。</p>\n<p>每条记录在更新的时候都会同时记录一条回滚操作（回滚操作日志undo log）。同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。即通过回滚（rollback操作），可以回到前一个状态的值。</p>\n<p>假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p>\n<ul>\n<li><p>read-view A : 回滚段 将 2 改成 1</p>\n</li>\n<li><p>read-view B : 回滚段 将 3 改成 2</p>\n</li>\n<li><p>read-view C : 当前值 4 </p>\n</li>\n</ul>\n<p>read-view A -&gt; read-view B -&gt; read-view C</p>\n<p>当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。</p>\n<p>同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。</p>\n<p>提问：回滚操作日志（undo log）什么时候删除？</p>\n<p>MySQL会判断当没有事务需要用到这些回滚日志的时候，回滚日志会被删除。</p>\n<p>提问：什么时候不需要了？</p>\n<p>当系统里么有比这个回滚日志更早的read-view的时候。</p>\n<p>我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行<strong>回滚</strong>，在 MySQL 中，恢复机制是通过 <strong>回滚日志（undo log）</strong> 实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用 <strong>回滚日志</strong> 中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚将之前未完成的事务。</p>\n<p>另外，MVCC 的实现依赖于：<strong>隐藏字段、Read View、undo log</strong>。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改</p>\n<h2 id=\"查看当前会话隔离级别\"><a href=\"#查看当前会话隔离级别\" class=\"headerlink\" title=\"查看当前会话隔离级别\"></a>查看当前会话隔离级别</h2><h4 id=\"方式1\"><a href=\"#方式1\" class=\"headerlink\" title=\"方式1\"></a>方式1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：SHOW VARIABLES LIKE &#x27;transaction_isolation&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show variables like &#x27;transaction_isolation&#x27;;</span><br><span class=\"line\">+-----------------------+--------------+</span><br><span class=\"line\">| Variable_name  | Value |</span><br><span class=\"line\">+-----------------------+--------------+</span><br><span class=\"line\">| transaction_isolation | SERIALIZABLE |</span><br><span class=\"line\">+-----------------------+--------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式2\"><a href=\"#方式2\" class=\"headerlink\" title=\"方式2\"></a>方式2</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：SELECT @@transaction_isolation;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@transaction_isolation;</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| @@transaction_isolation |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| SERIALIZABLE            |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@global.transaction_isolation;</span><br><span class=\"line\">+--------------------------------+</span><br><span class=\"line\">| @@global.transaction_isolation |</span><br><span class=\"line\">+--------------------------------+</span><br><span class=\"line\">| READ-UNCOMMITTED               |</span><br><span class=\"line\">+--------------------------------+</span><br><span class=\"line\">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置隔离级别\"><a href=\"#设置隔离级别\" class=\"headerlink\" title=\"设置隔离级别\"></a>设置隔离级别</h2><h4 id=\"方式1：通过set命令\"><a href=\"#方式1：通过set命令\" class=\"headerlink\" title=\"方式1：通过set命令\"></a>方式1：通过set命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL level;</span><br><span class=\"line\">其中level有4种值：</span><br><span class=\"line\">level: &#123;</span><br><span class=\"line\">     REPEATABLE READ</span><br><span class=\"line\">   | READ COMMITTED</span><br><span class=\"line\">   | READ UNCOMMITTED</span><br><span class=\"line\">   | SERIALIZABLE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关键词：GLOBAL\"><a href=\"#关键词：GLOBAL\" class=\"headerlink\" title=\"关键词：GLOBAL\"></a>关键词：GLOBAL</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL TRANSACTION ISOLATION LEVEL level;</span><br><span class=\"line\">eg: set global transaction isolation level read uncommitted;</span><br><span class=\"line\">* 只对执行完该语句之后产生的会话起作用</span><br><span class=\"line\">* 当前已经存在的会话无效</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关键词：SESSION\"><a href=\"#关键词：SESSION\" class=\"headerlink\" title=\"关键词：SESSION\"></a>关键词：SESSION</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET SESSION TRANSACTION ISOLATION LEVEL level;</span><br><span class=\"line\">* 对当前会话的所有后续的事务有效</span><br><span class=\"line\">* 该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务</span><br><span class=\"line\">* 如果在事务之间执行，则对后续的事务有效。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"无关键词\"><a href=\"#无关键词\" class=\"headerlink\" title=\"无关键词\"></a>无关键词</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET TRANSACTION ISOLATION LEVEL level;</span><br><span class=\"line\">* 只对当前会话中下一个即将开启的事务有效</span><br><span class=\"line\">* 下一个事务执行完后，后续事务将恢复到之前的隔离级别</span><br><span class=\"line\">* 该语句不能在已经开启的事务中间执行，会报错的</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式2：通过服务启动项命令\"><a href=\"#方式2：通过服务启动项命令\" class=\"headerlink\" title=\"方式2：通过服务启动项命令\"></a>方式2：通过服务启动项命令</h4><blockquote>\n<p>可以修改启动参数transaction-isolation的值</p>\n<p>比方说我们在启动服务器时指定了–transaction-isolation=READ UNCOMMITTED，那么事务的默认隔离级别就从原来的REPEATABLE READ变成了READ UNCOMMITTED。</p>\n</blockquote>\n<h2 id=\"关于事务日志\"><a href=\"#关于事务日志\" class=\"headerlink\" title=\"关于事务日志\"></a>关于事务日志</h2><p>关于事务日志的说明中，我们可以看得出来，只要修改的数据已经写入到日志并且持久化了，数据本身还没有写入磁盘时，即使断电了，系统在重启的时候依然会将数据恢复。那么我们再来看看官网给出的innodb_flush_log_at_trx_commit 参数的介绍</p>\n<ul>\n<li>为0时，如果MySQL挂了或宕机可能会有1秒数据的丢失。</li>\n<li>为1时， 只要事务提交成功，redo log记录就一定在硬盘里，不会有任何数据丢失。如果事务执行期间MySQL挂了或宕机，这部分日志丢了，但是事务并没有提交，所以日志丢了也不会有损失。</li>\n<li>为2时， 只要事务提交成功，redo log buffer中的内容只写入文件系统缓存（page cache）。如果仅仅只是MySQL挂了不会有任何数据丢失，但是宕机可能会有1秒数据的丢失。</li>\n</ul>\n<p>该属性主要是为数据库的ACID原则进行服务的，并且默认为1，但是实际情况下设置为2会提高很多的事务性能，设置1的时候，innodb的缓存会在事务提交或者每秒钟时都会进行磁盘的刷新操作，2的时候，innodb缓存会在提交事务时写入到事务日志但不会刷新磁盘，然后在每秒钟时进行磁盘刷新操作，2要比1提高很多性能，事务没有commit时，断电了，此时肯定数据是没有更新成功的，因为都还没有来得及写入事务日志，事务提交后，在写入事务日志的时候，发生断电，此时无论是参数的值是1还是2，都应该恢复不了数据了，每秒钟刷新磁盘时，发生断电，此时既然事务日志已经持久化了，那么重启后，数据是会自动恢复的。</p>\n<h4 id=\"刷盘时机\"><a href=\"#刷盘时机\" class=\"headerlink\" title=\"刷盘时机\"></a>刷盘时机</h4><p>InnoDB 存储引擎为 redo log 的刷盘策略提供了 innodb_flush_log_at_trx_commit 参数，它支持三种策略：</p>\n<ul>\n<li><strong>0</strong> ：设置为 0 的时候，表示每次事务提交时不进行刷盘操作，后台线程进行刷盘</li>\n<li><strong>1</strong> ：设置为 1 的时候，表示每次事务提交时都将进行刷盘操作（默认值）</li>\n<li><strong>2</strong> ：设置为 2 的时候，表示每次事务提交时都只把 redo log buffer 内容写入 page cache</li>\n</ul>\n<p>innodb_flush_log_at_trx_commit 参数默认为 1 ，也就是说当事务提交时会调用 fsync 对 redo log 进行刷盘</p>\n<p>另外，InnoDB 存储引擎有一个后台线程，每隔1 秒，就会把 redo log buffer 中的内容写到文件系统缓存（page cache），然后调用 fsync 刷盘。也就是说，一个没有提交事务的 redo log 记录，也可能会刷盘。因为在事务执行过程 redo log 记录是会写入redo log buffer 中，这些 redo log 记录会被后台线程刷盘。除了后台线程每秒1次的轮询操作，还有一种情况，当 redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动刷盘。</p>\n<h4 id=\"日志存储方式\"><a href=\"#日志存储方式\" class=\"headerlink\" title=\"日志存储方式\"></a>日志存储方式</h4><p>硬盘上存储的 redo log 日志文件不只一个，而是以一个日志文件组的形式出现的，每个的redo日志文件大小都是一样的。<br>比如可以配置为一组4个文件，每个文件的大小是 1GB，整个 redo log 日志文件组可以记录4G的内容。<br>它采用的是环形数组形式，从头开始写，写到末尾又回到头循环写，在个日志文件组中还有两个重要的属性，分别是 write pos、checkpoint</p>\n<ul>\n<li>write pos 是当前记录的位置，一边写一边后移</li>\n<li>checkpoint 是当前要擦除的位置，也是往后推移<br>每次刷盘 redo log 记录到日志文件组中，write pos 位置就会后移更新。如果 write pos 追上 checkpoint ，表示日志文件组满了，这时候不能再写入新的 redo log 记录，MySQL 得停下来，清空一些记录，把 checkpoint 推进一下。</li>\n</ul>\n<h2 id=\"关于Autocommit\"><a href=\"#关于Autocommit\" class=\"headerlink\" title=\"关于Autocommit\"></a>关于Autocommit</h2><p>当变量autocommit的值为ON时，代表自动提交开启，改为OFF则变为手动提交。在手动提交模式下，可以使用下面两种指令开启事务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start transaction;</span><br><span class=\"line\">begin;</span><br></pre></td></tr></table></figure>\n\n<p>结束事务的方式也有两种，事务确认提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit;</span><br><span class=\"line\">rollback;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set @@autocommit=0;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SHOW VARIABLES like &#x27;%autocommit%&#x27;;</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| autocommit    | OFF   |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"悲观锁与乐观锁\"><a href=\"#悲观锁与乐观锁\" class=\"headerlink\" title=\"悲观锁与乐观锁\"></a>悲观锁与乐观锁</h2><ul>\n<li><p><strong>悲观锁</strong>：悲观锁指对数据被意外修改持保守态度，依赖数据库原生支持的锁机制来保证当前事务处理的安全性，防止其他并发事务对目标数据的破坏或破坏其他并发事务数据，将在事务开始执行前或执行中申请锁定，执行完后再释放锁定。这对于长事务来讲，可能会严重影响系统的并发处理能力</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCK TABLES a WRITE;</span><br><span class=\"line\">INSERT INTO a VALUES (1,23),(2,34),(4,33);</span><br><span class=\"line\">INSERT INTO a VALUES (8,26),(6,29);</span><br><span class=\"line\">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>\n\n<p>锁定表可以加速用多个语句执行的INSERT操作，因为索引缓存区仅在所有INSERT语句完成后刷新到磁盘上一次。一般有多少INSERT语句即有多少索引缓存区刷新，如果能用一个语句插入所有的行，就不需要锁定；对于事务表，应使用BEGIN和COMMIT代替LOCK TABLES来加快插入</p>\n</li>\n<li><p><strong>乐观锁</strong>：乐观锁相对悲观锁而言，先假想数据不会被并发操作修改，没有数据冲突，只在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则宣告失败，否则更新数据。这就要求避免使用长事务和锁机制，以免导致系统并发处理能力降低，保障系统生产效率。下面将说明使用乐观锁时的大致业务处理流程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首 步：执行一次查询 select some_column as old_value from some_table where id = id_value (假设该值在当前业务处理过程中不会被其他并发事务修改)</span><br><span class=\"line\">...</span><br><span class=\"line\">第n步：old_value参与中间业务处理，比如old_value被自己修改 new_value = f(old_value)。这期间可能耗时很长，但不会为持有 some_column 而申请所在的行或表锁定，因此其他并发事务可以获得该锁</span><br><span class=\"line\">...</span><br><span class=\"line\">尾 步：执行条件更新 update some_table set some_column = new_value where id = id_value and some_column = old_value (条件更新中检查old_value是否被修改)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"三大日志\"><a href=\"#三大日志\" class=\"headerlink\" title=\"三大日志\"></a>三大日志</h2><p>MySQL InnoDB 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。MySQL数据库的数据备份、主备、主主、主从都离不开binlog，需要依靠binlog来同步数据，保证数据一致性。</p>\n"},{"title":"Observer","date":"2022-03-11T02:06:15.000Z","_content":"\n\n\n## 观察者模式结构\n\n观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub），它是一种通知机制。\n\n1. **发布者** （Publisher） 向对应的订阅者发送事件，发布者内部有一个订阅者列表的数据结构，支持添加和移除订阅者。\n2. **订阅者** （Subscriber） 声明了通知接口。 在绝大多数情况下， 该接口仅包含一个方法，用来处理发布的事件。\n3. **具体订阅者** （Concrete Subscribers） 具体订阅者类实现了订阅者的接口，不同事件的处理逻辑。\n4. **事件**（Event）声明了事件接口。一个标识接口，标识是一个事件。\n5. **具体事件**（Concrete Event）具体事件，当事件通过发布者去发布的时候，发布者会遍历订阅列表执行对应的订阅者的方法。\n\n订阅者也叫观察者，被观察者就是发布的具体事件。在消息队列中，利用了发布-订阅模式工作，被观察者对应消息发送者（生产者），订阅者对应的是消费者。消息队列中内部有发布者的功能，订阅者将自己注册到里面，可以接收对应的系统发送的消息。 [参考代码](https://github.com/kangpanwork/Observer)\n\n","source":"_posts/Observer.md","raw":"---\ntitle: Observer\ndate: 2022-03-11 10:06:15\ntags: Design\n---\n\n\n\n## 观察者模式结构\n\n观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub），它是一种通知机制。\n\n1. **发布者** （Publisher） 向对应的订阅者发送事件，发布者内部有一个订阅者列表的数据结构，支持添加和移除订阅者。\n2. **订阅者** （Subscriber） 声明了通知接口。 在绝大多数情况下， 该接口仅包含一个方法，用来处理发布的事件。\n3. **具体订阅者** （Concrete Subscribers） 具体订阅者类实现了订阅者的接口，不同事件的处理逻辑。\n4. **事件**（Event）声明了事件接口。一个标识接口，标识是一个事件。\n5. **具体事件**（Concrete Event）具体事件，当事件通过发布者去发布的时候，发布者会遍历订阅列表执行对应的订阅者的方法。\n\n订阅者也叫观察者，被观察者就是发布的具体事件。在消息队列中，利用了发布-订阅模式工作，被观察者对应消息发送者（生产者），订阅者对应的是消费者。消息队列中内部有发布者的功能，订阅者将自己注册到里面，可以接收对应的系统发送的消息。 [参考代码](https://github.com/kangpanwork/Observer)\n\n","slug":"Observer","published":1,"updated":"2022-03-11T10:00:09.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0m902ls0000ugln8p3vgucp","content":"<h2 id=\"观察者模式结构\"><a href=\"#观察者模式结构\" class=\"headerlink\" title=\"观察者模式结构\"></a>观察者模式结构</h2><p>观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub），它是一种通知机制。</p>\n<ol>\n<li><strong>发布者</strong> （Publisher） 向对应的订阅者发送事件，发布者内部有一个订阅者列表的数据结构，支持添加和移除订阅者。</li>\n<li><strong>订阅者</strong> （Subscriber） 声明了通知接口。 在绝大多数情况下， 该接口仅包含一个方法，用来处理发布的事件。</li>\n<li><strong>具体订阅者</strong> （Concrete Subscribers） 具体订阅者类实现了订阅者的接口，不同事件的处理逻辑。</li>\n<li><strong>事件</strong>（Event）声明了事件接口。一个标识接口，标识是一个事件。</li>\n<li><strong>具体事件</strong>（Concrete Event）具体事件，当事件通过发布者去发布的时候，发布者会遍历订阅列表执行对应的订阅者的方法。</li>\n</ol>\n<p>订阅者也叫观察者，被观察者就是发布的具体事件。在消息队列中，利用了发布-订阅模式工作，被观察者对应消息发送者（生产者），订阅者对应的是消费者。消息队列中内部有发布者的功能，订阅者将自己注册到里面，可以接收对应的系统发送的消息。 <a href=\"https://github.com/kangpanwork/Observer\">参考代码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"观察者模式结构\"><a href=\"#观察者模式结构\" class=\"headerlink\" title=\"观察者模式结构\"></a>观察者模式结构</h2><p>观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub），它是一种通知机制。</p>\n<ol>\n<li><strong>发布者</strong> （Publisher） 向对应的订阅者发送事件，发布者内部有一个订阅者列表的数据结构，支持添加和移除订阅者。</li>\n<li><strong>订阅者</strong> （Subscriber） 声明了通知接口。 在绝大多数情况下， 该接口仅包含一个方法，用来处理发布的事件。</li>\n<li><strong>具体订阅者</strong> （Concrete Subscribers） 具体订阅者类实现了订阅者的接口，不同事件的处理逻辑。</li>\n<li><strong>事件</strong>（Event）声明了事件接口。一个标识接口，标识是一个事件。</li>\n<li><strong>具体事件</strong>（Concrete Event）具体事件，当事件通过发布者去发布的时候，发布者会遍历订阅列表执行对应的订阅者的方法。</li>\n</ol>\n<p>订阅者也叫观察者，被观察者就是发布的具体事件。在消息队列中，利用了发布-订阅模式工作，被观察者对应消息发送者（生产者），订阅者对应的是消费者。消息队列中内部有发布者的功能，订阅者将自己注册到里面，可以接收对应的系统发送的消息。 <a href=\"https://github.com/kangpanwork/Observer\">参考代码</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl0j64zx80000ygln8607btoa","tag_id":"cl0j5r7cf0000aolnenlffra1","_id":"cl0j64zxn0001ygln0h162ms9"},{"post_id":"cl0j6lsfj0000ywln2wel6npw","tag_id":"cl0j6lsg00001ywln6ivl7s0r","_id":"cl0j6lsg50002ywln9x4ud216"},{"post_id":"cl0jdgabt00003cln8bvta0n8","tag_id":"cl0jdgabz00013clnh0uw9ywk","_id":"cl0jdgac100023cln15oefzpx"},{"post_id":"cl0kn6lj30000ioln4vn5d6ga","tag_id":"cl0ko028i0000uoln0rsrbe1b","_id":"cl0ko028q0001uoln9d3jhxa9"},{"post_id":"cl0koezlv0000fcln8vf3flre","tag_id":"cl0kebjeo0001aoln8f9j37i1","_id":"cl0koezm90001fclnf3e5486u"},{"post_id":"cl0m902ls0000ugln8p3vgucp","tag_id":"cl0m902ly0001ugln5j4whcpm","_id":"cl0m902m10002ugln8qdfb1it"}],"Tag":[{"name":"Hexo","_id":"cl0j5r7cf0000aolnenlffra1"},{"name":"WSL","_id":"cl0j6lsg00001ywln6ivl7s0r"},{"name":"Java","_id":"cl0jdgabz00013clnh0uw9ywk"},{"name":"MySql","_id":"cl0kebjeo0001aoln8f9j37i1"},{"name":"MyBatis","_id":"cl0ko028i0000uoln0rsrbe1b"},{"name":"Design","_id":"cl0m902ly0001ugln5j4whcpm"}]}}